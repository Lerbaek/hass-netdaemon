using System.Numerics;

namespace Lerbaek.NetDaemon.Common.Converters;

public record Spectrum(int From, int To);

public static class SpectrumConverter
{
    public static readonly Spectrum PercentageSpectrum = new(1, 100);
    public static readonly Spectrum ByteSpectrum = new(3, 255);
    public static readonly Spectrum TemperatureSpectrum = new(153, 500);

    // Todo: There's an off-by-1 in the lower range here, try setting something to 1%
    public static int ShiftRange<T>(this T input, Spectrum oldSpectrum, Spectrum newSpectrum) where T : INumber<T>
    {
        var oldRangeLength = oldSpectrum.To - oldSpectrum.From + 1;       // Possible input values count
        var inputDelta = Convert.ToDecimal(input) - oldSpectrum.From + 1; // 1-based input value
        var per1 = inputDelta / oldRangeLength;                           // Input ratio (0 - 1)

        var newRangeLength = newSpectrum.To - newSpectrum.From + 1;       // Possible output values count
        var outputDelta = per1 * newRangeLength;                          // 1-based output value
        var output = outputDelta + newSpectrum.From - 1;                  // Shifted output value

        return Math.Max(newSpectrum.From, (int)output);                   // Ensure that rounding error doesn't bring the value below the range
    }

    public static int Reverse(this int input, Spectrum spectrum)
    {
        ArgumentOutOfRangeException.ThrowIfLessThan(input, spectrum.From);
        ArgumentOutOfRangeException.ThrowIfGreaterThan(input, spectrum.To);
        return spectrum.From + spectrum.To - input;
    }
}