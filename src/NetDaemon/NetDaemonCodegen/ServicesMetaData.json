{
  "persistent_notification": {
    "create": {
      "name": "Create",
      "description": "Shows a notification on the notifications panel.",
      "fields": {
        "message": {
          "required": true,
          "example": "Please check your configuration.yaml.",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message body of the notification."
        },
        "title": {
          "example": "Test notification",
          "selector": {
            "text": null
          },
          "name": "Title",
          "description": "Optional title of the notification."
        },
        "notification_id": {
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Notification ID",
          "description": "ID of the notification. This new notification will overwrite an existing notification with the same ID."
        }
      }
    },
    "dismiss": {
      "name": "Dismiss",
      "description": "Deletes a notification from the notifications panel.",
      "fields": {
        "notification_id": {
          "required": true,
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Notification ID",
          "description": "ID of the notification to be deleted."
        }
      }
    },
    "dismiss_all": {
      "name": "Dismiss all",
      "description": "Deletes all notifications from the notifications panel.",
      "fields": {}
    }
  },
  "homeassistant": {
    "save_persistent_states": {
      "name": "Save persistent states",
      "description": "Saves the persistent states immediately. Maintains the normal periodic saving interval.",
      "fields": {}
    },
    "turn_off": {
      "name": "Generic turn off",
      "description": "Generic action to turn devices off under any domain.",
      "fields": {},
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "turn_on": {
      "name": "Generic turn on",
      "description": "Generic action to turn devices on under any domain.",
      "fields": {},
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "toggle": {
      "name": "Generic toggle",
      "description": "Generic action to toggle devices on/off under any domain.",
      "fields": {},
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "stop": {
      "name": "Stop",
      "description": "Stops Home Assistant.",
      "fields": {}
    },
    "restart": {
      "name": "Restart",
      "description": "Restarts Home Assistant.",
      "fields": {}
    },
    "check_config": {
      "name": "Check configuration",
      "description": "Checks the Home Assistant YAML-configuration files for errors. Errors will be shown in the Home Assistant logs.",
      "fields": {}
    },
    "update_entity": {
      "name": "Update entity",
      "description": "Forces one or more entities to update its data.",
      "fields": {
        "entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Entities to update",
          "description": "List of entities to force update."
        }
      }
    },
    "reload_core_config": {
      "name": "Reload core configuration",
      "description": "Reloads the core configuration from the YAML-configuration.",
      "fields": {}
    },
    "set_location": {
      "name": "Set location",
      "description": "Updates the Home Assistant location.",
      "fields": {
        "latitude": {
          "required": true,
          "example": 32.87336,
          "selector": {
            "number": {
              "mode": "box",
              "min": -90,
              "max": 90,
              "step": "any"
            }
          },
          "name": "Latitude",
          "description": "Latitude of your location."
        },
        "longitude": {
          "required": true,
          "example": 117.22743,
          "selector": {
            "number": {
              "mode": "box",
              "min": -180,
              "max": 180,
              "step": "any"
            }
          },
          "name": "Longitude",
          "description": "Longitude of your location."
        },
        "elevation": {
          "required": false,
          "example": 120,
          "selector": {
            "number": {
              "mode": "box",
              "step": "any"
            }
          },
          "name": "Elevation",
          "description": "Elevation of your location above sea level."
        }
      }
    },
    "reload_custom_templates": {
      "name": "Reload custom Jinja2 templates",
      "description": "Reloads Jinja2 templates found in the \u0060custom_templates\u0060 folder in your config. New values will be applied on the next render of the template.",
      "fields": {}
    },
    "reload_config_entry": {
      "name": "Reload config entry",
      "description": "Reloads the specified config entry.",
      "fields": {
        "entry_id": {
          "advanced": true,
          "required": false,
          "example": "8955375327824e14ba89e4b29cc3ec9a",
          "selector": {
            "text": null
          },
          "name": "Config entry ID",
          "description": "The configuration entry ID of the entry to be reloaded."
        }
      },
      "target": {
        "entity": [
          {}
        ],
        "device": [
          {}
        ]
      }
    },
    "reload_all": {
      "name": "Reload all",
      "description": "Reload all YAML configuration that can be reloaded without restarting Home Assistant.",
      "fields": {}
    }
  },
  "system_log": {
    "clear": {
      "name": "Clear",
      "description": "Deletes all log entries.",
      "fields": {}
    },
    "write": {
      "name": "Write",
      "description": "Write log entry.",
      "fields": {
        "message": {
          "required": true,
          "example": "Something went wrong",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message to log."
        },
        "level": {
          "default": "error",
          "selector": {
            "select": {
              "options": [
                "debug",
                "info",
                "warning",
                "error",
                "critical"
              ],
              "translation_key": "level"
            }
          },
          "name": "Level",
          "description": "Log level."
        },
        "logger": {
          "example": "mycomponent.myplatform",
          "selector": {
            "text": null
          },
          "name": "Logger",
          "description": "Logger name under which to log the message. Defaults to \u0060system_log.external\u0060."
        }
      }
    }
  },
  "logger": {
    "set_default_level": {
      "name": "Set default level",
      "description": "Sets the default log level for integrations.",
      "fields": {
        "level": {
          "selector": {
            "select": {
              "options": [
                "debug",
                "info",
                "warning",
                "error",
                "fatal",
                "critical"
              ],
              "translation_key": "level"
            }
          },
          "name": "Level",
          "description": "Default severity level for all integrations."
        }
      }
    },
    "set_level": {
      "name": "Set level",
      "description": "Sets the log level for one or more integrations.",
      "fields": {}
    }
  },
  "person": {
    "reload": {
      "name": "Reload",
      "description": "Reloads persons from the YAML-configuration.",
      "fields": {}
    }
  },
  "frontend": {
    "set_theme": {
      "name": "Set the default theme",
      "description": "Sets the default theme Home Assistant uses. Can be overridden by a user.",
      "fields": {
        "name": {
          "required": true,
          "example": "default",
          "selector": {
            "theme": {
              "include_default": true
            }
          },
          "name": "Theme",
          "description": "Name of a theme."
        },
        "mode": {
          "default": "light",
          "selector": {
            "select": {
              "options": [
                "dark",
                "light"
              ],
              "translation_key": "mode"
            }
          },
          "name": "Mode",
          "description": "Theme mode."
        }
      }
    },
    "reload_themes": {
      "name": "Reload themes",
      "description": "Reloads themes from the YAML-configuration.",
      "fields": {}
    }
  },
  "recorder": {
    "purge": {
      "name": "Purge",
      "description": "Starts purge task - to clean up old data from your database.",
      "fields": {
        "keep_days": {
          "selector": {
            "number": {
              "min": 0,
              "max": 365,
              "unit_of_measurement": "days"
            }
          },
          "name": "Days to keep",
          "description": "Number of days to keep the data in the database. Starting today, counting backward. A value of \u00607\u0060 means that everything older than a week will be purged."
        },
        "repack": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Repack",
          "description": "Attempt to save disk space by rewriting the entire database file."
        },
        "apply_filter": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Apply filter",
          "description": "Apply \u0060entity_id\u0060 and \u0060event_type\u0060 filters in addition to time-based purge."
        }
      }
    },
    "purge_entities": {
      "name": "Purge entities",
      "description": "Starts a purge task to remove the data related to specific entities from your database.",
      "fields": {
        "entity_id": {
          "required": false,
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Entities to remove",
          "description": "List of entities for which the data is to be removed from the recorder database."
        },
        "domains": {
          "example": "sun",
          "required": false,
          "selector": {
            "object": null
          },
          "name": "Domains to remove",
          "description": "List of domains for which the data needs to be removed from the recorder database."
        },
        "entity_globs": {
          "example": "domain*.object_id*",
          "required": false,
          "selector": {
            "object": null
          },
          "name": "Entity globs to remove",
          "description": "List of glob patterns used to select the entities for which the data is to be removed from the recorder database."
        },
        "keep_days": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 365,
              "unit_of_measurement": "days"
            }
          },
          "name": "Days to keep",
          "description": "Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of \u00607\u0060 means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately."
        }
      }
    },
    "enable": {
      "name": "Enable",
      "description": "Starts the recording of events and state changes.",
      "fields": {}
    },
    "disable": {
      "name": "Disable",
      "description": "Stops the recording of events and state changes.",
      "fields": {}
    }
  },
  "hassio": {
    "addon_start": {
      "name": "Start add-on",
      "description": "Starts an add-on.",
      "fields": {
        "addon": {
          "required": true,
          "example": "core_ssh",
          "selector": {
            "addon": null
          },
          "name": "Add-on",
          "description": "The add-on to start."
        }
      }
    },
    "addon_stop": {
      "name": "Stop add-on",
      "description": "Stops an add-on.",
      "fields": {
        "addon": {
          "required": true,
          "example": "core_ssh",
          "selector": {
            "addon": null
          },
          "name": "Add-on",
          "description": "The add-on to stop."
        }
      }
    },
    "addon_restart": {
      "name": "Restart add-on",
      "description": "Restarts an add-on.",
      "fields": {
        "addon": {
          "required": true,
          "example": "core_ssh",
          "selector": {
            "addon": null
          },
          "name": "Add-on",
          "description": "The add-on to restart."
        }
      }
    },
    "addon_update": {
      "name": "Update add-on",
      "description": "Updates an add-on. This action should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.",
      "fields": {
        "addon": {
          "required": true,
          "example": "core_ssh",
          "selector": {
            "addon": null
          },
          "name": "Add-on",
          "description": "The add-on to update."
        }
      }
    },
    "addon_stdin": {
      "name": "Write data to add-on stdin",
      "description": "Writes data to the add-on\u0027s standard input.",
      "fields": {
        "addon": {
          "required": true,
          "example": "core_ssh",
          "selector": {
            "addon": null
          },
          "name": "Add-on",
          "description": "The add-on to write to."
        }
      }
    },
    "host_shutdown": {
      "name": "Power off the host system",
      "description": "Powers off the host system.",
      "fields": {}
    },
    "host_reboot": {
      "name": "Reboot the host system",
      "description": "Reboots the host system.",
      "fields": {}
    },
    "backup_full": {
      "name": "Create a full backup",
      "description": "Creates a full backup.",
      "fields": {
        "name": {
          "example": "Backup 1",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "Optional (default = current date and time)."
        },
        "password": {
          "example": "password",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Password to protect the backup with."
        },
        "compressed": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Compressed",
          "description": "Compresses the backup files."
        },
        "location": {
          "example": "my_backup_mount",
          "selector": {
            "backup_location": null
          },
          "name": "Location",
          "description": "Name of a backup network storage to host backups."
        },
        "homeassistant_exclude_database": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Home Assistant exclude database",
          "description": "Exclude the Home Assistant database file from backup"
        }
      }
    },
    "backup_partial": {
      "name": "Create a partial backup",
      "description": "Creates a partial backup.",
      "fields": {
        "homeassistant": {
          "selector": {
            "boolean": null
          },
          "name": "Home Assistant settings",
          "description": "Includes Home Assistant settings in the backup."
        },
        "homeassistant_exclude_database": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Home Assistant exclude database",
          "description": "Exclude the Home Assistant database file from backup"
        },
        "addons": {
          "example": [
            "core_ssh",
            "core_samba",
            "core_mosquitto"
          ],
          "selector": {
            "object": null
          },
          "name": "Add-ons",
          "description": "List of add-ons to include in the backup. Use the name slug of the add-on."
        },
        "folders": {
          "example": [
            "homeassistant",
            "share"
          ],
          "selector": {
            "object": null
          },
          "name": "Folders",
          "description": "List of directories to include in the backup."
        },
        "name": {
          "example": "Partial backup 1",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "Optional (default = current date and time)."
        },
        "password": {
          "example": "password",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Password to protect the backup with."
        },
        "compressed": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Compressed",
          "description": "Compresses the backup files."
        },
        "location": {
          "example": "my_backup_mount",
          "selector": {
            "backup_location": null
          },
          "name": "Location",
          "description": "Name of a backup network storage to host backups."
        }
      }
    },
    "restore_full": {
      "name": "Restore from full backup",
      "description": "Restores from full backup.",
      "fields": {
        "slug": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Slug",
          "description": "Slug of backup to restore from."
        },
        "password": {
          "example": "password",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Optional password."
        }
      }
    },
    "restore_partial": {
      "name": "Restore from partial backup",
      "description": "Restores from a partial backup.",
      "fields": {
        "slug": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Slug",
          "description": "Slug of backup to restore from."
        },
        "homeassistant": {
          "selector": {
            "boolean": null
          },
          "name": "Home Assistant settings",
          "description": "Restores Home Assistant."
        },
        "folders": {
          "example": [
            "homeassistant",
            "share"
          ],
          "selector": {
            "object": null
          },
          "name": "Folders",
          "description": "List of directories to include in the backup."
        },
        "addons": {
          "example": [
            "core_ssh",
            "core_samba",
            "core_mosquitto"
          ],
          "selector": {
            "object": null
          },
          "name": "Add-ons",
          "description": "List of add-ons to include in the backup. Use the name slug of the add-on."
        },
        "password": {
          "example": "password",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Optional password."
        }
      }
    }
  },
  "update": {
    "install": {
      "name": "Install update",
      "description": "Installs an update for a device or service.",
      "fields": {
        "version": {
          "required": false,
          "example": "1.0.0",
          "selector": {
            "text": null
          },
          "name": "Version",
          "description": "The version to install. If omitted, the latest version will be installed."
        },
        "backup": {
          "required": false,
          "selector": {
            "boolean": null
          },
          "name": "Backup",
          "description": "If supported by the integration, this creates a backup before starting the update."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "update"
            ]
          }
        ]
      }
    },
    "skip": {
      "name": "Skip update",
      "description": "Marks currently available update as skipped.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "update"
            ]
          }
        ]
      }
    },
    "clear_skipped": {
      "name": "Clear skipped update",
      "description": "Removes the skipped version marker from an update.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "update"
            ]
          }
        ]
      }
    }
  },
  "cloud": {
    "remote_connect": {
      "name": "Enable remote access",
      "description": "Makes the instance UI accessible from outside of the local network by enabling your Home Assistant Cloud connection.",
      "fields": {}
    },
    "remote_disconnect": {
      "name": "Disable remote access",
      "description": "Disconnects the instance UI from Home Assistant Cloud. This disables access to it from outside your local network.",
      "fields": {}
    }
  },
  "ffmpeg": {
    "start": {
      "name": "Start",
      "description": "Sends a start command to a ffmpeg based sensor.",
      "fields": {
        "entity_id": {
          "selector": {
            "entity": {
              "integration": "ffmpeg",
              "domain": "binary_sensor"
            }
          },
          "name": "Entity",
          "description": "Name of entity that will start. Platform dependent."
        }
      }
    },
    "stop": {
      "name": "Stop",
      "description": "Sends a stop command to a ffmpeg based sensor.",
      "fields": {
        "entity_id": {
          "selector": {
            "entity": {
              "integration": "ffmpeg",
              "domain": "binary_sensor"
            }
          },
          "name": "Entity",
          "description": "Name of entity that will stop. Platform dependent."
        }
      }
    },
    "restart": {
      "name": "Restart",
      "description": "Sends a restart command to a ffmpeg based sensor.",
      "fields": {
        "entity_id": {
          "selector": {
            "entity": {
              "integration": "ffmpeg",
              "domain": "binary_sensor"
            }
          },
          "name": "Entity",
          "description": "Name of entity that will restart. Platform dependent."
        }
      }
    }
  },
  "tts": {
    "speak": {
      "name": "Speak",
      "description": "Speaks something using text-to-speech on a media player.",
      "fields": {
        "media_player_entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          },
          "name": "Media player entity",
          "description": "Media players to play the message."
        },
        "message": {
          "example": "My name is hanna",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "The text you want to convert into speech so that you can listen to it on your device."
        },
        "cache": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cache",
          "description": "Stores this message locally so that when the text is requested again, the output can be produced more quickly."
        },
        "language": {
          "example": "ru",
          "selector": {
            "text": null
          },
          "name": "Language",
          "description": "Language to use for speech generation."
        },
        "options": {
          "advanced": true,
          "example": "platform specific",
          "selector": {
            "object": null
          },
          "name": "Options",
          "description": "A dictionary containing integration-specific options."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "tts"
            ]
          }
        ]
      }
    },
    "clear_cache": {
      "name": "Clear TTS cache",
      "description": "Removes all cached text-to-speech files and purges the memory.",
      "fields": {}
    },
    "cloud_say": {
      "name": "Say a TTS message with cloud",
      "description": "Say something using text-to-speech on a media player with cloud.",
      "fields": {
        "entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          }
        },
        "message": {
          "example": "My name is hanna",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "cache": {
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "language": {
          "example": "ru",
          "selector": {
            "text": null
          }
        },
        "options": {
          "advanced": true,
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    }
  },
  "rest": {
    "reload": {
      "name": "Reload",
      "description": "Reloads REST entities from the YAML-configuration.",
      "fields": {}
    }
  },
  "template": {
    "reload": {
      "name": "Reload",
      "description": "Reloads template entities from the YAML-configuration.",
      "fields": {}
    }
  },
  "group": {
    "reload": {
      "name": "Reload",
      "description": "Reloads group configuration, entities, and notify services from YAML-configuration.",
      "fields": {}
    },
    "set": {
      "name": "Set",
      "description": "Creates/Updates a user group.",
      "fields": {
        "object_id": {
          "required": true,
          "example": "test_group",
          "selector": {
            "text": null
          },
          "name": "Object ID",
          "description": "Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]."
        },
        "name": {
          "example": "My test group",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "Name of the group."
        },
        "icon": {
          "example": "mdi:camera",
          "selector": {
            "icon": null
          },
          "name": "Icon",
          "description": "Name of the icon for the group."
        },
        "entities": {
          "example": "domain.entity_id1, domain.entity_id2",
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Entities",
          "description": "List of all members in the group. Cannot be used in combination with \u0060Add entities\u0060 or \u0060Remove entities\u0060."
        },
        "add_entities": {
          "example": "domain.entity_id1, domain.entity_id2",
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Add entities",
          "description": "List of members to be added to the group. Cannot be used in combination with \u0060Entities\u0060 or \u0060Remove entities\u0060."
        },
        "remove_entities": {
          "example": "domain.entity_id1, domain.entity_id2",
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Remove entities",
          "description": "List of members to be removed from a group. Cannot be used in combination with \u0060Entities\u0060 or \u0060Add entities\u0060."
        },
        "all": {
          "selector": {
            "boolean": null
          },
          "name": "All",
          "description": "Enable this option if the group should only be used when all entities are in state \u0060on\u0060."
        }
      }
    },
    "remove": {
      "name": "Remove",
      "description": "Removes a group.",
      "fields": {
        "object_id": {
          "required": true,
          "example": "test_group",
          "selector": {
            "object": null
          },
          "name": "Object ID",
          "description": "Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]."
        }
      }
    }
  },
  "notify": {
    "send_message": {
      "name": "Send a notification message",
      "description": "Sends a notification message.",
      "fields": {
        "message": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Your notification message."
        },
        "title": {
          "required": false,
          "selector": {
            "text": null
          },
          "filter": {
            "supported_features": [
              1
            ]
          },
          "name": "Title",
          "description": "Title for your notification message."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "notify"
            ]
          }
        ]
      }
    },
    "persistent_notification": {
      "name": "Send a persistent notification",
      "description": "Sends a notification that is visible in the notifications panel.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message body of the notification."
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          },
          "name": "Title",
          "description": "Title of the notification."
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          },
          "name": "Data",
          "description": "Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.."
        }
      }
    },
    "gros_telefon": {
      "name": "Send a notification with gros_telefon",
      "description": "Sends a notification message using the gros_telefon service.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "bornenes_telefon": {
      "name": "Send a notification with bornenes_telefon",
      "description": "Sends a notification message using the bornenes_telefon service.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "kristoffers_telefon": {
      "name": "Send a notification with kristoffers_telefon",
      "description": "Sends a notification message using the kristoffers_telefon service.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_kristoffers_galaxy_s20_ultra": {
      "name": "Send a notification via mobile_app_kristoffers_galaxy_s20_ultra",
      "description": "Sends a notification message using the mobile_app_kristoffers_galaxy_s20_ultra integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_gros_galaxy_s20": {
      "name": "Send a notification via mobile_app_gros_galaxy_s20",
      "description": "Sends a notification message using the mobile_app_gros_galaxy_s20 integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_oneplus_a3003": {
      "name": "Send a notification via mobile_app_oneplus_a3003",
      "description": "Sends a notification message using the mobile_app_oneplus_a3003 integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_samsung_galaxy_s8": {
      "name": "Send a notification via mobile_app_samsung_galaxy_s8",
      "description": "Sends a notification message using the mobile_app_samsung_galaxy_s8 integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_galaxy_watch4_wlsw": {
      "name": "Send a notification via mobile_app_galaxy_watch4_wlsw",
      "description": "Sends a notification message using the mobile_app_galaxy_watch4_wlsw integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_gros_backup_telefon": {
      "name": "Send a notification via mobile_app_gros_backup_telefon",
      "description": "Sends a notification message using the mobile_app_gros_backup_telefon integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_bornenes_telefon": {
      "name": "Send a notification via mobile_app_bornenes_telefon",
      "description": "Sends a notification message using the mobile_app_bornenes_telefon integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_kristoffer_iphone": {
      "name": "Send a notification via mobile_app_kristoffer_iphone",
      "description": "Sends a notification message using the mobile_app_kristoffer_iphone integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_kristoffers_galaxy_s24_ultra": {
      "name": "Send a notification via mobile_app_kristoffers_galaxy_s24_ultra",
      "description": "Sends a notification message using the mobile_app_kristoffers_galaxy_s24_ultra integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "notify": {
      "name": "Send a notification with notify",
      "description": "Sends a notification message using the notify service.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    }
  },
  "scene": {
    "reload": {
      "name": "Reload",
      "description": "Reloads the scenes from the YAML-configuration.",
      "fields": {}
    },
    "apply": {
      "name": "Apply",
      "description": "Activates a scene with configuration.",
      "fields": {
        "entities": {
          "required": true,
          "example": "light.kitchen: \u0022on\u0022\nlight.ceiling:\n  state: \u0022on\u0022\n  brightness: 80\n",
          "selector": {
            "object": null
          },
          "name": "Entities state",
          "description": "List of entities and their target state."
        },
        "transition": {
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Time it takes the devices to transition into the states defined in the scene."
        }
      }
    },
    "create": {
      "name": "Create",
      "description": "Creates a new scene.",
      "fields": {
        "scene_id": {
          "required": true,
          "example": "all_lights",
          "selector": {
            "text": null
          },
          "name": "Scene entity ID",
          "description": "The entity ID of the new scene."
        },
        "entities": {
          "advanced": true,
          "example": "light.tv_back_light: \u0022on\u0022\nlight.ceiling:\n  state: \u0022on\u0022\n  brightness: 200\n",
          "selector": {
            "object": null
          },
          "name": "Entities state",
          "description": "List of entities and their target state. If your entities are already in the target state right now, use \u0060snapshot_entities\u0060 instead."
        },
        "snapshot_entities": {
          "example": "- light.ceiling\n- light.kitchen\n",
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Snapshot entities",
          "description": "List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the \u0060snapshot_entities\u0060 with \u0060entities\u0060."
        }
      }
    },
    "delete": {
      "name": "Delete",
      "description": "Deletes a dynamically created scene.",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "homeassistant",
            "domain": [
              "scene"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Activate",
      "description": "Activates a scene.",
      "fields": {
        "transition": {
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Time it takes the devices to transition into the states defined in the scene."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "scene"
            ]
          }
        ]
      }
    }
  },
  "logbook": {
    "log": {
      "name": "Log",
      "description": "Creates a custom entry in the logbook.",
      "fields": {
        "name": {
          "required": true,
          "example": "Kitchen",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "Custom name for an entity, can be referenced using an \u0060entity_id\u0060."
        },
        "message": {
          "required": true,
          "example": "is being used",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message of the logbook entry."
        },
        "entity_id": {
          "selector": {
            "entity": null
          },
          "name": "Entity ID",
          "description": "Entity to reference in the logbook entry."
        },
        "domain": {
          "example": "light",
          "selector": {
            "text": null
          },
          "name": "Domain",
          "description": "Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry."
        }
      }
    }
  },
  "input_select": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "select_first": {
      "name": "First",
      "description": "Selects the first option.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_last": {
      "name": "Last",
      "description": "Selects the last option.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_next": {
      "name": "Next",
      "description": "Select the next option.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the last to the first option on the list."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_option": {
      "name": "Select",
      "description": "Selects an option.",
      "fields": {
        "option": {
          "required": true,
          "example": "\u0022Item A\u0022",
          "selector": {
            "text": null
          },
          "name": "Option",
          "description": "Option to be selected."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_previous": {
      "name": "Previous",
      "description": "Selects the previous option.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the last to the first option on the list."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "set_options": {
      "name": "Set options",
      "description": "Sets the options.",
      "fields": {
        "options": {
          "required": true,
          "example": "[\u0022Item A\u0022, \u0022Item B\u0022, \u0022Item C\u0022]",
          "selector": {
            "text": {
              "multiple": true
            }
          },
          "name": "Options",
          "description": "List of options."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    }
  },
  "input_button": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "press": {
      "name": "Press",
      "description": "Mimics the physical button press on the device.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_button"
            ]
          }
        ]
      }
    }
  },
  "zone": {
    "reload": {
      "name": "Reload",
      "description": "Reloads zones from the YAML-configuration.",
      "fields": {}
    }
  },
  "timer": {
    "reload": {
      "name": "Reload",
      "description": "Reloads timers from the YAML-configuration.",
      "fields": {}
    },
    "start": {
      "name": "Start",
      "description": "Starts a timer or restarts it with a provided duration.",
      "fields": {
        "duration": {
          "example": "00:01:00 or 60",
          "selector": {
            "text": null
          },
          "name": "Duration",
          "description": "Custom duration to restart the timer with."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "pause": {
      "name": "Pause",
      "description": "Pauses a running timer, retaining the remaining duration for later continuation.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "cancel": {
      "name": "Cancel",
      "description": "Resets a timer\u0027s duration to the last known initial value without firing the timer finished event.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "finish": {
      "name": "Finish",
      "description": "Finishes a running timer earlier than scheduled.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "change": {
      "name": "Change",
      "description": "Changes a timer by adding or subtracting a given duration.",
      "fields": {
        "duration": {
          "default": 0,
          "required": true,
          "example": "00:01:00, 60 or -60",
          "selector": {
            "text": null
          },
          "name": "Duration",
          "description": "Duration to add to or subtract from the running timer."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    }
  },
  "input_number": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "set_value": {
      "name": "Set",
      "description": "Sets the value.",
      "fields": {
        "value": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "step": 0.001,
              "mode": "box"
            }
          },
          "name": "Value",
          "description": "The target value."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_number"
            ]
          }
        ]
      }
    },
    "increment": {
      "name": "Increment",
      "description": "Increments the current value by 1 step.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_number"
            ]
          }
        ]
      }
    },
    "decrement": {
      "name": "Decrement",
      "description": "Decrements the current value by 1 step.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_number"
            ]
          }
        ]
      }
    }
  },
  "input_boolean": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turns on the helper.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_boolean"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns off the helper.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_boolean"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles the helper on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_boolean"
            ]
          }
        ]
      }
    }
  },
  "xiaomi_cloud_map_extractor": {
    "reload": {
      "name": "Reload",
      "description": "Reload all entities of Xiaomi Cloud Map Extractor platform",
      "fields": {}
    }
  },
  "camera": {
    "enable_motion_detection": {
      "name": "Enable motion detection",
      "description": "Enables the motion detection.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "disable_motion_detection": {
      "name": "Disable motion detection",
      "description": "Disables the motion detection.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns off the camera.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turns on the camera.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "snapshot": {
      "name": "Take snapshot",
      "description": "Takes a snapshot from a camera.",
      "fields": {
        "filename": {
          "required": true,
          "example": "/tmp/snapshot_{{ entity_id.name }}.jpg",
          "selector": {
            "text": null
          },
          "name": "Filename",
          "description": "Full path to filename."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "play_stream": {
      "name": "Play stream",
      "description": "Plays the camera stream on a supported media player.",
      "fields": {
        "media_player": {
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          },
          "name": "Media player",
          "description": "Media players to stream to."
        },
        "format": {
          "default": "hls",
          "selector": {
            "select": {
              "options": [
                "hls"
              ]
            }
          },
          "name": "Format",
          "description": "Stream format supported by the media player."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "record": {
      "name": "Record",
      "description": "Creates a recording of a live camera feed.",
      "fields": {
        "filename": {
          "required": true,
          "example": "/tmp/snapshot_{{ entity_id.name }}.mp4",
          "selector": {
            "text": null
          },
          "name": "Filename",
          "description": "Full path to filename. Must be mp4."
        },
        "duration": {
          "default": 30,
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Duration",
          "description": "Planned duration of the recording. The actual duration may vary."
        },
        "lookback": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Lookback",
          "description": "Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    }
  },
  "conversation": {
    "process": {
      "name": "Process",
      "description": "Launches a conversation from a transcribed text.",
      "fields": {
        "text": {
          "example": "Turn all lights on",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Text",
          "description": "Transcribed text input."
        },
        "language": {
          "example": "NL",
          "selector": {
            "text": null
          },
          "name": "Language",
          "description": "Language of text. Defaults to server language."
        },
        "agent_id": {
          "example": "homeassistant",
          "selector": {
            "conversation_agent": null
          },
          "name": "Agent",
          "description": "Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands."
        },
        "conversation_id": {
          "example": "my_conversation_1",
          "selector": {
            "text": null
          },
          "name": "Conversation ID",
          "description": "ID of the conversation, to be able to continue a previous conversation"
        }
      },
      "response": {
        "optional": true
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads the intent configuration.",
      "fields": {
        "language": {
          "example": "NL",
          "selector": {
            "text": null
          },
          "name": "Language",
          "description": "Language to clear cached intents for. Defaults to server language."
        },
        "agent_id": {
          "example": "homeassistant",
          "selector": {
            "conversation_agent": null
          },
          "name": "Agent",
          "description": "Conversation agent to reload."
        }
      }
    }
  },
  "light": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turn on one or more lights and adjust properties of the light, even when they are turned on already.",
      "fields": {
        "transition": {
          "filter": {
            "supported_features": [
              32
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Duration it takes to get to next state."
        },
        "rgb_color": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "example": "[255, 100, 100]",
          "selector": {
            "color_rgb": null
          },
          "name": "Color",
          "description": "The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue."
        },
        "kelvin": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "color_temp": {
              "unit": "kelvin",
              "min": 2000,
              "max": 6500
            }
          },
          "name": "Color temperature",
          "description": "Color temperature in Kelvin."
        },
        "brightness_pct": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Brightness",
          "description": "Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness."
        },
        "brightness_step_pct": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "number": {
              "min": -100,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Brightness step",
          "description": "Change brightness by a percentage."
        },
        "effect": {
          "filter": {
            "supported_features": [
              4
            ]
          },
          "selector": {
            "text": null
          },
          "name": "Effect",
          "description": "Light effect."
        },
        "advanced_fields": {
          "collapsed": true,
          "fields": {
            "rgbw_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[255, 100, 100, 50]",
              "selector": {
                "object": null
              }
            },
            "rgbww_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[255, 100, 100, 50, 70]",
              "selector": {
                "object": null
              }
            },
            "color_name": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "select": {
                  "translation_key": "color_name",
                  "options": [
                    "homeassistant",
                    "aliceblue",
                    "antiquewhite",
                    "aqua",
                    "aquamarine",
                    "azure",
                    "beige",
                    "bisque",
                    "blanchedalmond",
                    "blue",
                    "blueviolet",
                    "brown",
                    "burlywood",
                    "cadetblue",
                    "chartreuse",
                    "chocolate",
                    "coral",
                    "cornflowerblue",
                    "cornsilk",
                    "crimson",
                    "cyan",
                    "darkblue",
                    "darkcyan",
                    "darkgoldenrod",
                    "darkgray",
                    "darkgreen",
                    "darkgrey",
                    "darkkhaki",
                    "darkmagenta",
                    "darkolivegreen",
                    "darkorange",
                    "darkorchid",
                    "darkred",
                    "darksalmon",
                    "darkseagreen",
                    "darkslateblue",
                    "darkslategray",
                    "darkslategrey",
                    "darkturquoise",
                    "darkviolet",
                    "deeppink",
                    "deepskyblue",
                    "dimgray",
                    "dimgrey",
                    "dodgerblue",
                    "firebrick",
                    "floralwhite",
                    "forestgreen",
                    "fuchsia",
                    "gainsboro",
                    "ghostwhite",
                    "gold",
                    "goldenrod",
                    "gray",
                    "green",
                    "greenyellow",
                    "grey",
                    "honeydew",
                    "hotpink",
                    "indianred",
                    "indigo",
                    "ivory",
                    "khaki",
                    "lavender",
                    "lavenderblush",
                    "lawngreen",
                    "lemonchiffon",
                    "lightblue",
                    "lightcoral",
                    "lightcyan",
                    "lightgoldenrodyellow",
                    "lightgray",
                    "lightgreen",
                    "lightgrey",
                    "lightpink",
                    "lightsalmon",
                    "lightseagreen",
                    "lightskyblue",
                    "lightslategray",
                    "lightslategrey",
                    "lightsteelblue",
                    "lightyellow",
                    "lime",
                    "limegreen",
                    "linen",
                    "magenta",
                    "maroon",
                    "mediumaquamarine",
                    "mediumblue",
                    "mediumorchid",
                    "mediumpurple",
                    "mediumseagreen",
                    "mediumslateblue",
                    "mediumspringgreen",
                    "mediumturquoise",
                    "mediumvioletred",
                    "midnightblue",
                    "mintcream",
                    "mistyrose",
                    "moccasin",
                    "navajowhite",
                    "navy",
                    "navyblue",
                    "oldlace",
                    "olive",
                    "olivedrab",
                    "orange",
                    "orangered",
                    "orchid",
                    "palegoldenrod",
                    "palegreen",
                    "paleturquoise",
                    "palevioletred",
                    "papayawhip",
                    "peachpuff",
                    "peru",
                    "pink",
                    "plum",
                    "powderblue",
                    "purple",
                    "red",
                    "rosybrown",
                    "royalblue",
                    "saddlebrown",
                    "salmon",
                    "sandybrown",
                    "seagreen",
                    "seashell",
                    "sienna",
                    "silver",
                    "skyblue",
                    "slateblue",
                    "slategray",
                    "slategrey",
                    "snow",
                    "springgreen",
                    "steelblue",
                    "tan",
                    "teal",
                    "thistle",
                    "tomato",
                    "turquoise",
                    "violet",
                    "wheat",
                    "white",
                    "whitesmoke",
                    "yellow",
                    "yellowgreen"
                  ]
                }
              }
            },
            "hs_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[300, 70]",
              "selector": {
                "object": null
              }
            },
            "xy_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[0.52, 0.43]",
              "selector": {
                "object": null
              }
            },
            "color_temp": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "color_temp": {
                  "unit": "mired",
                  "min": 153,
                  "max": 500
                }
              }
            },
            "brightness": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "brightness",
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "number": {
                  "min": 0,
                  "max": 255
                }
              }
            },
            "brightness_step": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "brightness",
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "number": {
                  "min": -225,
                  "max": 255
                }
              }
            },
            "white": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "white"
                  ]
                }
              },
              "selector": {
                "constant": {
                  "value": true,
                  "label": "Enabled"
                }
              }
            },
            "profile": {
              "example": "relax",
              "selector": {
                "text": null
              }
            },
            "flash": {
              "filter": {
                "supported_features": [
                  8
                ]
              },
              "selector": {
                "select": {
                  "options": [
                    {
                      "label": "Long",
                      "value": "long"
                    },
                    {
                      "label": "Short",
                      "value": "short"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turn off one or more lights.",
      "fields": {
        "transition": {
          "filter": {
            "supported_features": [
              32
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Duration it takes to get to next state."
        },
        "advanced_fields": {
          "collapsed": true,
          "fields": {
            "flash": {
              "filter": {
                "supported_features": [
                  8
                ]
              },
              "selector": {
                "select": {
                  "options": [
                    {
                      "label": "Long",
                      "value": "long"
                    },
                    {
                      "label": "Short",
                      "value": "short"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles one or more lights, from on to off, or, off to on, based on their current state.",
      "fields": {
        "transition": {
          "filter": {
            "supported_features": [
              32
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Duration it takes to get to next state."
        },
        "rgb_color": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "example": "[255, 100, 100]",
          "selector": {
            "color_rgb": null
          },
          "name": "Color",
          "description": "The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue."
        },
        "kelvin": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "color_temp": {
              "unit": "kelvin",
              "min": 2000,
              "max": 6500
            }
          },
          "name": "Color temperature",
          "description": "Color temperature in Kelvin."
        },
        "brightness_pct": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Brightness",
          "description": "Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness."
        },
        "effect": {
          "filter": {
            "supported_features": [
              4
            ]
          },
          "selector": {
            "text": null
          },
          "name": "Effect",
          "description": "Light effect."
        },
        "advanced_fields": {
          "collapsed": true,
          "fields": {
            "rgbw_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[255, 100, 100, 50]",
              "selector": {
                "object": null
              }
            },
            "rgbww_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[255, 100, 100, 50, 70]",
              "selector": {
                "object": null
              }
            },
            "color_name": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "select": {
                  "translation_key": "color_name",
                  "options": [
                    "homeassistant",
                    "aliceblue",
                    "antiquewhite",
                    "aqua",
                    "aquamarine",
                    "azure",
                    "beige",
                    "bisque",
                    "blanchedalmond",
                    "blue",
                    "blueviolet",
                    "brown",
                    "burlywood",
                    "cadetblue",
                    "chartreuse",
                    "chocolate",
                    "coral",
                    "cornflowerblue",
                    "cornsilk",
                    "crimson",
                    "cyan",
                    "darkblue",
                    "darkcyan",
                    "darkgoldenrod",
                    "darkgray",
                    "darkgreen",
                    "darkgrey",
                    "darkkhaki",
                    "darkmagenta",
                    "darkolivegreen",
                    "darkorange",
                    "darkorchid",
                    "darkred",
                    "darksalmon",
                    "darkseagreen",
                    "darkslateblue",
                    "darkslategray",
                    "darkslategrey",
                    "darkturquoise",
                    "darkviolet",
                    "deeppink",
                    "deepskyblue",
                    "dimgray",
                    "dimgrey",
                    "dodgerblue",
                    "firebrick",
                    "floralwhite",
                    "forestgreen",
                    "fuchsia",
                    "gainsboro",
                    "ghostwhite",
                    "gold",
                    "goldenrod",
                    "gray",
                    "green",
                    "greenyellow",
                    "grey",
                    "honeydew",
                    "hotpink",
                    "indianred",
                    "indigo",
                    "ivory",
                    "khaki",
                    "lavender",
                    "lavenderblush",
                    "lawngreen",
                    "lemonchiffon",
                    "lightblue",
                    "lightcoral",
                    "lightcyan",
                    "lightgoldenrodyellow",
                    "lightgray",
                    "lightgreen",
                    "lightgrey",
                    "lightpink",
                    "lightsalmon",
                    "lightseagreen",
                    "lightskyblue",
                    "lightslategray",
                    "lightslategrey",
                    "lightsteelblue",
                    "lightyellow",
                    "lime",
                    "limegreen",
                    "linen",
                    "magenta",
                    "maroon",
                    "mediumaquamarine",
                    "mediumblue",
                    "mediumorchid",
                    "mediumpurple",
                    "mediumseagreen",
                    "mediumslateblue",
                    "mediumspringgreen",
                    "mediumturquoise",
                    "mediumvioletred",
                    "midnightblue",
                    "mintcream",
                    "mistyrose",
                    "moccasin",
                    "navajowhite",
                    "navy",
                    "navyblue",
                    "oldlace",
                    "olive",
                    "olivedrab",
                    "orange",
                    "orangered",
                    "orchid",
                    "palegoldenrod",
                    "palegreen",
                    "paleturquoise",
                    "palevioletred",
                    "papayawhip",
                    "peachpuff",
                    "peru",
                    "pink",
                    "plum",
                    "powderblue",
                    "purple",
                    "red",
                    "rosybrown",
                    "royalblue",
                    "saddlebrown",
                    "salmon",
                    "sandybrown",
                    "seagreen",
                    "seashell",
                    "sienna",
                    "silver",
                    "skyblue",
                    "slateblue",
                    "slategray",
                    "slategrey",
                    "snow",
                    "springgreen",
                    "steelblue",
                    "tan",
                    "teal",
                    "thistle",
                    "tomato",
                    "turquoise",
                    "violet",
                    "wheat",
                    "white",
                    "whitesmoke",
                    "yellow",
                    "yellowgreen"
                  ]
                }
              }
            },
            "hs_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[300, 70]",
              "selector": {
                "object": null
              }
            },
            "xy_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[0.52, 0.43]",
              "selector": {
                "object": null
              }
            },
            "color_temp": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "color_temp": {
                  "unit": "mired",
                  "min": 153,
                  "max": 500
                }
              }
            },
            "brightness": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "brightness",
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "number": {
                  "min": 0,
                  "max": 255
                }
              }
            },
            "white": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "white"
                  ]
                }
              },
              "selector": {
                "constant": {
                  "value": true,
                  "label": "Enabled"
                }
              }
            },
            "profile": {
              "example": "relax",
              "selector": {
                "text": null
              }
            },
            "flash": {
              "filter": {
                "supported_features": [
                  8
                ]
              },
              "selector": {
                "select": {
                  "options": [
                    {
                      "label": "Long",
                      "value": "long"
                    },
                    {
                      "label": "Short",
                      "value": "short"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "light"
            ]
          }
        ]
      }
    }
  },
  "duckdns": {
    "set_txt": {
      "name": "Set TXT",
      "description": "Sets the TXT record of your DuckDNS subdomain.",
      "fields": {
        "txt": {
          "required": true,
          "example": "This domain name is reserved for use in documentation",
          "selector": {
            "text": null
          },
          "name": "TXT",
          "description": "Payload for the TXT record."
        }
      }
    }
  },
  "mqtt": {
    "publish": {
      "name": "Publish",
      "description": "Publishes a message to an MQTT topic.",
      "fields": {
        "topic": {
          "required": true,
          "example": "/homeassistant/hello",
          "selector": {
            "text": null
          },
          "name": "Topic",
          "description": "Topic to publish to."
        },
        "payload": {
          "required": true,
          "example": "The temperature is {{ states(\u0027sensor.temperature\u0027) }}",
          "selector": {
            "template": null
          },
          "name": "Payload",
          "description": "The payload to publish."
        },
        "evaluate_payload": {
          "advanced": true,
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Evaluate payload",
          "description": "When \u0060payload\u0060 is a Python bytes literal, evaluate the bytes literal and publish the raw data."
        },
        "qos": {
          "advanced": true,
          "default": 0,
          "selector": {
            "select": {
              "options": [
                "0",
                "1",
                "2"
              ]
            }
          },
          "name": "QoS",
          "description": "Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once."
        },
        "retain": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Retain",
          "description": "If the message should have the retain flag set. If set, the broker stores the most recent message on a topic."
        }
      }
    },
    "dump": {
      "name": "Export",
      "description": "Writes all messages on a specific topic into the \u0060mqtt_dump.txt\u0060 file in your configuration folder.",
      "fields": {
        "topic": {
          "example": "OpenZWave/#",
          "selector": {
            "text": null
          },
          "name": "Topic",
          "description": "Topic to listen to."
        },
        "duration": {
          "default": 5,
          "selector": {
            "number": {
              "min": 1,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Duration",
          "description": "How long we should listen for messages in seconds."
        }
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads MQTT entities from the YAML-configuration.",
      "fields": {}
    }
  },
  "switch": {
    "turn_off": {
      "name": "Turn off",
      "description": "Turns a switch off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "switch"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turns a switch on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "switch"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a switch on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "switch"
            ]
          }
        ]
      }
    }
  },
  "mealie": {
    "get_mealplan": {
      "name": "Get mealplan",
      "description": "Get mealplan from Mealie",
      "fields": {
        "config_entry_id": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "mealie"
            }
          },
          "name": "Mealie instance",
          "description": "Select the Mealie instance to get mealplan from"
        },
        "start_date": {
          "selector": {
            "date": null
          },
          "name": "Start date",
          "description": "The startdate of the data to get (default: today)."
        },
        "end_date": {
          "selector": {
            "date": null
          },
          "name": "End date",
          "description": "The enddate of the data to get (default: today)."
        }
      },
      "response": {
        "optional": false
      }
    },
    "get_recipe": {
      "name": "Get recipe",
      "description": "Get recipe from Mealie",
      "fields": {
        "config_entry_id": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "mealie"
            }
          },
          "name": "Mealie instance",
          "description": "Select the Mealie instance to get mealplan from"
        },
        "recipe_id": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Recipe ID or slug",
          "description": "The recipe ID or the slug of the recipe to get."
        }
      },
      "response": {
        "optional": false
      }
    },
    "import_recipe": {
      "name": "Import recipe",
      "description": "Import recipe from an URL",
      "fields": {
        "config_entry_id": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "mealie"
            }
          },
          "name": "Mealie instance",
          "description": "Select the Mealie instance to get mealplan from"
        },
        "url": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "URL to the recipe",
          "description": "The URL to the recipe to import."
        },
        "include_tags": {
          "selector": {
            "boolean": null
          },
          "name": "Include tags",
          "description": "Include tags from the website to the recipe."
        }
      },
      "response": {
        "optional": true
      }
    },
    "set_random_mealplan": {
      "name": "Set random mealplan",
      "description": "Set a random mealplan for a specific date",
      "fields": {
        "config_entry_id": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "mealie"
            }
          },
          "name": "Mealie instance",
          "description": "Select the Mealie instance to get mealplan from"
        },
        "date": {
          "selector": {
            "date": null
          },
          "name": "Date",
          "description": "The date to set the mealplan for."
        },
        "entry_type": {
          "selector": {
            "select": {
              "options": [
                "breakfast",
                "lunch",
                "dinner",
                "side"
              ],
              "translation_key": "mealplan_entry_type"
            }
          },
          "name": "Entry type",
          "description": "The type of dish to randomize."
        }
      },
      "response": {
        "optional": true
      }
    },
    "set_mealplan": {
      "name": "Set a mealplan",
      "description": "Set a mealplan for a specific date",
      "fields": {
        "config_entry_id": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "mealie"
            }
          },
          "name": "Mealie instance",
          "description": "Select the Mealie instance to get mealplan from"
        },
        "date": {
          "selector": {
            "date": null
          },
          "name": "Date",
          "description": "The date to set the mealplan for."
        },
        "entry_type": {
          "selector": {
            "select": {
              "options": [
                "breakfast",
                "lunch",
                "dinner",
                "side"
              ],
              "translation_key": "mealplan_entry_type"
            }
          },
          "name": "Entry type",
          "description": "The type of dish to set the recipe to."
        },
        "recipe_id": {
          "selector": {
            "text": null
          },
          "name": "Recipe ID or slug",
          "description": "The recipe ID or the slug of the recipe to get."
        },
        "note_title": {
          "selector": {
            "text": null
          },
          "name": "Meal note title",
          "description": "Meal note title for when planning without recipe."
        },
        "note_text": {
          "selector": {
            "text": null
          },
          "name": "Note text",
          "description": "Meal note text for when planning without recipe."
        }
      },
      "response": {
        "optional": true
      }
    }
  },
  "input_text": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "set_value": {
      "name": "Set",
      "description": "Sets the value.",
      "fields": {
        "value": {
          "required": true,
          "example": "This is an example text",
          "selector": {
            "text": null
          },
          "name": "Value",
          "description": "The target value."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_text"
            ]
          }
        ]
      }
    }
  },
  "plex": {
    "refresh_library": {
      "name": "Refresh library",
      "description": "Refreshes a Plex library to scan for new and updated media.",
      "fields": {
        "server_name": {
          "example": "My Plex Server",
          "selector": {
            "text": null
          },
          "name": "Server name",
          "description": "Name of a Plex server if multiple Plex servers configured."
        },
        "library_name": {
          "required": true,
          "example": "TV Shows",
          "selector": {
            "text": null
          },
          "name": "Library name",
          "description": "Name of the Plex library to refresh."
        }
      }
    },
    "scan_for_clients": {
      "name": "Scan for clients",
      "description": "Scans for available clients from the Plex server(s), local network, and plex.tv.",
      "fields": {}
    }
  },
  "reolink": {
    "play_chime": {
      "name": "Play chime",
      "description": "Play a ringtone on a chime.",
      "fields": {
        "device_id": {
          "required": true,
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "reolink",
                "model": "Reolink Chime"
              }
            }
          },
          "name": "Target chime",
          "description": "The chime to play the ringtone on."
        },
        "ringtone": {
          "required": true,
          "selector": {
            "select": {
              "translation_key": "ringtone",
              "options": [
                "citybird",
                "originaltune",
                "pianokey",
                "loop",
                "attraction",
                "hophop",
                "goodday",
                "operetta",
                "moonlight",
                "waybackhome"
              ]
            }
          },
          "name": "Ringtone",
          "description": "Ringtone to play."
        }
      }
    }
  },
  "counter": {
    "increment": {
      "name": "Increment",
      "description": "Increments a counter by its step size.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    },
    "decrement": {
      "name": "Decrement",
      "description": "Decrements a counter by its step size.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    },
    "reset": {
      "name": "Reset",
      "description": "Resets a counter to its initial value.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    },
    "set_value": {
      "name": "Set",
      "description": "Sets the counter to a specific value.",
      "fields": {
        "value": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "mode": "box"
            }
          },
          "name": "Value",
          "description": "The new counter value the entity should be set to."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    }
  },
  "schedule": {
    "reload": {
      "name": "Reload",
      "description": "Reloads schedules from the YAML-configuration.",
      "fields": {}
    }
  },
  "localtuya": {
    "reload": {
      "name": "Reload",
      "description": "Reload localtuya and reconnect to all devices.",
      "fields": {}
    },
    "set_dp": {
      "name": "Set datapoint",
      "description": "Change the value of a datapoint (DP)",
      "fields": {
        "device_id": {
          "description": "Device ID of device to change datapoint value for",
          "example": "11100118278aab4de001",
          "name": "Device ID"
        },
        "dp": {
          "description": "Datapoint index",
          "example": 1,
          "name": "DP"
        },
        "value": {
          "description": "New value to set",
          "example": false,
          "name": "Value"
        }
      }
    }
  },
  "shopping_list": {
    "add_item": {
      "name": "Add item",
      "description": "Adds an item to the shopping list.",
      "fields": {
        "name": {
          "required": true,
          "example": "Beer",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "The name of the item to add."
        }
      }
    },
    "remove_item": {
      "name": "Remove item",
      "description": "Removes the first item with matching name from the shopping list.",
      "fields": {
        "name": {
          "required": true,
          "example": "Beer",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "The name of the item to remove."
        }
      }
    },
    "complete_item": {
      "name": "Complete item",
      "description": "Marks the first item with matching name as completed in the shopping list.",
      "fields": {
        "name": {
          "required": true,
          "example": "Beer",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "The name of the item to mark as completed (without removing)."
        }
      }
    },
    "incomplete_item": {
      "name": "Incomplete item",
      "description": "Marks the first item with matching name as incomplete in the shopping list.",
      "fields": {
        "name": {
          "example": "Beer",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "The name of the item to mark as incomplete."
        }
      }
    },
    "complete_all": {
      "name": "Complete all",
      "description": "Marks all items as completed in the shopping list (without removing them from the list).",
      "fields": {}
    },
    "incomplete_all": {
      "name": "Incomplete all",
      "description": "Marks all items as incomplete in the shopping list.",
      "fields": {}
    },
    "clear_completed_items": {
      "name": "Clear completed items",
      "description": "Removes completed items from the shopping list.",
      "fields": {}
    },
    "sort": {
      "name": "Sort all items",
      "description": "Sorts all items by name in the shopping list.",
      "fields": {
        "reverse": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Sort reverse",
          "description": "Whether to sort in reverse (descending) order."
        }
      }
    }
  },
  "rest_command": {
    "lectio_login": {
      "name": "",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads RESTful commands from the YAML-configuration.",
      "fields": {}
    }
  },
  "sonoff": {
    "send_command": {
      "name": "Send Command",
      "description": "Sends a command to a device.",
      "fields": {
        "device": {
          "name": "Device",
          "description": "Device ID to send command to.",
          "example": "1000123456"
        },
        "cmd": {
          "name": "Command",
          "description": "A single command to send.",
          "example": "switch"
        }
      }
    }
  },
  "var": {
    "set": {
      "name": "Set",
      "description": "Set an attribute or value of the variable.",
      "fields": {
        "entity_id": {
          "name": "Entity ID",
          "description": "The entity ID of the var entity to update.",
          "example": "var.x"
        },
        "value": {
          "name": "Value",
          "description": "The value to set on the variable.",
          "example": 13
        },
        "value_template": {
          "name": "Variable Template",
          "description": "The template to set, specifying the value of the variable.",
          "example": "{{ input_boolean.foo }}"
        },
        "attributes": {
          "name": "Attributes",
          "description": "A dict of attributes for the variable.",
          "example": "attr1: 42\nattr2: \u0022{{ now() }}\u0022\n"
        },
        "tracked_entity_id": {
          "name": "Tracked Entity ID",
          "description": "A list of IDs of entities to track. When these entities update, the var will update.",
          "example": "input_boolean.bar"
        },
        "tracked_event_type": {
          "name": "Tracked Event Type",
          "description": "A list of event types to track. When these events fire, the var will update.",
          "example": "sunset"
        },
        "query": {
          "name": "Query",
          "description": "A query for the Home Assistant database. The result of the query is used as the value of the variable.",
          "example": "SELECT COUNT(*) AS todays_diaper_count FROM events WHERE event_type = \u0027diaper_event\u0027 AND time_fired BETWEEN DATETIME(\u0027now\u0027, \u0027start of day\u0027) and DATETIME(\u0027now\u0027);"
        },
        "column": {
          "name": "Column",
          "description": "The column to select from the Query results.",
          "example": "todays_diaper_count"
        },
        "restore": {
          "name": "Restore",
          "description": "Flag specifying if the value of the variable should be restored on Home Assistant startup.",
          "example": false
        },
        "force_update": {
          "name": "Force Update",
          "description": "Flag specifying if variable should be updated even when value is unchanged.",
          "example": true
        },
        "unit_of_measurement": {
          "name": "Unit of Measurement",
          "description": "Unit of the value of the variable. Used in some UI components.",
          "example": "ounces"
        },
        "icon": {
          "name": "Icon",
          "description": "Icon of the variable",
          "example": "mdi:baby-bottle-outline"
        },
        "icon_template": {
          "name": "Icon Template",
          "description": "Template to use for the icon of the variable.",
          "example": "{{ input_text.foo }}"
        },
        "entity_picture": {
          "name": "Entity Picture",
          "description": "Picture to use for the var entity.",
          "example": "local/pic.png"
        },
        "entity_picture_template": {
          "name": "Entity Picture Template",
          "description": "Template to use for picture of the variable.",
          "example": "{{ input_text.foo }}"
        }
      }
    },
    "update": {
      "name": "Update",
      "description": "Force a variable to update using its current template.",
      "fields": {
        "entity_id": {
          "name": "Entity ID",
          "description": "The entity ID of the var entity to update.",
          "example": "var.x"
        }
      }
    },
    "reload": {
      "name": "",
      "description": "",
      "fields": {}
    }
  },
  "button": {
    "press": {
      "name": "Press",
      "description": "Press the button entity.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "button"
            ]
          }
        ]
      }
    }
  },
  "climate": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns climate device on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              256
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns climate device off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              128
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles climate device, from on to off, or off to on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              128,
              256
            ]
          }
        ]
      }
    },
    "set_hvac_mode": {
      "name": "Set HVAC mode",
      "description": "Sets HVAC operation mode.",
      "fields": {
        "hvac_mode": {
          "selector": {
            "select": {
              "options": [
                "off",
                "auto",
                "cool",
                "dry",
                "fan_only",
                "heat_cool",
                "heat"
              ],
              "translation_key": "hvac_mode"
            }
          },
          "name": "HVAC mode",
          "description": "HVAC operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ]
          }
        ]
      }
    },
    "set_preset_mode": {
      "name": "Set preset mode",
      "description": "Sets preset mode.",
      "fields": {
        "preset_mode": {
          "required": true,
          "example": "away",
          "selector": {
            "text": null
          },
          "name": "Preset mode",
          "description": "Preset mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "set_aux_heat": {
      "name": "Turn on/off auxiliary heater",
      "description": "Turns auxiliary heater on/off.",
      "fields": {
        "aux_heat": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Auxiliary heating",
          "description": "New value of auxiliary heater."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              64
            ]
          }
        ]
      }
    },
    "set_temperature": {
      "name": "Set target temperature",
      "description": "Sets the temperature setpoint.",
      "fields": {
        "temperature": {
          "filter": {
            "supported_features": [
              1
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 250,
              "step": 0.1,
              "mode": "box"
            }
          },
          "name": "Target temperature",
          "description": "The temperature setpoint."
        },
        "target_temp_high": {
          "filter": {
            "supported_features": [
              2
            ]
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 250,
              "step": 0.1,
              "mode": "box"
            }
          },
          "name": "Upper target temperature",
          "description": "The max temperature setpoint."
        },
        "target_temp_low": {
          "filter": {
            "supported_features": [
              2
            ]
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 250,
              "step": 0.1,
              "mode": "box"
            }
          },
          "name": "Lower target temperature",
          "description": "The min temperature setpoint."
        },
        "hvac_mode": {
          "selector": {
            "select": {
              "options": [
                "off",
                "auto",
                "cool",
                "dry",
                "fan_only",
                "heat_cool",
                "heat"
              ],
              "translation_key": "hvac_mode"
            }
          },
          "name": "HVAC mode",
          "description": "HVAC operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              1,
              2
            ]
          }
        ]
      }
    },
    "set_humidity": {
      "name": "Set target humidity",
      "description": "Sets target humidity.",
      "fields": {
        "humidity": {
          "required": true,
          "selector": {
            "number": {
              "min": 30,
              "max": 99,
              "unit_of_measurement": "%"
            }
          },
          "name": "Humidity",
          "description": "Target humidity."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "set_fan_mode": {
      "name": "Set fan mode",
      "description": "Sets fan operation mode.",
      "fields": {
        "fan_mode": {
          "required": true,
          "example": "low",
          "selector": {
            "text": null
          },
          "name": "Fan mode",
          "description": "Fan operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    },
    "set_swing_mode": {
      "name": "Set swing mode",
      "description": "Sets swing operation mode.",
      "fields": {
        "swing_mode": {
          "required": true,
          "example": "on",
          "selector": {
            "text": null
          },
          "name": "Swing mode",
          "description": "Swing operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    },
    "set_swing_horizontal_mode": {
      "name": "Set horizontal swing mode",
      "description": "Sets horizontal swing operation mode.",
      "fields": {
        "swing_horizontal_mode": {
          "required": true,
          "example": "on",
          "selector": {
            "text": null
          },
          "name": "Horizontal swing mode",
          "description": "Horizontal swing operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              512
            ]
          }
        ]
      }
    }
  },
  "cover": {
    "open_cover": {
      "name": "Open",
      "description": "Opens a cover.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "close_cover": {
      "name": "Close",
      "description": "Closes a cover.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "set_cover_position": {
      "name": "Set position",
      "description": "Moves a cover to a specific position.",
      "fields": {
        "position": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Position",
          "description": "Target position."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "stop_cover": {
      "name": "Stop",
      "description": "Stops the cover movement.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a cover open/closed.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              3
            ]
          }
        ]
      }
    },
    "open_cover_tilt": {
      "name": "Open tilt",
      "description": "Tilts a cover open.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "close_cover_tilt": {
      "name": "Close tilt",
      "description": "Tilts a cover to close.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    },
    "stop_cover_tilt": {
      "name": "Stop tilt",
      "description": "Stops a tilting cover movement.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              64
            ]
          }
        ]
      }
    },
    "set_cover_tilt_position": {
      "name": "Set tilt position",
      "description": "Moves a cover tilt to a specific position.",
      "fields": {
        "tilt_position": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Tilt position",
          "description": "Target tilt positition."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              128
            ]
          }
        ]
      }
    },
    "toggle_cover_tilt": {
      "name": "Toggle tilt",
      "description": "Toggles a cover tilt open/closed.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              48
            ]
          }
        ]
      }
    }
  },
  "fan": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns fan on.",
      "fields": {
        "percentage": {
          "filter": {
            "supported_features": [
              1
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Percentage",
          "description": "Speed of the fan."
        },
        "preset_mode": {
          "example": "auto",
          "filter": {
            "supported_features": [
              8
            ]
          },
          "selector": {
            "text": null
          },
          "name": "Preset mode",
          "description": "Preset fan mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns fan off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a fan on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ]
          }
        ]
      }
    },
    "increase_speed": {
      "name": "Increase speed",
      "description": "Increases the speed of a fan.",
      "fields": {
        "percentage_step": {
          "advanced": true,
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Increment",
          "description": "Percentage step by which the speed should be increased."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "decrease_speed": {
      "name": "Decrease speed",
      "description": "Decreases the speed of a fan.",
      "fields": {
        "percentage_step": {
          "advanced": true,
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Decrement",
          "description": "Percentage step by which the speed should be decreased."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "oscillate": {
      "name": "Oscillate",
      "description": "Controls the oscillation of a fan.",
      "fields": {
        "oscillating": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Oscillating",
          "description": "Turns oscillation on/off."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "set_direction": {
      "name": "Set direction",
      "description": "Sets a fan\u0027s rotation direction.",
      "fields": {
        "direction": {
          "required": true,
          "selector": {
            "select": {
              "options": [
                "forward",
                "reverse"
              ],
              "translation_key": "direction"
            }
          },
          "name": "Direction",
          "description": "Direction of the fan rotation."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "set_percentage": {
      "name": "Set speed",
      "description": "Sets the speed of a fan.",
      "fields": {
        "percentage": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Percentage",
          "description": "Speed of the fan."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "set_preset_mode": {
      "name": "Set preset mode",
      "description": "Sets preset fan mode.",
      "fields": {
        "preset_mode": {
          "required": true,
          "example": "auto",
          "selector": {
            "text": null
          },
          "name": "Preset mode",
          "description": "Preset fan mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    }
  },
  "remote": {
    "turn_off": {
      "name": "Turn off",
      "description": "Sends the turn off command.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Sends the turn on command.",
      "fields": {
        "activity": {
          "example": "BedroomTV",
          "filter": {
            "supported_features": [
              4
            ]
          },
          "selector": {
            "text": null
          },
          "name": "Activity",
          "description": "Activity ID or activity name to be started."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Sends the toggle command.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "send_command": {
      "name": "Send command",
      "description": "Sends a command or a list of commands to a device.",
      "fields": {
        "device": {
          "example": "32756745",
          "selector": {
            "text": null
          },
          "name": "Device",
          "description": "Device ID to send command to."
        },
        "command": {
          "required": true,
          "example": "Play",
          "selector": {
            "object": null
          },
          "name": "Command",
          "description": "A single command or a list of commands to send."
        },
        "num_repeats": {
          "default": 1,
          "selector": {
            "number": {
              "min": 0,
              "max": 255
            }
          },
          "name": "Repeats",
          "description": "The number of times you want to repeat the commands."
        },
        "delay_secs": {
          "default": 0.4,
          "selector": {
            "number": {
              "min": 0,
              "max": 60,
              "step": 0.1,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Delay seconds",
          "description": "The time you want to wait in between repeated commands."
        },
        "hold_secs": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 60,
              "step": 0.1,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Hold seconds",
          "description": "The time you want to have it held before the release is send."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "learn_command": {
      "name": "Learn command",
      "description": "Learns a command or a list of commands from a device.",
      "fields": {
        "device": {
          "example": "television",
          "selector": {
            "text": null
          },
          "name": "Device",
          "description": "Device ID to learn command from."
        },
        "command": {
          "example": "Turn on",
          "selector": {
            "object": null
          },
          "name": "Command",
          "description": "A single command or a list of commands to learn."
        },
        "command_type": {
          "default": "ir",
          "selector": {
            "select": {
              "options": [
                "ir",
                "rf"
              ]
            }
          },
          "name": "Command type",
          "description": "The type of command to be learned."
        },
        "alternative": {
          "selector": {
            "boolean": null
          },
          "name": "Alternative",
          "description": "If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won\u0027t change the state."
        },
        "timeout": {
          "selector": {
            "number": {
              "min": 0,
              "max": 60,
              "step": 5,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Timeout",
          "description": "Timeout for the command to be learned."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "delete_command": {
      "name": "Delete command",
      "description": "Deletes a command or a list of commands from the database.",
      "fields": {
        "device": {
          "example": "television",
          "selector": {
            "text": null
          },
          "name": "Device",
          "description": "Device from which commands will be deleted."
        },
        "command": {
          "required": true,
          "example": "Mute",
          "selector": {
            "object": null
          },
          "name": "Command",
          "description": "The single command or the list of commands to be deleted."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    }
  },
  "number": {
    "set_value": {
      "name": "Set",
      "description": "Sets the value of a number.",
      "fields": {
        "value": {
          "example": 42,
          "selector": {
            "text": null
          },
          "name": "Value",
          "description": "The target value to set."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "number"
            ]
          }
        ]
      }
    }
  },
  "renault": {
    "ac_cancel": {
      "name": "Cancel A/C",
      "description": "Cancels A/C on vehicle.",
      "fields": {
        "vehicle": {
          "required": true,
          "selector": {
            "device": {
              "integration": "renault"
            }
          },
          "name": "Vehicle",
          "description": "The vehicle to send the command to."
        }
      }
    },
    "ac_start": {
      "name": "Start A/C",
      "description": "Starts A/C on vehicle.",
      "fields": {
        "vehicle": {
          "required": true,
          "selector": {
            "device": {
              "integration": "renault"
            }
          },
          "name": "Vehicle",
          "description": "The vehicle to send the command to."
        },
        "temperature": {
          "example": "21",
          "required": true,
          "selector": {
            "number": {
              "min": 15,
              "max": 25,
              "step": 0.5,
              "unit_of_measurement": "\u00B0C"
            }
          },
          "name": "Temperature",
          "description": "Target A/C temperature in \u00B0C."
        },
        "when": {
          "example": "2020-05-01T17:45:00",
          "selector": {
            "text": null
          },
          "name": "When",
          "description": "Timestamp for the start of the A/C (optional - defaults to now)."
        }
      }
    },
    "charge_set_schedules": {
      "name": "Update charge schedule",
      "description": "Updates charge schedule on vehicle.",
      "fields": {
        "vehicle": {
          "required": true,
          "selector": {
            "device": {
              "integration": "renault"
            }
          },
          "name": "Vehicle",
          "description": "The vehicle to send the command to."
        },
        "schedules": {
          "example": [
            {
              "id": 1,
              "activated": true,
              "monday": {
                "startTime": "T12:00Z",
                "duration": 15
              },
              "tuesday": {
                "startTime": "T12:00Z",
                "duration": 15
              },
              "wednesday": {
                "startTime": "T12:00Z",
                "duration": 15
              },
              "thursday": {
                "startTime": "T12:00Z",
                "duration": 15
              },
              "friday": {
                "startTime": "T12:00Z",
                "duration": 15
              },
              "saturday": {
                "startTime": "T12:00Z",
                "duration": 15
              },
              "sunday": {
                "startTime": "T12:00Z",
                "duration": 15
              }
            },
            {
              "id": 2,
              "activated": true,
              "monday": {
                "startTime": "T12:00Z",
                "duration": 240
              },
              "tuesday": {
                "startTime": "T12:00Z",
                "duration": 240
              },
              "wednesday": {
                "startTime": "T12:00Z",
                "duration": 240
              },
              "thursday": {
                "startTime": "T12:00Z",
                "duration": 240
              },
              "friday": {
                "startTime": "T12:00Z",
                "duration": 240
              },
              "saturday": {
                "startTime": "T12:00Z",
                "duration": 240
              },
              "sunday": {
                "startTime": "T12:00Z",
                "duration": 240
              }
            }
          ],
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Schedules",
          "description": "Schedule details."
        }
      }
    },
    "ac_set_schedules": {
      "name": "Update A/C schedule",
      "description": "Updates A/C schedule on vehicle.",
      "fields": {
        "vehicle": {
          "required": true,
          "selector": {
            "device": {
              "integration": "renault"
            }
          },
          "name": "Vehicle",
          "description": "The vehicle to send the command to."
        },
        "schedules": {
          "example": [
            {
              "id": 1,
              "activated": false
            },
            {
              "id": 2,
              "activated": true,
              "monday": {
                "readyAtTime": "T20:45Z"
              },
              "sunday": {
                "readyAtTime": "T20:45Z"
              }
            },
            {
              "id": 3,
              "activated": false
            },
            {
              "id": 4,
              "activated": false
            },
            {
              "id": 5,
              "activated": false
            }
          ],
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Schedules",
          "description": "Schedule details."
        }
      }
    }
  },
  "netdaemon": {
    "register_service": {
      "name": "",
      "description": "Register a new service for netdaemon, used by the daemon and not to be used by users",
      "fields": {
        "service": {
          "description": "The name of the service to register"
        },
        "class": {
          "description": "The class that implements the service call"
        },
        "method": {
          "description": "The method to call"
        }
      }
    },
    "reload_apps": {
      "name": "",
      "description": "",
      "fields": {}
    },
    "entity_create": {
      "name": "",
      "description": "Create an entity",
      "fields": {
        "entity_id": {
          "description": "The entity ID of the entity",
          "example": "sensor.awesome"
        },
        "state": {
          "description": "The state of the entity",
          "example": "Lorem ipsum"
        },
        "icon": {
          "description": "The icon for the entity",
          "example": "mdi:rocket-launch-outline"
        },
        "unit": {
          "description": "The unit of measurement for the entity"
        },
        "options": {
          "description": "List of options for a select entity"
        },
        "attributes": {
          "description": "The attributes of the entity"
        }
      }
    },
    "entity_update": {
      "name": "",
      "description": "Update an entity",
      "fields": {
        "entity_id": {
          "description": "The entity ID of the entity",
          "example": "sensor.awesome"
        },
        "state": {
          "description": "The state of the entity",
          "example": "Lorem ipsum"
        },
        "icon": {
          "description": "The icon for the entity",
          "example": "mdi:rocket-launch-outline"
        },
        "unit": {
          "description": "The unit of measurement for the entity"
        },
        "options": {
          "description": "List of options for a select entity"
        },
        "attributes": {
          "description": "The attributes of the entity"
        }
      }
    },
    "entity_remove": {
      "name": "",
      "description": "Remove an entity",
      "fields": {
        "entity_id": {
          "description": "The entity ID of the entity",
          "example": "sensor.awesome"
        }
      }
    },
    "olivetreebranch_setbrightness": {
      "name": "",
      "description": "",
      "fields": {}
    },
    "olivetreebranch_setcolortemperature": {
      "name": "",
      "description": "",
      "fields": {}
    },
    "olivetreebranch_turnon": {
      "name": "",
      "description": "",
      "fields": {}
    },
    "olivetreebranch_turnoff": {
      "name": "",
      "description": "",
      "fields": {}
    },
    "olivetreebranch_getstatus": {
      "name": "",
      "description": "",
      "fields": {}
    }
  },
  "input_datetime": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "set_datetime": {
      "name": "Set",
      "description": "Sets the date and/or time.",
      "fields": {
        "date": {
          "example": "\u00222019-04-20\u0022",
          "selector": {
            "text": null
          },
          "name": "Date",
          "description": "The target date."
        },
        "time": {
          "example": "\u002205:04:20\u0022",
          "selector": {
            "time": null
          },
          "name": "Time",
          "description": "The target time."
        },
        "datetime": {
          "example": "\u00222019-04-20 05:04:20\u0022",
          "selector": {
            "text": null
          },
          "name": "Date \u0026 time",
          "description": "The target date \u0026 time."
        },
        "timestamp": {
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "mode": "box"
            }
          },
          "name": "Timestamp",
          "description": "The target date \u0026 time, expressed by a UNIX timestamp."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_datetime"
            ]
          }
        ]
      }
    }
  },
  "tado": {
    "add_meter_reading": {
      "name": "Add meter readings",
      "description": "Add meter readings to Tado Energy IQ.",
      "fields": {
        "config_entry": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "tado"
            }
          },
          "name": "Config Entry",
          "description": "Config entry to add meter readings to."
        },
        "reading": {
          "required": true,
          "selector": {
            "number": {
              "mode": "box",
              "min": 0,
              "step": 1
            }
          },
          "name": "Reading",
          "description": "Reading in m\u00B3 or kWh without decimals."
        }
      }
    },
    "set_water_heater_timer": {
      "name": "Set water heater timer",
      "description": "Turns on water heater for a set time.",
      "fields": {
        "time_period": {
          "required": true,
          "example": "01:30:00",
          "default": "01:00:00",
          "selector": {
            "text": null
          },
          "name": "Time period",
          "description": "Set the time period for the boost."
        },
        "temperature": {
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "step": 0.5,
              "unit_of_measurement": "\u00B0"
            }
          },
          "name": "Temperature",
          "description": "Temperature to set heater to."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "tado",
            "domain": [
              "water_heater"
            ]
          }
        ]
      }
    },
    "set_climate_timer": {
      "name": "Set climate timer",
      "description": "Turns on climate entities for a set time.",
      "fields": {
        "temperature": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "step": 0.5,
              "unit_of_measurement": "\u00B0"
            }
          },
          "name": "Temperature",
          "description": "Temperature to set climate entity to."
        },
        "time_period": {
          "required": false,
          "example": "01:30:00",
          "selector": {
            "text": null
          },
          "name": "Time period",
          "description": "Choose this or Overlay. Set the time period for the change if you want to be specific. Alternatively use Overlay."
        },
        "requested_overlay": {
          "required": false,
          "example": "MANUAL",
          "selector": {
            "select": {
              "options": [
                "NEXT_TIME_BLOCK",
                "MANUAL",
                "TADO_DEFAULT"
              ]
            }
          },
          "name": "Overlay",
          "description": "Choose this or Time Period. Allows you to choose an overlay. MANUAL:=Overlay until user removes; NEXT_TIME_BLOCK:=Overlay until next timeblock; TADO_DEFAULT:=Overlay based on tado app setting."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "tado",
            "domain": [
              "climate"
            ]
          }
        ]
      }
    },
    "set_climate_temperature_offset": {
      "name": "Set climate temperature offset",
      "description": "Sets the temperature offset of climate entities.",
      "fields": {
        "offset": {
          "default": 0,
          "selector": {
            "number": {
              "min": -10,
              "max": 10,
              "step": 0.01,
              "unit_of_measurement": "\u00B0"
            }
          },
          "name": "Offset",
          "description": "Offset you would like (depending on your device)."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "tado",
            "domain": [
              "climate"
            ]
          }
        ]
      }
    }
  },
  "media_player": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns on the power of the media player.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              128
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns off the power of the media player.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              256
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a media player on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              384
            ]
          }
        ]
      }
    },
    "volume_up": {
      "name": "Turn up volume",
      "description": "Turns up the volume.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              4,
              1024
            ]
          }
        ]
      }
    },
    "volume_down": {
      "name": "Turn down volume",
      "description": "Turns down the volume.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              4,
              1024
            ]
          }
        ]
      }
    },
    "media_play_pause": {
      "name": "Play/Pause",
      "description": "Toggles play/pause.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              16385
            ]
          }
        ]
      }
    },
    "media_play": {
      "name": "Play",
      "description": "Starts playing.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              16384
            ]
          }
        ]
      }
    },
    "media_pause": {
      "name": "Pause",
      "description": "Pauses.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "media_stop": {
      "name": "Stop",
      "description": "Stops playing.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              4096
            ]
          }
        ]
      }
    },
    "media_next_track": {
      "name": "Next",
      "description": "Selects the next track.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    },
    "media_previous_track": {
      "name": "Previous",
      "description": "Selects the previous track.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "clear_playlist": {
      "name": "Clear playlist",
      "description": "Removes all items from the playlist.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              8192
            ]
          }
        ]
      }
    },
    "volume_set": {
      "name": "Set volume",
      "description": "Sets the volume level.",
      "fields": {
        "volume_level": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "step": 0.01
            }
          },
          "name": "Level",
          "description": "The volume. 0 is inaudible, 1 is the maximum volume."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "volume_mute": {
      "name": "Mute/unmute volume",
      "description": "Mutes or unmutes the media player.",
      "fields": {
        "is_volume_muted": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Muted",
          "description": "Defines whether or not it is muted."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    },
    "media_seek": {
      "name": "Seek",
      "description": "Allows you to go to a different part of the media that is currently playing.",
      "fields": {
        "seek_position": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "step": 0.01,
              "mode": "box"
            }
          },
          "name": "Position",
          "description": "Target position in the currently playing media. The format is platform dependent."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "join": {
      "name": "Join",
      "description": "Groups media players together for synchronous playback. Only works on supported multiroom audio systems.",
      "fields": {
        "group_members": {
          "required": true,
          "example": "- media_player.multiroom_player2\n- media_player.multiroom_player3\n",
          "selector": {
            "entity": {
              "multiple": true,
              "domain": "media_player"
            }
          },
          "name": "Group members",
          "description": "The players which will be synced with the playback specified in \u0060target\u0060."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              524288
            ]
          }
        ]
      }
    },
    "select_source": {
      "name": "Select source",
      "description": "Sends the media player the command to change input source.",
      "fields": {
        "source": {
          "required": true,
          "example": "video1",
          "selector": {
            "text": null
          },
          "name": "Source",
          "description": "Name of the source to switch to. Platform dependent."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              2048
            ]
          }
        ]
      }
    },
    "select_sound_mode": {
      "name": "Select sound mode",
      "description": "Selects a specific sound mode.",
      "fields": {
        "sound_mode": {
          "example": "Music",
          "selector": {
            "text": null
          },
          "name": "Sound mode",
          "description": "Name of the sound mode to switch to."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              65536
            ]
          }
        ]
      }
    },
    "play_media": {
      "name": "Play media",
      "description": "Starts playing specified media.",
      "fields": {
        "media_content_id": {
          "required": true,
          "example": "https://home-assistant.io/images/cast/splash.png",
          "selector": {
            "text": null
          },
          "name": "Content ID",
          "description": "The ID of the content to play. Platform dependent."
        },
        "media_content_type": {
          "required": true,
          "example": "music",
          "selector": {
            "text": null
          },
          "name": "Content type",
          "description": "The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist."
        },
        "enqueue": {
          "filter": {
            "supported_features": [
              2097152
            ]
          },
          "required": false,
          "selector": {
            "select": {
              "options": [
                "play",
                "next",
                "add",
                "replace"
              ],
              "translation_key": "enqueue"
            }
          },
          "name": "Enqueue",
          "description": "If the content should be played now or be added to the queue."
        },
        "announce": {
          "filter": {
            "supported_features": [
              1048576
            ]
          },
          "required": false,
          "example": "true",
          "selector": {
            "boolean": null
          },
          "name": "Announce",
          "description": "If the media should be played as an announcement."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              512
            ]
          }
        ]
      }
    },
    "shuffle_set": {
      "name": "Shuffle",
      "description": "Playback mode that selects the media in randomized order.",
      "fields": {
        "shuffle": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Shuffle",
          "description": "Whether or not shuffle mode is enabled."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              32768
            ]
          }
        ]
      }
    },
    "unjoin": {
      "name": "Unjoin",
      "description": "Removes the player from a group. Only works on platforms which support player groups.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              524288
            ]
          }
        ]
      }
    },
    "repeat_set": {
      "name": "Repeat",
      "description": "Playback mode that plays the media in a loop.",
      "fields": {
        "repeat": {
          "required": true,
          "selector": {
            "select": {
              "options": [
                "off",
                "all",
                "one"
              ],
              "translation_key": "repeat"
            }
          },
          "name": "Repeat mode",
          "description": "Repeat mode to set."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              262144
            ]
          }
        ]
      }
    }
  },
  "browser_mod": {
    "sequence": {
      "name": "sequence",
      "description": "Run a sequence of services",
      "fields": {
        "browser_id": {
          "name": "Target",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "sequence": {
          "name": "Actions",
          "description": "List of services to run",
          "selector": {
            "object": null
          }
        }
      }
    },
    "delay": {
      "name": "delay",
      "description": "Wait for a time",
      "fields": {
        "browser_id": {
          "name": "Target",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "time": {
          "name": "Time",
          "description": "Time to wait (ms)",
          "selector": {
            "number": {
              "mode": "box"
            }
          }
        }
      }
    },
    "popup": {
      "name": "popup",
      "description": "Display a popup",
      "fields": {
        "browser_id": {
          "name": "Target",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "title": {
          "name": "Title",
          "description": "Popup title",
          "selector": {
            "text": null
          }
        },
        "content": {
          "name": "Content",
          "required": true,
          "description": "Popup content (Test or lovelace card configuration)",
          "selector": {
            "object": null
          }
        },
        "size": {
          "name": "Size",
          "description": "",
          "selector": {
            "select": {
              "mode": "dropdown",
              "options": [
                "normal",
                "wide",
                "fullscreen"
              ]
            }
          }
        },
        "right_button": {
          "name": "Right button",
          "description": "Text of the right button",
          "selector": {
            "text": null
          }
        },
        "right_button_action": {
          "name": "Right button action",
          "description": "Action to perform when the right button is pressed",
          "selector": {
            "object": null
          }
        },
        "left_button": {
          "name": "Left button",
          "description": "Text of the left button",
          "selector": {
            "text": null
          }
        },
        "left_button_action": {
          "name": "Left button action",
          "description": "Action to perform when left button is pressed",
          "selector": {
            "object": null
          }
        },
        "dismissable": {
          "name": "User dismissable",
          "description": "Whether the popup can be closed by the user without action",
          "default": true,
          "selector": {
            "boolean": null
          }
        },
        "dismiss_action": {
          "name": "Dismiss action",
          "description": "Action to perform when popup is dismissed",
          "selector": {
            "object": null
          }
        },
        "autoclose": {
          "name": "Auto close",
          "description": "Close the popup automatically on mouse, pointer or keyboard activity",
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "timeout": {
          "name": "Auto close timeout",
          "description": "Time before closing (ms)",
          "selector": {
            "number": {
              "mode": "box"
            }
          }
        },
        "timeout_action": {
          "name": "Timeout action",
          "description": "Action to perform when popup is closed by timeout",
          "selector": {
            "object": null
          }
        },
        "style": {
          "name": "Styles",
          "description": "CSS code to apply to the popup window",
          "selector": {
            "text": {
              "multiline": true
            }
          }
        }
      }
    },
    "more_info": {
      "name": "more_info",
      "description": "Show more-info dialog",
      "fields": {
        "browser_id": {
          "name": "Target",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "entity": {
          "name": "Entity ID",
          "description": "",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "large": {
          "name": "Large size",
          "description": "",
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "ignore_popup_card": {
          "name": "Ignore any active popup-card overrides",
          "description": "",
          "default": false,
          "selector": {
            "boolean": null
          }
        }
      }
    },
    "close_popup": {
      "name": "close_popup",
      "description": "Close a popup",
      "fields": {
        "browser_id": {
          "name": "Target",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        }
      }
    },
    "notification": {
      "name": "notification",
      "description": "Display a short notification",
      "fields": {
        "browser_id": {
          "name": "Target",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "message": {
          "name": "Message",
          "description": "Message to display",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "duration": {
          "name": "Auto close timeout",
          "description": "Time before closing (ms)",
          "selector": {
            "number": {
              "mode": "box"
            }
          }
        },
        "action_text": {
          "name": "Action button text",
          "description": "Text of optional action button",
          "selector": {
            "text": null
          }
        },
        "action": {
          "name": "Button action",
          "description": "Action to perform when the action button is pressed",
          "selector": {
            "object": null
          }
        }
      }
    },
    "navigate": {
      "name": "navigate",
      "description": "Navigate browser to a different page",
      "fields": {
        "browser_id": {
          "name": "Target",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "path": {
          "name": "Path",
          "description": "Target path",
          "selector": {
            "text": null
          }
        }
      }
    },
    "refresh": {
      "name": "refresh",
      "description": "Refresh page",
      "fields": {
        "browser_id": {
          "name": "Target",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        }
      }
    },
    "set_theme": {
      "name": "set_theme",
      "description": "Change the current theme",
      "fields": {
        "browser_id": {
          "name": "Target",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "theme": {
          "name": "Theme",
          "description": "Name of theme or \u0027auto\u0027",
          "selector": {
            "text": null
          }
        },
        "dark": {
          "name": "Mode",
          "description": "Dark/light mode",
          "selector": {
            "select": {
              "options": [
                "auto",
                "light",
                "dark"
              ]
            }
          }
        },
        "primaryColor": {
          "name": "Primary Color",
          "description": "Primary theme color",
          "selector": {
            "color_rgb": null
          }
        },
        "accentColor": {
          "name": "Accent Color",
          "description": "Accent theme color",
          "selector": {
            "color_rgb": null
          }
        }
      }
    },
    "console": {
      "name": "console",
      "description": "Print text to browser console",
      "fields": {
        "browser_id": {
          "name": "Target",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "message": {
          "name": "Message",
          "description": "Text to print",
          "selector": {
            "text": null
          }
        }
      }
    },
    "javascript": {
      "name": "javascript",
      "description": "Run arbitrary JavaScript code",
      "fields": {
        "browser_id": {
          "name": "Target",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "code": {
          "name": "Code",
          "description": "JavaScript code to run",
          "selector": {
            "object": null
          }
        }
      }
    }
  },
  "profiler": {
    "start": {
      "name": "Start",
      "description": "Starts the Profiler.",
      "fields": {
        "seconds": {
          "default": 60.0,
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Seconds",
          "description": "The number of seconds to run the profiler."
        }
      }
    },
    "memory": {
      "name": "Memory",
      "description": "Starts the Memory Profiler.",
      "fields": {
        "seconds": {
          "default": 60.0,
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Seconds",
          "description": "The number of seconds to run the memory profiler."
        }
      }
    },
    "start_log_objects": {
      "name": "Start logging objects",
      "description": "Starts logging growth of objects in memory.",
      "fields": {
        "scan_interval": {
          "default": 30.0,
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Scan interval",
          "description": "The number of seconds between logging objects."
        }
      }
    },
    "stop_log_objects": {
      "name": "Stop logging objects",
      "description": "Stops logging growth of objects in memory.",
      "fields": {}
    },
    "start_log_object_sources": {
      "name": "Start logging object sources",
      "description": "Starts logging sources of new objects in memory.",
      "fields": {
        "scan_interval": {
          "default": 30.0,
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Scan interval",
          "description": "The number of seconds between logging objects."
        },
        "max_objects": {
          "default": 5,
          "selector": {
            "number": {
              "min": 1,
              "max": 30,
              "unit_of_measurement": "objects"
            }
          },
          "name": "Maximum objects",
          "description": "The maximum number of objects to log."
        }
      }
    },
    "stop_log_object_sources": {
      "name": "Stop logging object sources",
      "description": "Stops logging sources of new objects in memory.",
      "fields": {}
    },
    "dump_log_objects": {
      "name": "Dump log objects",
      "description": "Dumps the repr of all matching objects to the log.",
      "fields": {
        "type": {
          "required": true,
          "example": "State",
          "selector": {
            "text": null
          },
          "name": "Type",
          "description": "The type of objects to dump to the log."
        }
      }
    },
    "lru_stats": {
      "name": "Log LRU stats",
      "description": "Logs the stats of all lru caches.",
      "fields": {}
    },
    "log_thread_frames": {
      "name": "Log thread frames",
      "description": "Logs the current frames for all threads.",
      "fields": {}
    },
    "log_event_loop_scheduled": {
      "name": "Log event loop scheduled",
      "description": "Logs what is scheduled in the event loop.",
      "fields": {}
    },
    "set_asyncio_debug": {
      "name": "Set asyncio debug",
      "description": "Enable or disable asyncio debug.",
      "fields": {
        "enabled": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Enabled",
          "description": "Whether to enable or disable asyncio debug."
        }
      }
    },
    "log_current_tasks": {
      "name": "Log current asyncio tasks",
      "description": "Logs all the current asyncio tasks.",
      "fields": {}
    }
  },
  "google_assistant": {
    "request_sync": {
      "name": "Request sync",
      "description": "Sends a request_sync command to Google.",
      "fields": {
        "agent_user_id": {
          "selector": {
            "text": null
          },
          "name": "Agent user ID",
          "description": "Only needed for automations. Specific Home Assistant user id (not username, ID in configuration \u003E users \u003E under username) to sync with Google Assistant. Do not need when you use this action through Home Assistant front end or API. Used in automation script or other place where context.user_id is missing."
        }
      }
    }
  },
  "openai_conversation": {
    "generate_image": {
      "name": "Generate image",
      "description": "Turn a prompt into an image",
      "fields": {
        "config_entry": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "openai_conversation"
            }
          },
          "name": "Config Entry",
          "description": "The config entry to use for this action"
        },
        "prompt": {
          "required": true,
          "selector": {
            "text": {
              "multiline": true
            }
          },
          "name": "Prompt",
          "description": "The text to turn into an image",
          "example": "A photo of a dog"
        },
        "size": {
          "required": false,
          "example": "1024x1024",
          "default": "1024x1024",
          "selector": {
            "select": {
              "options": [
                "1024x1024",
                "1024x1792",
                "1792x1024"
              ]
            }
          },
          "name": "Size",
          "description": "The size of the image to generate"
        },
        "quality": {
          "required": false,
          "example": "standard",
          "default": "standard",
          "selector": {
            "select": {
              "options": [
                "standard",
                "hd"
              ]
            }
          },
          "name": "Quality",
          "description": "The quality of the image that will be generated"
        },
        "style": {
          "required": false,
          "example": "vivid",
          "default": "vivid",
          "selector": {
            "select": {
              "options": [
                "vivid",
                "natural"
              ]
            }
          },
          "name": "Style",
          "description": "The style of the generated image"
        }
      },
      "response": {
        "optional": false
      }
    }
  },
  "device_tracker": {
    "see": {
      "name": "See",
      "description": "Manually update the records of a seen legacy device tracker in the known_devices.yaml file.",
      "fields": {
        "mac": {
          "example": "FF:FF:FF:FF:FF:FF",
          "selector": {
            "text": null
          },
          "name": "MAC address",
          "description": "MAC address of the device."
        },
        "dev_id": {
          "example": "phonedave",
          "selector": {
            "text": null
          },
          "name": "Device ID",
          "description": "ID of the device (find the ID in \u0060known_devices.yaml\u0060)."
        },
        "host_name": {
          "example": "Dave",
          "selector": {
            "text": null
          },
          "name": "Hostname",
          "description": "Hostname of the device."
        },
        "location_name": {
          "example": "home",
          "selector": {
            "text": null
          },
          "name": "Location",
          "description": "Name of the location where the device is located. The options are: \u0060home\u0060, \u0060not_home\u0060, or the name of the zone."
        },
        "gps": {
          "example": "[51.509802, -0.086692]",
          "selector": {
            "object": null
          },
          "name": "GPS coordinates",
          "description": "GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539])."
        },
        "gps_accuracy": {
          "selector": {
            "number": {
              "min": 0,
              "mode": "box",
              "unit_of_measurement": "m"
            }
          },
          "name": "GPS accuracy",
          "description": "Accuracy of the GPS coordinates."
        },
        "battery": {
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Battery level",
          "description": "Battery level of the device."
        }
      }
    }
  },
  "calendar": {
    "create_event": {
      "name": "Create event",
      "description": "Adds a new calendar event.",
      "fields": {
        "summary": {
          "required": true,
          "example": "Department Party",
          "selector": {
            "text": null
          },
          "name": "Summary",
          "description": "Defines the short summary or subject for the event."
        },
        "description": {
          "example": "Meeting to provide technical review for \u0027Phoenix\u0027 design.",
          "selector": {
            "text": null
          },
          "name": "Description",
          "description": "A more complete description of the event than the one provided by the summary."
        },
        "start_date_time": {
          "example": "2022-03-22 20:00:00",
          "selector": {
            "datetime": null
          },
          "name": "Start time",
          "description": "The date and time the event should start."
        },
        "end_date_time": {
          "example": "2022-03-22 22:00:00",
          "selector": {
            "datetime": null
          },
          "name": "End time",
          "description": "The date and time the event should end."
        },
        "start_date": {
          "example": "2022-03-22",
          "selector": {
            "date": null
          },
          "name": "Start date",
          "description": "The date the all-day event should start."
        },
        "end_date": {
          "example": "2022-03-23",
          "selector": {
            "date": null
          },
          "name": "End date",
          "description": "The date the all-day event should end (exclusive)."
        },
        "in": {
          "example": "{\u0022days\u0022: 2} or {\u0022weeks\u0022: 2}",
          "name": "In",
          "description": "Days or weeks that you want to create the event in."
        },
        "location": {
          "example": "Conference Room - F123, Bldg. 002",
          "selector": {
            "text": null
          },
          "name": "Location",
          "description": "The location of the event."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "calendar"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "get_events": {
      "name": "Get events",
      "description": "Get events on a calendar within a time range.",
      "fields": {
        "start_date_time": {
          "example": "2022-03-22 20:00:00",
          "selector": {
            "datetime": null
          },
          "name": "Start time",
          "description": "Returns active events after this time (exclusive). When not set, defaults to now."
        },
        "end_date_time": {
          "example": "2022-03-22 22:00:00",
          "selector": {
            "datetime": null
          },
          "name": "End time",
          "description": "Returns active events before this time (exclusive). Cannot be used with Duration."
        },
        "duration": {
          "selector": {
            "duration": null
          },
          "name": "Duration",
          "description": "Returns active events from Start time for the specified duration."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "calendar"
            ]
          }
        ]
      },
      "response": {
        "optional": false
      }
    }
  },
  "todo": {
    "add_item": {
      "name": "Add to-do list item",
      "description": "Add a new to-do list item.",
      "fields": {
        "item": {
          "required": true,
          "example": "Submit income tax return",
          "selector": {
            "text": null
          },
          "name": "Item name",
          "description": "The name that represents the to-do item."
        },
        "due_date": {
          "filter": {
            "supported_features": [
              16
            ]
          },
          "example": "2023-11-17",
          "selector": {
            "date": null
          },
          "name": "Due date",
          "description": "The date the to-do item is expected to be completed."
        },
        "due_datetime": {
          "filter": {
            "supported_features": [
              32
            ]
          },
          "example": "2023-11-17 13:30:00",
          "selector": {
            "datetime": null
          },
          "name": "Due date and time",
          "description": "The date and time the to-do item is expected to be completed."
        },
        "description": {
          "filter": {
            "supported_features": [
              64
            ]
          },
          "example": "A more complete description of the to-do item than that provided by the summary.",
          "selector": {
            "text": null
          },
          "name": "Description",
          "description": "A more complete description of the to-do item than provided by the item name."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "todo"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "update_item": {
      "name": "Update to-do list item",
      "description": "Update an existing to-do list item based on its name.",
      "fields": {
        "item": {
          "required": true,
          "example": "Submit income tax return",
          "selector": {
            "text": null
          },
          "name": "Item name",
          "description": "The current name of the to-do item."
        },
        "rename": {
          "example": "Something else",
          "selector": {
            "text": null
          },
          "name": "Rename item",
          "description": "The new name for the to-do item"
        },
        "status": {
          "example": "needs_action",
          "selector": {
            "select": {
              "translation_key": "status",
              "options": [
                "needs_action",
                "completed"
              ]
            }
          },
          "name": "Set status",
          "description": "A status or confirmation of the to-do item."
        },
        "due_date": {
          "filter": {
            "supported_features": [
              16
            ]
          },
          "example": "2023-11-17",
          "selector": {
            "date": null
          },
          "name": "Due date",
          "description": "The date the to-do item is expected to be completed."
        },
        "due_datetime": {
          "filter": {
            "supported_features": [
              32
            ]
          },
          "example": "2023-11-17 13:30:00",
          "selector": {
            "datetime": null
          },
          "name": "Due date and time",
          "description": "The date and time the to-do item is expected to be completed."
        },
        "description": {
          "filter": {
            "supported_features": [
              64
            ]
          },
          "example": "A more complete description of the to-do item than that provided by the summary.",
          "selector": {
            "text": null
          },
          "name": "Description",
          "description": "A more complete description of the to-do item than provided by the item name."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "todo"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "remove_item": {
      "name": "Remove a to-do list item",
      "description": "Remove an existing to-do list item by its name.",
      "fields": {
        "item": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Item name",
          "description": "The name for the to-do list item."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "todo"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "get_items": {
      "name": "Get to-do list items",
      "description": "Get items on a to-do list.",
      "fields": {
        "status": {
          "example": "needs_action",
          "default": "needs_action",
          "selector": {
            "select": {
              "translation_key": "status",
              "options": [
                "needs_action",
                "completed"
              ],
              "multiple": true
            }
          },
          "name": "Status",
          "description": "Only return to-do items with the specified statuses. Returns not completed actions by default."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "todo"
            ]
          }
        ]
      },
      "response": {
        "optional": false
      }
    },
    "remove_completed_items": {
      "name": "Remove all completed to-do list items",
      "description": "Remove all to-do list items that have been completed.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "todo"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    }
  },
  "weather": {
    "get_forecasts": {
      "name": "Get forecasts",
      "description": "Get weather forecasts.",
      "fields": {
        "type": {
          "required": true,
          "selector": {
            "select": {
              "options": [
                "daily",
                "hourly",
                "twice_daily"
              ],
              "translation_key": "forecast_type"
            }
          },
          "name": "Forecast type",
          "description": "Forecast type: daily, hourly or twice daily."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "weather"
            ],
            "supported_features": [
              1,
              2,
              4
            ]
          }
        ]
      },
      "response": {
        "optional": false
      }
    }
  },
  "script": {
    "scene_sluk_alle_indendors_lys": {
      "name": "Hjem: Sluk indend\u00F8rs lys",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "roar_daemp_lys_hvis_taendt": {
      "name": "Roar: D\u00E6mp natlampe hvis t\u00E6ndt",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "roar_daemp_loftlys_hvis_taendt": {
      "name": "Roar: D\u00E6mp loftlys hvis t\u00E6ndt",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "hjem_godnat": {
      "name": "Hjem: Godnat",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "halloween": {
      "name": "Halloween: Pulserende, r\u00F8dt lys",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "kokken_stovsuger_pitstop": {
      "name": "St\u00F8vsuger: Pit-stop",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "stovsuger_kokken": {
      "name": "St\u00F8vsuger: K\u00F8kken x 3",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "stovsuger_ebbes_mad": {
      "name": "St\u00F8vsuger: Ebbes mad",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "stovsuger_skift_sugestyrke": {
      "name": "St\u00F8vsuger: Skift sugestyrke",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "stovsuger_laveste_sugestyrke": {
      "name": "St\u00F8vsuger: Laveste sugestyrke",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "stovsuger_hojeste_sugestyrke": {
      "name": "St\u00F8vsuger: H\u00F8jeste sugestyrke",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "stovsuger_start_pause": {
      "name": "St\u00F8vsuger: Start/pause",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "stovsuger_vent_til_fardig": {
      "name": "St\u00F8vsuger: Vent til f\u00E6rdig",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "stovsuger_kokken_x_2": {
      "name": "St\u00F8vsuger: K\u00F8kken x 2",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "stovsuger_kokken_x_1": {
      "name": "St\u00F8vsuger: K\u00F8kken x 1",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "lightning": {
      "name": "Halloween: Torden",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "find_telefon": {
      "name": "Find telefon",
      "description": "",
      "fields": {
        "notifyId": {
          "description": "The ID of the Notify service",
          "example": "notify.mobile_app_kristoffers_galaxy_s20_ultra",
          "advanced": false,
          "required": false
        }
      },
      "response": {
        "optional": true
      }
    },
    "roar_toiletbesog_er_slut": {
      "name": "Roar: Toiletbes\u00F8g er slut",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "garage_luk_port_med_plads_til_ledning": {
      "name": "Garage: Luk port med plads til ledning",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "garage_temp": {
      "name": "Garage: Temp",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "zigbee2mqtt_reparer_binding": {
      "name": "zigbee2mqtt: Repar\u00E9r binding",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "zigbee2mqtt_repair_binding": {
      "name": "zigbee2mqtt: Repair binding",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "notification_reminder": {
      "name": "Notification: Reminder",
      "description": "",
      "fields": {
        "title": {
          "selector": {
            "text": {}
          },
          "default": "Reminder!",
          "name": "Titel",
          "advanced": false,
          "required": false
        },
        "description": {
          "selector": {
            "text": {}
          },
          "name": "Beskrivelse",
          "required": true,
          "advanced": false
        }
      },
      "response": {
        "optional": true
      }
    },
    "start_opladning_nar_forbundet": {
      "name": "Start opladning n\u00E5r forbundet",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "julemanden_ringer_pa": {
      "name": "Julemanden ringer p\u00E5",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads all the available scripts.",
      "fields": {}
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Runs the sequence of actions defined in a script.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "script"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Stops a running script.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "script"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggle a script. Starts it, if isn\u0027t running, stops it otherwise.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "script"
            ]
          }
        ]
      }
    }
  },
  "lock": {
    "unlock": {
      "name": "Unlock",
      "description": "Unlocks a lock.",
      "fields": {
        "code": {
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code used to unlock the lock."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ]
          }
        ]
      }
    },
    "lock": {
      "name": "Lock",
      "description": "Locks a lock.",
      "fields": {
        "code": {
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code used to lock the lock."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ]
          }
        ]
      }
    },
    "open": {
      "name": "Open",
      "description": "Opens a lock.",
      "fields": {
        "code": {
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code used to open the lock."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    }
  },
  "select": {
    "select_first": {
      "name": "First",
      "description": "Selects the first option.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_last": {
      "name": "Last",
      "description": "Selects the last option.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_next": {
      "name": "Next",
      "description": "Selects the next option.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the last to the first."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_option": {
      "name": "Select",
      "description": "Selects an option.",
      "fields": {
        "option": {
          "required": true,
          "example": "\u0022Item A\u0022",
          "selector": {
            "text": null
          },
          "name": "Option",
          "description": "Option to be selected."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_previous": {
      "name": "Previous",
      "description": "Selects the previous option.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the first to the last."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    }
  },
  "monta": {
    "start_charging": {
      "name": "Start charging",
      "description": "Start charge on selected charger",
      "fields": {
        "charge_point_id": {
          "description": "The ID of the charger.",
          "required": true,
          "selector": {
            "device": {
              "integration": "monta"
            }
          },
          "name": "Charge point id"
        }
      }
    },
    "stop_charging": {
      "name": "Stop charging",
      "description": "Stop charge on selected charger.",
      "fields": {
        "charge_point_id": {
          "description": "The ID of the charger.",
          "required": true,
          "selector": {
            "device": {
              "integration": "monta"
            }
          },
          "name": "Charge point id"
        }
      }
    }
  },
  "water_heater": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns water heater on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "water_heater"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns water heater off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "water_heater"
            ]
          }
        ]
      }
    },
    "set_away_mode": {
      "name": "Set away mode",
      "description": "Turns away mode on/off.",
      "fields": {
        "away_mode": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Away mode",
          "description": "New value of away mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "water_heater"
            ]
          }
        ]
      }
    },
    "set_temperature": {
      "name": "Set temperature",
      "description": "Sets the target temperature.",
      "fields": {
        "temperature": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "step": 0.5,
              "unit_of_measurement": "\u00B0"
            }
          },
          "name": "Temperature",
          "description": "New target temperature for the water heater."
        },
        "operation_mode": {
          "example": "eco",
          "selector": {
            "text": null
          },
          "name": "Operation mode",
          "description": "New value of the operation mode. For a list of possible modes, refer to the integration documentation."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "water_heater"
            ]
          }
        ]
      }
    },
    "set_operation_mode": {
      "name": "Set operation mode",
      "description": "Sets the operation mode.",
      "fields": {
        "operation_mode": {
          "required": true,
          "example": "eco",
          "selector": {
            "text": null
          },
          "name": "Operation mode",
          "description": "New value of the operation mode. For a list of possible modes, refer to the integration documentation."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "water_heater"
            ]
          }
        ]
      }
    }
  },
  "kodi": {
    "add_to_playlist": {
      "name": "Add to playlist",
      "description": "Adds music to the default playlist (i.e. playlistid=0).",
      "fields": {
        "media_type": {
          "required": true,
          "example": "ALBUM",
          "selector": {
            "text": null
          },
          "name": "Media type",
          "description": "Media type identifier. It must be one of SONG or ALBUM."
        },
        "media_id": {
          "example": 123456,
          "selector": {
            "text": null
          },
          "name": "Media ID",
          "description": "Unique Id of the media entry to add (\u0060songid\u0060 or albumid\u0060). If not defined, \u0060media_name\u0060 and \u0060artist_name\u0060 are needed to search the Kodi music library."
        },
        "media_name": {
          "example": "Highway to Hell",
          "selector": {
            "text": null
          },
          "name": "Media name",
          "description": "Optional media name for filtering media. Can be \u0027ALL\u0027 when \u0060media_type\u0060 is \u0027ALBUM\u0027 and \u0060artist_name\u0060 is specified, to add all songs from one artist."
        },
        "artist_name": {
          "example": "AC/DC",
          "selector": {
            "text": null
          },
          "name": "Artist name",
          "description": "Optional artist name for filtering media."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "kodi",
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "call_method": {
      "name": "Call method",
      "description": "Calls a Kodi JSONRPC API method with optional parameters. Results of the Kodi API call will be redirected in a Home Assistant event: \u0060kodi_call_method_result\u0060.",
      "fields": {
        "method": {
          "required": true,
          "example": "VideoLibrary.GetRecentlyAddedEpisodes",
          "selector": {
            "text": null
          },
          "name": "Method",
          "description": "Name of the Kodi JSONRPC API method to be called."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "kodi",
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    }
  },
  "lawn_mower": {
    "start_mowing": {
      "name": "Start mowing",
      "description": "Starts the mowing task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "lawn_mower"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "pause": {
      "name": "Pause",
      "description": "Pauses the mowing task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "lawn_mower"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "dock": {
      "name": "Return to dock",
      "description": "Stops the mowing task and returns to the dock.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "lawn_mower"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    }
  },
  "landroid_cloud": {
    "config": {
      "name": "Set zone",
      "description": "Set device config parameters",
      "fields": {
        "multizone_distances": {
          "name": "Multi zone distances",
          "description": "Set multizone distance array in meters. 0 = Disabled. Format: 15, 80, 120, 155",
          "example": "15, 80, 120, 155",
          "selector": {
            "text": null
          }
        },
        "multizone_probabilities": {
          "name": "Multi zone probabilities",
          "description": "Set multizone probabilities array. Format: 50, 10, 20, 20",
          "example": "50, 10, 20, 20",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "landroid_cloud",
            "domain": [
              "lawn_mower"
            ]
          }
        ]
      }
    },
    "ots": {
      "name": "One-Time-Schedule",
      "description": "Start One-Time-Schedule (if supported)",
      "fields": {
        "boundary": {
          "name": "Boundary",
          "description": "Do boundary (Edge/Border cut)",
          "example": true,
          "required": true,
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "runtime": {
          "name": "Run time",
          "description": "Run time in minutes before returning to charging station",
          "example": 60,
          "required": true,
          "default": 30,
          "selector": {
            "number": {
              "min": 10,
              "max": 120,
              "step": 1,
              "unit_of_measurement": "minutes",
              "mode": "slider"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "landroid_cloud",
            "domain": [
              "lawn_mower"
            ]
          }
        ]
      }
    },
    "schedule": {
      "name": "Set or update schedule",
      "description": "Set or change the schedule of the mower",
      "fields": {
        "type": {
          "name": "Schedule type",
          "description": "Change primary or secondary schedule?",
          "example": "primary",
          "required": true,
          "default": "primary",
          "selector": {
            "select": {
              "options": [
                "primary",
                "secondary"
              ]
            }
          }
        },
        "monday_start": {
          "name": "Monday, Start",
          "description": "Starting time for mondays",
          "example": "11:00",
          "selector": {
            "time": null
          }
        },
        "monday_end": {
          "name": "Monday, End",
          "description": "When should the schedule stop on mondays?",
          "example": "16:00",
          "selector": {
            "time": null
          }
        },
        "monday_boundary": {
          "name": "Monday, Boundary",
          "description": "Should we start this schedule by cutting the boundary (edge/border cut)?",
          "example": false,
          "selector": {
            "boolean": null
          }
        },
        "tuesday_start": {
          "name": "Tuesday, Start",
          "description": "Starting time for tuesdays",
          "example": "11:00",
          "selector": {
            "time": null
          }
        },
        "tuesday_end": {
          "name": "Tuesday, End",
          "description": "When should the schedule stop on tuesdays?",
          "example": "16:00",
          "selector": {
            "time": null
          }
        },
        "tuesday_boundary": {
          "name": "Tuesday, Boundary",
          "description": "Should we start this schedule by cutting the boundary (edge/border cut)?",
          "example": false,
          "selector": {
            "boolean": null
          }
        },
        "wednesday_start": {
          "name": "Wednesday, Start",
          "description": "Starting time for wednesdays",
          "example": "11:00",
          "selector": {
            "time": null
          }
        },
        "wednesday_end": {
          "name": "Wednesday, End",
          "description": "When should the schedule stop on wednesdays?",
          "example": "16:00",
          "selector": {
            "time": null
          }
        },
        "wednesday_boundary": {
          "name": "Wednesday, Boundary",
          "description": "Should we start this schedule by cutting the boundary (edge/border cut)?",
          "example": false,
          "selector": {
            "boolean": null
          }
        },
        "thursday_start": {
          "name": "Thursday, Start",
          "description": "Starting time for thursdays",
          "example": "11:00",
          "selector": {
            "time": null
          }
        },
        "thursday_end": {
          "name": "Thursday, End",
          "description": "When should the schedule stop on thursdays?",
          "example": "16:00",
          "selector": {
            "time": null
          }
        },
        "thursday_boundary": {
          "name": "Thursday, Boundary",
          "description": "Should we start this schedule by cutting the boundary (edge/border cut)?",
          "example": false,
          "selector": {
            "boolean": null
          }
        },
        "friday_start": {
          "name": "Friday, Start",
          "description": "Starting time for fridays",
          "example": "11:00",
          "selector": {
            "time": null
          }
        },
        "friday_end": {
          "name": "Friday, End",
          "description": "When should the schedule stop on fridays?",
          "example": "16:00",
          "selector": {
            "time": null
          }
        },
        "friday_boundary": {
          "name": "Friday, Boundary",
          "description": "Should we start this schedule by cutting the boundary (edge/border cut)?",
          "example": false,
          "selector": {
            "boolean": null
          }
        },
        "saturday_start": {
          "name": "Saturday, Start",
          "description": "Starting time for saturdays",
          "example": "11:00",
          "selector": {
            "time": null
          }
        },
        "saturday_end": {
          "name": "Saturday, End",
          "description": "When should the schedule stop on saturdays?",
          "example": "16:00",
          "selector": {
            "time": null
          }
        },
        "saturday_boundary": {
          "name": "Saturday, Boundary",
          "description": "Should we start this schedule by cutting the boundary (edge/border cut)?",
          "example": false,
          "selector": {
            "boolean": null
          }
        },
        "sunday_start": {
          "name": "Sunday, Start",
          "description": "Starting time for sundays",
          "example": "11:00",
          "selector": {
            "time": null
          }
        },
        "sunday_end": {
          "name": "Sunday, End",
          "description": "When should the schedule stop on sundays?",
          "example": "16:00",
          "selector": {
            "time": null
          }
        },
        "sunday_boundary": {
          "name": "Sunday, Boundary",
          "description": "Should we start this schedule by cutting the boundary (edge/border cut)?",
          "example": false,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "landroid_cloud",
            "domain": [
              "lawn_mower"
            ]
          }
        ]
      }
    },
    "send_raw": {
      "name": "Send RAW command",
      "description": "Send a raw JSON command to the device",
      "fields": {
        "json": {
          "name": "JSON data",
          "description": "Data to send, formatted as valid JSON",
          "example": "{\u0027cmd\u0027: 1}",
          "required": true,
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "landroid_cloud",
            "domain": [
              "lawn_mower"
            ]
          }
        ]
      }
    }
  },
  "kia_uvo": {
    "update": {
      "name": "Update",
      "description": "Update vehicle data from service cache",
      "fields": {
        "device_id": {
          "required": false,
          "selector": {
            "device": {
              "integration": "kia_uvo"
            }
          },
          "name": "Vehicle",
          "description": "Target vehicle"
        }
      }
    },
    "force_update": {
      "name": "Force Update",
      "description": "Force your vehicle to update its data. All vehicles on the same account as the vehicle selected will be updated.",
      "fields": {
        "device_id": {
          "required": false,
          "selector": {
            "device": {
              "integration": "kia_uvo"
            }
          },
          "name": "Vehicle",
          "description": "Target vehicle"
        }
      }
    },
    "lock": {
      "name": "Lock",
      "description": "Lock the vehicle",
      "fields": {
        "device_id": {
          "required": false,
          "selector": {
            "device": {
              "integration": "kia_uvo"
            }
          },
          "name": "Vehicle",
          "description": "Target vehicle"
        }
      }
    },
    "unlock": {
      "name": "Unlock",
      "description": "Unlock the vehicle",
      "fields": {
        "device_id": {
          "required": false,
          "selector": {
            "device": {
              "integration": "kia_uvo"
            }
          },
          "name": "Vehicle",
          "description": "Target vehicle"
        }
      }
    },
    "stop_climate": {
      "name": "Stop Climate",
      "description": "Please use cautiously - stop car and climate",
      "fields": {
        "device_id": {
          "required": false,
          "selector": {
            "device": {
              "integration": "kia_uvo"
            }
          },
          "name": "Vehicle",
          "description": "Target vehicle"
        }
      }
    },
    "start_climate": {
      "name": "Start Climate",
      "description": "Please use cautiously - Starts climate and engine.  Not all options are available on all cars or regions.  Use your car\u0027s mobile app as a guide and match the options available in your car.",
      "fields": {
        "device_id": {
          "required": false,
          "selector": {
            "device": {
              "integration": "kia_uvo"
            }
          },
          "name": "Vehicle",
          "description": "Target vehicle"
        },
        "duration": {
          "required": false,
          "example": 5,
          "default": 5,
          "selector": {
            "number": {
              "min": 1,
              "max": 10,
              "step": 1,
              "unit_of_measurement": "minutes"
            }
          },
          "name": "Duration",
          "description": "On Duration"
        },
        "climate": {
          "required": true,
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Climate",
          "description": "Enable the HVAC System"
        },
        "temperature": {
          "required": true,
          "example": 21.5,
          "default": 21,
          "selector": {
            "number": {
              "min": 16,
              "max": 85,
              "step": 0.5,
              "mode": "box",
              "unit_of_measurement": "Degrees"
            }
          },
          "name": "Temperature",
          "description": "Set temperature of climate control. Unit is specific to region."
        },
        "defrost": {
          "required": false,
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Defrost",
          "description": "Front Windshield Defrost"
        },
        "heating": {
          "required": true,
          "example": false,
          "default": false,
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Off",
                  "value": "0"
                },
                {
                  "label": "Steering Wheel, Side and Back Defroster",
                  "value": "4"
                },
                {
                  "label": "Rear Window Only",
                  "value": "2"
                },
                {
                  "label": "Steering Wheel Only",
                  "value": "3"
                }
              ]
            }
          },
          "name": "Heating",
          "description": "Heated features like the steering wheel and rear window"
        },
        "flseat": {
          "required": false,
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Off",
                  "value": "0"
                },
                {
                  "label": "On",
                  "value": "1"
                },
                {
                  "label": "Low Cool",
                  "value": "3"
                },
                {
                  "label": "Medium Cool",
                  "value": "4"
                },
                {
                  "label": "High Cool",
                  "value": "5"
                },
                {
                  "label": "Low Heat",
                  "value": "6"
                },
                {
                  "label": "Medium Heat",
                  "value": "7"
                },
                {
                  "label": "High Heat",
                  "value": "8"
                }
              ]
            }
          },
          "name": "Front Left Seat",
          "description": "Front Left Seat Heat Cool Setting"
        },
        "frseat": {
          "required": false,
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Off",
                  "value": "0"
                },
                {
                  "label": "On",
                  "value": "1"
                },
                {
                  "label": "Low Cool",
                  "value": "3"
                },
                {
                  "label": "Medium Cool",
                  "value": "4"
                },
                {
                  "label": "High Cool",
                  "value": "5"
                },
                {
                  "label": "Low Heat",
                  "value": "6"
                },
                {
                  "label": "Medium Heat",
                  "value": "7"
                },
                {
                  "label": "High Heat",
                  "value": "8"
                }
              ]
            }
          },
          "name": "Front Right Seat",
          "description": "Front Right Seat Heat Cool Setting"
        },
        "rlseat": {
          "required": false,
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Off",
                  "value": "0"
                },
                {
                  "label": "On",
                  "value": "1"
                },
                {
                  "label": "Low Cool",
                  "value": "3"
                },
                {
                  "label": "Medium Cool",
                  "value": "4"
                },
                {
                  "label": "High Cool",
                  "value": "5"
                },
                {
                  "label": "Low Heat",
                  "value": "6"
                },
                {
                  "label": "Medium Heat",
                  "value": "7"
                },
                {
                  "label": "High Heat",
                  "value": "8"
                }
              ]
            }
          },
          "name": "Rear Left Seat",
          "description": "Rear Left Seat Heat Cool Setting"
        },
        "rrseat": {
          "required": false,
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Off",
                  "value": "0"
                },
                {
                  "label": "On",
                  "value": "1"
                },
                {
                  "label": "Low Cool",
                  "value": "3"
                },
                {
                  "label": "Medium Cool",
                  "value": "4"
                },
                {
                  "label": "High Cool",
                  "value": "5"
                },
                {
                  "label": "Low Heat",
                  "value": "6"
                },
                {
                  "label": "Medium Heat",
                  "value": "7"
                },
                {
                  "label": "High Heat",
                  "value": "8"
                }
              ]
            }
          },
          "name": "Rear Right Seat",
          "description": "Rear Right Seat Heat Cool Setting"
        }
      }
    },
    "start_charge": {
      "name": "Start charge",
      "description": "Start charging",
      "fields": {
        "device_id": {
          "required": false,
          "selector": {
            "device": {
              "integration": "kia_uvo"
            }
          },
          "name": "Vehicle",
          "description": "Target vehicle"
        }
      }
    },
    "stop_charge": {
      "name": "Stop Charge",
      "description": "Stop charging",
      "fields": {
        "device_id": {
          "required": false,
          "selector": {
            "device": {
              "integration": "kia_uvo"
            }
          },
          "name": "Vehicle",
          "description": "Target vehicle"
        }
      }
    },
    "set_charge_limits": {
      "name": "Set Charge Limits",
      "description": "sets ac and dc charge capacity limits",
      "fields": {
        "device_id": {
          "required": false,
          "selector": {
            "device": {
              "integration": "kia_uvo"
            }
          },
          "name": "Vehicle",
          "description": "Target vehicle"
        },
        "dc_limit": {
          "required": false,
          "example": 50,
          "default": 90,
          "selector": {
            "number": {
              "min": 50,
              "max": 100,
              "step": 10,
              "unit_of_measurement": "%"
            }
          },
          "name": "DC Charge limit",
          "description": "max charge capacity using DC charger"
        },
        "ac_limit": {
          "required": false,
          "example": 50,
          "default": 90,
          "selector": {
            "number": {
              "min": 50,
              "max": 100,
              "step": 10,
              "unit_of_measurement": "%"
            }
          },
          "name": "AC Charge limit",
          "description": "max charge capacity using AC charger"
        }
      }
    },
    "set_charging_current": {
      "name": "Set AC charging current",
      "description": "Sets the AC charging current capacity",
      "fields": {
        "device_id": {
          "required": false,
          "selector": {
            "device": {
              "integration": "kia_uvo"
            }
          },
          "name": "Vehicle",
          "description": "Target vehicle"
        },
        "level": {
          "required": true,
          "selector": {
            "select": {
              "options": [
                {
                  "label": "100%",
                  "value": "1"
                },
                {
                  "label": "90%",
                  "value": "2"
                },
                {
                  "label": "60%",
                  "value": "3"
                }
              ]
            }
          },
          "name": "Charging current",
          "description": "Charging current capacity percentage"
        }
      }
    },
    "open_charge_port": {
      "name": "Open Charging Port",
      "description": "Open Charge Port",
      "fields": {
        "device_id": {
          "required": false,
          "selector": {
            "device": {
              "integration": "kia_uvo"
            }
          },
          "name": "Vehicle",
          "description": "Target vehicle"
        }
      }
    },
    "close_charge_port": {
      "name": "Close Charge Port",
      "description": "Close Charging Port",
      "fields": {
        "device_id": {
          "required": false,
          "selector": {
            "device": {
              "integration": "kia_uvo"
            }
          },
          "name": "Vehicle",
          "description": "Target vehicle"
        }
      }
    },
    "schedule_charging_and_climate": {
      "name": "Schedule charging and climate",
      "description": "Please use cautiously - Schedule charging and climate.  Not all options are available on all cars or regions.  Use your car\u0027s mobile app as a guide and match the options available in your car.",
      "fields": {
        "device_id": {
          "required": false,
          "selector": {
            "device": {
              "integration": "kia_uvo"
            }
          },
          "name": "Vehicle",
          "description": "Target vehicle"
        },
        "charging_enabled": {
          "required": false,
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Scheduled charging",
          "description": "Enable scheduled Charging"
        },
        "first_departure_enabled": {
          "required": false,
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "1st departure",
          "description": "Enable first departure"
        },
        "first_departure_days": {
          "required": false,
          "example": "[\u00220\u0022, \u00221\u0022]",
          "default": [
            "0"
          ],
          "selector": {
            "select": {
              "multiple": true,
              "options": [
                {
                  "label": "Sunday",
                  "value": "0"
                },
                {
                  "label": "Monday",
                  "value": "1"
                },
                {
                  "label": "Tuesday",
                  "value": "2"
                },
                {
                  "label": "Wednesday",
                  "value": "3"
                },
                {
                  "label": "Thursday",
                  "value": "4"
                },
                {
                  "label": "Friday",
                  "value": "5"
                },
                {
                  "label": "Saturday",
                  "value": "6"
                }
              ]
            }
          },
          "name": "1st departure days",
          "description": "Days which first departure applies to. Cannot be empty."
        },
        "first_departure_time": {
          "required": false,
          "default": false,
          "selector": {
            "time": null
          },
          "name": "1st departure time",
          "description": "First departure time. Use 00, 10, 20, 30, 40 or 50 for minute, and 00 for second"
        },
        "second_departure_enabled": {
          "required": false,
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "2nd departure",
          "description": "Enable second departure"
        },
        "second_departure_days": {
          "required": false,
          "example": "[\u00220\u0022, \u00221\u0022]",
          "default": [
            "0"
          ],
          "selector": {
            "select": {
              "multiple": true,
              "options": [
                {
                  "label": "Sunday",
                  "value": "0"
                },
                {
                  "label": "Monday",
                  "value": "1"
                },
                {
                  "label": "Tuesday",
                  "value": "2"
                },
                {
                  "label": "Wednesday",
                  "value": "3"
                },
                {
                  "label": "Thursday",
                  "value": "4"
                },
                {
                  "label": "Friday",
                  "value": "5"
                },
                {
                  "label": "Saturday",
                  "value": "6"
                }
              ]
            }
          },
          "name": "2nd departure days",
          "description": "Days which second departure applies to. Cannot be empty."
        },
        "second_departure_time": {
          "required": false,
          "default": false,
          "selector": {
            "time": null
          },
          "name": "2nd departure time",
          "description": "Second departure time. Use 00, 10, 20, 30, 40 or 50 for minute, and 00 for second"
        },
        "off_peak_start_time": {
          "required": false,
          "default": false,
          "selector": {
            "time": null
          },
          "name": "Off-peak start time",
          "description": "Off-peak start time. Use 00, 10, 20, 30, 40 or 50 for minute, and 00 for second"
        },
        "off_peak_end_time": {
          "required": false,
          "default": false,
          "selector": {
            "time": null
          },
          "name": "Off-peak end time",
          "description": "Off-peak end time. Use 00, 10, 20, 30, 40 or 50 for minute, and 00 for second"
        },
        "off_peak_charge_only_enabled": {
          "required": false,
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Off-peak tariffs only",
          "description": "If true, charge only during the defined off-peak time, otherwise, charging may start before the off-peak time"
        },
        "climate_enabled": {
          "required": false,
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Climate",
          "description": "Enable the HVAC System prior to departure"
        },
        "temperature": {
          "required": false,
          "example": 21.5,
          "default": 21,
          "selector": {
            "number": {
              "min": 17,
              "max": 85,
              "step": 0.5,
              "mode": "box",
              "unit_of_measurement": "Degrees"
            }
          },
          "name": "Temperature",
          "description": "Set temperature of climate control. Unit is specific to region."
        },
        "temperature_unit": {
          "required": false,
          "example": "0",
          "default": "0",
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Celsius",
                  "value": "0"
                },
                {
                  "label": "Fahrenheit",
                  "value": "1"
                }
              ]
            }
          },
          "name": "Temperature Unit",
          "description": "Set temperature unit of climate control. Unit is specific to region."
        },
        "defrost": {
          "required": false,
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Defrost",
          "description": "Front Windshield Defrost prior to departure"
        }
      }
    },
    "start_hazard_lights": {
      "name": "Turn on the hazard lights",
      "description": "Turn on the hazard lights for 30 seconds.",
      "fields": {
        "device_id": {
          "required": false,
          "selector": {
            "device": {
              "integration": "kia_uvo"
            }
          },
          "name": "Vehicle",
          "description": "Target vehicle"
        }
      }
    },
    "start_hazard_lights_and_horn": {
      "name": "Turn on the hazard lights and horn",
      "description": "Turn on the hazard lights and horn for 30 seconds.",
      "fields": {
        "device_id": {
          "required": false,
          "selector": {
            "device": {
              "integration": "kia_uvo"
            }
          },
          "name": "Vehicle",
          "description": "Target vehicle"
        }
      }
    },
    "start_valet_mode": {
      "name": "Start valet mode",
      "description": "Activate valet mode. If remote valet mode is activated while driving, the vehicle display screen is deactivated.",
      "fields": {
        "device_id": {
          "required": false,
          "selector": {
            "device": {
              "integration": "kia_uvo"
            }
          },
          "name": "Vehicle",
          "description": "Target vehicle"
        }
      }
    },
    "stop_valet_mode": {
      "name": "Stop valet mode",
      "description": "Deactivate valet mode.",
      "fields": {
        "device_id": {
          "required": false,
          "selector": {
            "device": {
              "integration": "kia_uvo"
            }
          },
          "name": "Vehicle",
          "description": "Target vehicle"
        }
      }
    }
  },
  "cast": {
    "show_lovelace_view": {
      "name": "Show dashboard view",
      "description": "Shows a dashboard view on a Chromecast device.",
      "fields": {
        "entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "integration": "cast",
              "domain": "media_player"
            }
          },
          "name": "Entity",
          "description": "Media player entity to show the dashboard view on."
        },
        "dashboard_path": {
          "required": true,
          "example": "lovelace-cast",
          "selector": {
            "text": null
          },
          "name": "Dashboard path",
          "description": "The URL path of the dashboard to show."
        },
        "view_path": {
          "example": "downstairs",
          "selector": {
            "text": null
          },
          "name": "View path",
          "description": "The URL path of the dashboard view to show."
        }
      }
    }
  },
  "sonos": {
    "snapshot": {
      "name": "Snapshot",
      "description": "Takes a snapshot of the media player.",
      "fields": {
        "entity_id": {
          "selector": {
            "entity": {
              "integration": "sonos",
              "domain": "media_player"
            }
          },
          "name": "Entity",
          "description": "Name of entity that will be snapshot."
        },
        "with_group": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "With group",
          "description": "True or False. Also snapshot the group layout."
        }
      }
    },
    "restore": {
      "name": "Restore",
      "description": "Restores a snapshot of the media player.",
      "fields": {
        "entity_id": {
          "selector": {
            "entity": {
              "integration": "sonos",
              "domain": "media_player"
            }
          },
          "name": "Entity",
          "description": "Name of entity that will be restored."
        },
        "with_group": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "With group",
          "description": "True or False. Also restore the group layout."
        }
      }
    },
    "set_sleep_timer": {
      "name": "Set timer",
      "description": "Sets a Sonos timer.",
      "fields": {
        "sleep_time": {
          "selector": {
            "number": {
              "min": 0,
              "max": 7200,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Sleep Time",
          "description": "Number of seconds to set the timer."
        }
      },
      "target": {
        "device": [
          {
            "integration": "sonos"
          }
        ]
      }
    },
    "clear_sleep_timer": {
      "name": "Clear timer",
      "description": "Clears a Sonos timer.",
      "fields": {},
      "target": {
        "device": [
          {
            "integration": "sonos"
          }
        ]
      }
    },
    "update_alarm": {
      "name": "Update alarm",
      "description": "Updates an alarm with new time and volume settings.",
      "fields": {
        "alarm_id": {
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 1440,
              "mode": "box"
            }
          },
          "name": "Alarm ID",
          "description": "ID for the alarm to be updated."
        },
        "time": {
          "example": "07:00",
          "selector": {
            "time": null
          },
          "name": "Time",
          "description": "Set time for the alarm."
        },
        "volume": {
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "step": 0.01
            }
          },
          "name": "Volume",
          "description": "Set alarm volume level."
        },
        "enabled": {
          "selector": {
            "boolean": null
          },
          "name": "Alarm enabled",
          "description": "Enable or disable the alarm."
        },
        "include_linked_zones": {
          "selector": {
            "boolean": null
          },
          "name": "Include linked zones",
          "description": "Enable or disable including grouped rooms."
        }
      },
      "target": {
        "device": [
          {
            "integration": "sonos"
          }
        ]
      }
    },
    "play_queue": {
      "name": "Play queue",
      "description": "Start playing the queue from the first item.",
      "fields": {
        "queue_position": {
          "selector": {
            "number": {
              "min": 0,
              "max": 10000,
              "mode": "box"
            }
          },
          "name": "Queue position",
          "description": "Position of the song in the queue to start playing from."
        }
      },
      "target": {
        "device": [
          {
            "integration": "sonos"
          }
        ]
      }
    },
    "remove_from_queue": {
      "name": "Remove from queue",
      "description": "Removes an item from the queue.",
      "fields": {
        "queue_position": {
          "selector": {
            "number": {
              "min": 0,
              "max": 10000,
              "mode": "box"
            }
          },
          "name": "Queue position",
          "description": "Position in the queue to remove."
        }
      },
      "target": {
        "device": [
          {
            "integration": "sonos"
          }
        ]
      }
    },
    "get_queue": {
      "name": "Get queue",
      "description": "Returns the contents of the queue.",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "sonos",
            "domain": [
              "media_player"
            ]
          }
        ]
      },
      "response": {
        "optional": false
      }
    }
  },
  "automation": {
    "trigger": {
      "name": "Trigger",
      "description": "Triggers the actions of an automation.",
      "fields": {
        "skip_condition": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Skip conditions",
          "description": "Defines whether or not the conditions will be skipped."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles (enable / disable) an automation.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Enables an automation.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Disables an automation.",
      "fields": {
        "stop_actions": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Stop actions",
          "description": "Stops currently running actions."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads the automation configuration.",
      "fields": {}
    }
  }
}