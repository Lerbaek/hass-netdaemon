//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v23.26.0.0
//   At: 2024-07-15T00:37:21.2772745+02:00
//
// *** Make sure the version of the codegen tool and your nugets Joysoftware.NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update JoySoftware.NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/v3/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace HomeAssistantGenerated;
public static class GeneratedExtensions
{
    ///<summary>Registers all injectable generated types in the serviceCollection</summary>
    public static IServiceCollection AddHomeAssistantGenerated(this IServiceCollection serviceCollection)
    {
        serviceCollection.AddTransient<Entities>();
        serviceCollection.AddTransient<AutomationEntities>();
        serviceCollection.AddTransient<BinarySensorEntities>();
        serviceCollection.AddTransient<ButtonEntities>();
        serviceCollection.AddTransient<CameraEntities>();
        serviceCollection.AddTransient<ClimateEntities>();
        serviceCollection.AddTransient<CoverEntities>();
        serviceCollection.AddTransient<DeviceTrackerEntities>();
        serviceCollection.AddTransient<GroupEntities>();
        serviceCollection.AddTransient<InputBooleanEntities>();
        serviceCollection.AddTransient<InputDatetimeEntities>();
        serviceCollection.AddTransient<InputNumberEntities>();
        serviceCollection.AddTransient<InputTextEntities>();
        serviceCollection.AddTransient<LightEntities>();
        serviceCollection.AddTransient<LockEntities>();
        serviceCollection.AddTransient<MediaPlayerEntities>();
        serviceCollection.AddTransient<NumberEntities>();
        serviceCollection.AddTransient<PersonEntities>();
        serviceCollection.AddTransient<RemoteEntities>();
        serviceCollection.AddTransient<SceneEntities>();
        serviceCollection.AddTransient<ScriptEntities>();
        serviceCollection.AddTransient<SelectEntities>();
        serviceCollection.AddTransient<SensorEntities>();
        serviceCollection.AddTransient<SunEntities>();
        serviceCollection.AddTransient<SwitchEntities>();
        serviceCollection.AddTransient<TtsEntities>();
        serviceCollection.AddTransient<UpdateEntities>();
        serviceCollection.AddTransient<VacuumEntities>();
        serviceCollection.AddTransient<VarEntities>();
        serviceCollection.AddTransient<WeatherEntities>();
        serviceCollection.AddTransient<ZoneEntities>();
        serviceCollection.AddTransient<CalendarEntities>();
        serviceCollection.AddTransient<TodoEntities>();
        serviceCollection.AddTransient<LawnMowerEntities>();
        serviceCollection.AddTransient<ConversationEntities>();
        serviceCollection.AddTransient<Services>();
        serviceCollection.AddTransient<AutomationServices>();
        serviceCollection.AddTransient<BrowserModServices>();
        serviceCollection.AddTransient<ButtonServices>();
        serviceCollection.AddTransient<CalendarServices>();
        serviceCollection.AddTransient<CameraServices>();
        serviceCollection.AddTransient<CastServices>();
        serviceCollection.AddTransient<ClimateServices>();
        serviceCollection.AddTransient<CloudServices>();
        serviceCollection.AddTransient<ConversationServices>();
        serviceCollection.AddTransient<CounterServices>();
        serviceCollection.AddTransient<CoverServices>();
        serviceCollection.AddTransient<DeviceTrackerServices>();
        serviceCollection.AddTransient<DuckdnsServices>();
        serviceCollection.AddTransient<FanServices>();
        serviceCollection.AddTransient<FfmpegServices>();
        serviceCollection.AddTransient<FrontendServices>();
        serviceCollection.AddTransient<GoogleAssistantServices>();
        serviceCollection.AddTransient<GroupServices>();
        serviceCollection.AddTransient<HassioServices>();
        serviceCollection.AddTransient<InputBooleanServices>();
        serviceCollection.AddTransient<InputButtonServices>();
        serviceCollection.AddTransient<InputDatetimeServices>();
        serviceCollection.AddTransient<InputNumberServices>();
        serviceCollection.AddTransient<InputSelectServices>();
        serviceCollection.AddTransient<InputTextServices>();
        serviceCollection.AddTransient<KiaUvoServices>();
        serviceCollection.AddTransient<KodiServices>();
        serviceCollection.AddTransient<LandroidCloudServices>();
        serviceCollection.AddTransient<LawnMowerServices>();
        serviceCollection.AddTransient<LightServices>();
        serviceCollection.AddTransient<LocaltuyaServices>();
        serviceCollection.AddTransient<LockServices>();
        serviceCollection.AddTransient<LogbookServices>();
        serviceCollection.AddTransient<LoggerServices>();
        serviceCollection.AddTransient<MediaPlayerServices>();
        serviceCollection.AddTransient<MqttServices>();
        serviceCollection.AddTransient<NetdaemonServices>();
        serviceCollection.AddTransient<NotifyServices>();
        serviceCollection.AddTransient<NumberServices>();
        serviceCollection.AddTransient<OpenaiConversationServices>();
        serviceCollection.AddTransient<PersistentNotificationServices>();
        serviceCollection.AddTransient<PersonServices>();
        serviceCollection.AddTransient<PlexServices>();
        serviceCollection.AddTransient<ProfilerServices>();
        serviceCollection.AddTransient<RecorderServices>();
        serviceCollection.AddTransient<RemoteServices>();
        serviceCollection.AddTransient<RenaultServices>();
        serviceCollection.AddTransient<RestServices>();
        serviceCollection.AddTransient<RestCommandServices>();
        serviceCollection.AddTransient<SceneServices>();
        serviceCollection.AddTransient<ScheduleServices>();
        serviceCollection.AddTransient<ScriptServices>();
        serviceCollection.AddTransient<SelectServices>();
        serviceCollection.AddTransient<ShoppingListServices>();
        serviceCollection.AddTransient<SonoffServices>();
        serviceCollection.AddTransient<SonosServices>();
        serviceCollection.AddTransient<SwitchServices>();
        serviceCollection.AddTransient<SystemLogServices>();
        serviceCollection.AddTransient<TadoServices>();
        serviceCollection.AddTransient<TemplateServices>();
        serviceCollection.AddTransient<TimerServices>();
        serviceCollection.AddTransient<TodoServices>();
        serviceCollection.AddTransient<TtsServices>();
        serviceCollection.AddTransient<UpdateServices>();
        serviceCollection.AddTransient<VarServices>();
        serviceCollection.AddTransient<WaterHeaterServices>();
        serviceCollection.AddTransient<WeatherServices>();
        serviceCollection.AddTransient<XiaomiCloudMapExtractorServices>();
        serviceCollection.AddTransient<ZoneServices>();
        return serviceCollection;
    }
}

public interface IEntities
{
    AutomationEntities Automation { get; }

    BinarySensorEntities BinarySensor { get; }

    ButtonEntities Button { get; }

    CameraEntities Camera { get; }

    ClimateEntities Climate { get; }

    CoverEntities Cover { get; }

    DeviceTrackerEntities DeviceTracker { get; }

    GroupEntities Group { get; }

    InputBooleanEntities InputBoolean { get; }

    InputDatetimeEntities InputDatetime { get; }

    InputNumberEntities InputNumber { get; }

    InputTextEntities InputText { get; }

    LightEntities Light { get; }

    LockEntities Lock { get; }

    MediaPlayerEntities MediaPlayer { get; }

    NumberEntities Number { get; }

    PersonEntities Person { get; }

    RemoteEntities Remote { get; }

    SceneEntities Scene { get; }

    ScriptEntities Script { get; }

    SelectEntities Select { get; }

    SensorEntities Sensor { get; }

    SunEntities Sun { get; }

    SwitchEntities Switch { get; }

    TtsEntities Tts { get; }

    UpdateEntities Update { get; }

    VacuumEntities Vacuum { get; }

    VarEntities Var { get; }

    WeatherEntities Weather { get; }

    ZoneEntities Zone { get; }

    CalendarEntities Calendar { get; }

    TodoEntities Todo { get; }

    LawnMowerEntities LawnMower { get; }

    ConversationEntities Conversation { get; }
}

public partial class Entities : IEntities
{
    private readonly IHaContext _haContext;
    public Entities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AutomationEntities Automation => new(_haContext);
    public BinarySensorEntities BinarySensor => new(_haContext);
    public ButtonEntities Button => new(_haContext);
    public CameraEntities Camera => new(_haContext);
    public ClimateEntities Climate => new(_haContext);
    public CoverEntities Cover => new(_haContext);
    public DeviceTrackerEntities DeviceTracker => new(_haContext);
    public GroupEntities Group => new(_haContext);
    public InputBooleanEntities InputBoolean => new(_haContext);
    public InputDatetimeEntities InputDatetime => new(_haContext);
    public InputNumberEntities InputNumber => new(_haContext);
    public InputTextEntities InputText => new(_haContext);
    public LightEntities Light => new(_haContext);
    public LockEntities Lock => new(_haContext);
    public MediaPlayerEntities MediaPlayer => new(_haContext);
    public NumberEntities Number => new(_haContext);
    public PersonEntities Person => new(_haContext);
    public RemoteEntities Remote => new(_haContext);
    public SceneEntities Scene => new(_haContext);
    public ScriptEntities Script => new(_haContext);
    public SelectEntities Select => new(_haContext);
    public SensorEntities Sensor => new(_haContext);
    public SunEntities Sun => new(_haContext);
    public SwitchEntities Switch => new(_haContext);
    public TtsEntities Tts => new(_haContext);
    public UpdateEntities Update => new(_haContext);
    public VacuumEntities Vacuum => new(_haContext);
    public VarEntities Var => new(_haContext);
    public WeatherEntities Weather => new(_haContext);
    public ZoneEntities Zone => new(_haContext);
    public CalendarEntities Calendar => new(_haContext);
    public TodoEntities Todo => new(_haContext);
    public LawnMowerEntities LawnMower => new(_haContext);
    public ConversationEntities Conversation => new(_haContext);
}

public partial class AutomationEntities
{
    private readonly IHaContext _haContext;
    public AutomationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Renovation: Indiker deadline</summary>
    public AutomationEntity AlarmRenovation => new(_haContext, "automation.alarm_renovation");
    ///<summary>Aula: Notifikationer</summary>
    public AutomationEntity AulaNotifikationer => new(_haContext, "automation.aula_notifikationer");
    ///<summary>zigbee2mqtt: Reparér binding</summary>
    public AutomationEntity Automation57 => new(_haContext, "automation.automation_57");
    ///<summary>Badeværelse: Dæmpet lys om natten</summary>
    public AutomationEntity BadevaerelseDaempetLysOmNatten => new(_haContext, "automation.badevaerelse_daempet_lys_om_natten");
    ///<summary>Bevægelse i stuen</summary>
    public AutomationEntity BevaegelseIStuen => new(_haContext, "automation.bevaegelse_i_stuen");
    ///<summary>Bil: Automatisk lås</summary>
    public AutomationEntity BilAutomatiskLas => new(_haContext, "automation.bil_automatisk_las");
    ///<summary>Bil: Advarsel ved manglende opladning</summary>
    public AutomationEntity BilenBurdeLade => new(_haContext, "automation.bilen_burde_lade");
    ///<summary>Bryggers: TS004F</summary>
    public AutomationEntity BryggersKontaktMedFireKnapper => new(_haContext, "automation.bryggers_kontakt_med_fire_knapper");
    ///<summary>Dørklokke</summary>
    public AutomationEntity Dorklokke => new(_haContext, "automation.dorklokke");
    ///<summary>Dørklokke: Nulstil hjælper</summary>
    public AutomationEntity DorklokkeNulstilHjaelper => new(_haContext, "automation.dorklokke_nulstil_hjaelper");
    ///<summary>Dørklokke: Nulstil lydstyrke</summary>
    public AutomationEntity DorklokkeNulstilLydstyrke => new(_haContext, "automation.dorklokke_nulstil_lydstyrke");
    ///<summary>Ebbe: Åbent vindue, stop radiator</summary>
    public AutomationEntity EbbeAbentVindueStopRadiator => new(_haContext, "automation.ebbe_abent_vindue_stop_radiator");
    ///<summary>Ebbe: Kontakt</summary>
    public AutomationEntity EbbeKontaktEvents => new(_haContext, "automation.ebbe_kontakt_events");
    ///<summary>Automatisk natlys</summary>
    public AutomationEntity EbbeNatlys => new(_haContext, "automation.ebbe_natlys");
    ///<summary>Garage: Toggle</summary>
    public AutomationEntity GarageToggle => new(_haContext, "automation.garage_toggle");
    ///<summary>Grasputin: Kør afbrudt</summary>
    public AutomationEntity GrasputinKorAfbrudtIEtDogn => new(_haContext, "automation.grasputin_kor_afbrudt_i_et_dogn");
    ///<summary>Halloween: Pulserende, rødt lys - Cleanup</summary>
    public AutomationEntity HalloweenPulserendeRodtLysCleanup => new(_haContext, "automation.halloween_pulserende_rodt_lys_cleanup");
    ///<summary>Halloween: Torden ved forbipasserende</summary>
    public AutomationEntity HalloweenTordenVedForbipasserende => new(_haContext, "automation.halloween_torden_ved_forbipasserende");
    ///<summary>Hjem: Ferietilstand</summary>
    public AutomationEntity HjemFerietilstand => new(_haContext, "automation.hjem_ferietilstand");
    ///<summary>Hjem: Night mode</summary>
    public AutomationEntity HjemNightMode => new(_haContext, "automation.hjem_night_mode");
    ///<summary>Hjem: Nye elpriser</summary>
    public AutomationEntity HjemNyeElpriser => new(_haContext, "automation.hjem_nye_elpriser");
    ///<summary>Husk idræt</summary>
    public AutomationEntity HuskIdraet => new(_haContext, "automation.husk_idraet");
    ///<summary>Julelys</summary>
    public AutomationEntity Julelys => new(_haContext, "automation.julelys");
    ///<summary>Julelys: Sluk</summary>
    public AutomationEntity JulelysSluk => new(_haContext, "automation.julelys_sluk");
    ///<summary>Julelys: Tænd</summary>
    public AutomationEntity JulelysTaend => new(_haContext, "automation.julelys_taend");
    ///<summary>Køkken: Afbryder, underskabsbelysning</summary>
    public AutomationEntity KokkenAfbryderUnderskabsbelysning => new(_haContext, "automation.kokken_afbryder_underskabsbelysning");
    ///<summary>Køkken: Afbryder, underskabsbelysning</summary>
    public AutomationEntity KokkenAfbryderUnderskabsbelysning2 => new(_haContext, "automation.kokken_afbryder_underskabsbelysning_2");
    ///<summary>Køkken: Styr entré med kontakt</summary>
    public AutomationEntity KokkenStyrEntreMedKontakt => new(_haContext, "automation.kokken_styr_entre_med_kontakt");
    ///<summary>Køkken: Underskabsbelysning</summary>
    public AutomationEntity KokkenUnderskabsbelysning => new(_haContext, "automation.kokken_underskabsbelysning");
    ///<summary>Kristoffer: Medicin</summary>
    public AutomationEntity KristofferMedicin => new(_haContext, "automation.kristoffer_medicin");
    ///<summary>Kristoffer: Medicin 2</summary>
    public AutomationEntity KristofferMedicin2 => new(_haContext, "automation.kristoffer_medicin_2");
    ///<summary>Kummefryser: Strømafbrydelse</summary>
    public AutomationEntity Kummefryser => new(_haContext, "automation.kummefryser");
    ///<summary>Kummefryser: Tænd automation</summary>
    public AutomationEntity KummefryserTaendAutomation => new(_haContext, "automation.kummefryser_taend_automation");
    ///<summary>Low battery level detection &amp; notification for all battery sensors</summary>
    public AutomationEntity LowBatteryLevelDetectionNotificationForAllBatterySensors => new(_haContext, "automation.low_battery_level_detection_notification_for_all_battery_sensors");
    ///<summary>Meta: Genindlæs når utilgængelig</summary>
    public AutomationEntity MetaGenindlaesNarUtilgaengelig => new(_haContext, "automation.meta_genindlaes_nar_utilgaengelig");
    ///<summary>Motion-activated Light</summary>
    public AutomationEntity MotionActivatedLight => new(_haContext, "automation.motion_activated_light");
    ///<summary>Stue: Motion sensor</summary>
    public AutomationEntity MotionSensorLysIStuen => new(_haContext, "automation.motion_sensor_lys_i_stuen");
    ///<summary>Hjem: Ingen hjemme</summary>
    public AutomationEntity NewAutomation => new(_haContext, "automation.new_automation");
    ///<summary>Økonomi: Omlæg lån</summary>
    public AutomationEntity OkonomiOmlaegLan => new(_haContext, "automation.okonomi_omlaeg_lan");
    ///<summary>Olive Tree Branch: Hent status</summary>
    public AutomationEntity OliveTreeBranchHentStatus => new(_haContext, "automation.olive_tree_branch_hent_status");
    ///<summary>Renovation: Alarm</summary>
    public AutomationEntity RenovationAlarm => new(_haContext, "automation.renovation_alarm");
    ///<summary>Renovation: Overskredet deadline</summary>
    public AutomationEntity RenovationOverskredetDeadline => new(_haContext, "automation.renovation_overskredet_deadline");
    ///<summary>Roar: Åbent vindue, stop radiator</summary>
    public AutomationEntity RoarAbentVindueStopRadiator => new(_haContext, "automation.roar_abent_vindue_stop_radiator");
    ///<summary>Roar: Dæmp lyset om natten</summary>
    public AutomationEntity RoarDaempLysetOmNatten => new(_haContext, "automation.roar_daemp_lyset_om_natten");
    ///<summary>Roar: Sluk lyset om morgenen</summary>
    public AutomationEntity RoarSlukLysetOmMorgenen => new(_haContext, "automation.roar_sluk_lyset_om_morgenen");
    ///<summary>Roar: Sluk lyset under sengen om natten</summary>
    public AutomationEntity RoarSlukLysetUnderSengenOmNatten => new(_haContext, "automation.roar_sluk_lyset_under_sengen_om_natten");
    ///<summary>Roar: Tænd natlys</summary>
    public AutomationEntity RoarTaendNatlys => new(_haContext, "automation.roar_taend_natlys");
    ///<summary>Seedbox: Advarsel ved manglende strøm</summary>
    public AutomationEntity SeedboxOffline => new(_haContext, "automation.seedbox_offline");
    ///<summary>Loft: Sluk lyset efter en time</summary>
    public AutomationEntity SlukLysetPaLoftetEfterEnTime => new(_haContext, "automation.sluk_lyset_pa_loftet_efter_en_time");
    ///<summary>Støvsuger: Smid moppen</summary>
    public AutomationEntity StovsugerSmidMoppen => new(_haContext, "automation.stovsuger_smid_moppen");
    ///<summary>Støvsuger: TS004F</summary>
    public AutomationEntity StovsugerTs004f => new(_haContext, "automation.stovsuger_ts004f");
    ///<summary>Stue: Åben dør, stop radiatorer</summary>
    public AutomationEntity StueAbenDorStopRadiatorer => new(_haContext, "automation.stue_aben_dor_stop_radiatorer");
    ///<summary>Stue: Hold tv slukket</summary>
    public AutomationEntity StueHoldTvSlukket => new(_haContext, "automation.stue_hold_tv_slukket");
    ///<summary>Stue: Nulstil natlys om morgenen</summary>
    public AutomationEntity StueNulstilNatlysOmMorgenen => new(_haContext, "automation.stue_nulstil_natlys_om_morgenen");
    ///<summary>Stue: TS004F</summary>
    public AutomationEntity StueTs004f => new(_haContext, "automation.stue_ts004f");
    ///<summary>Terrasse: Sluk lys ved sengetid</summary>
    public AutomationEntity TerrasseSlukLysVedSengetid => new(_haContext, "automation.terrasse_sluk_lys_ved_sengetid");
    ///<summary>Too Good To Go</summary>
    public AutomationEntity TooGoodToGo => new(_haContext, "automation.too_good_to_go");
    ///<summary>Ude: Sluk alle lys ved solopgang</summary>
    public AutomationEntity UdeSlukAlleLysVedSolopgang => new(_haContext, "automation.ude_sluk_alle_lys_ved_solopgang");
    ///<summary>Vækkeur</summary>
    public AutomationEntity Vaekkeur => new(_haContext, "automation.vaekkeur");
    ///<summary>Walk-in closet: E1812 TRÅDFRI Shortcut button</summary>
    public AutomationEntity WalkInClosetE1812TradfriShortcutButton => new(_haContext, "automation.walk_in_closet_e1812_tradfri_shortcut_button");
    ///<summary>Walk-in-closet-gardin: Opdater gardin-position løbende</summary>
    public AutomationEntity WalkInClosetGardinOpdaterGardinPositionLobende => new(_haContext, "automation.walk_in_closet_gardin_opdater_gardin_position_lobende");
    ///<summary>Walk-in-closet: Gardin-position</summary>
    public AutomationEntity WalkInClosetGardinPosition => new(_haContext, "automation.walk_in_closet_gardin_position");
    ///<summary>zigbee2mqtt: Justér lysstyrke når lys tændes</summary>
    public AutomationEntity Zigbee2mqttJusterLysstyrkeNarLysTaendes => new(_haContext, "automation.zigbee2mqtt_juster_lysstyrke_nar_lys_taendes");
    ///<summary>zigbee2mqtt repair: Flowerpot VP1</summary>
    public AutomationEntity Zigbee2mqttRepairFlowerpotVp1 => new(_haContext, "automation.zigbee2mqtt_repair_flowerpot_vp1");
    ///<summary>zigbee2mqtt repair: Køkkenvask 1</summary>
    public AutomationEntity Zigbee2mqttRepairKokkenvask1 => new(_haContext, "automation.zigbee2mqtt_repair_kokkenvask_1");
    ///<summary>zigbee2mqtt repair: Køkkenvask 2</summary>
    public AutomationEntity Zigbee2mqttRepairKokkenvask2 => new(_haContext, "automation.zigbee2mqtt_repair_kokkenvask_2");
    ///<summary>zigbee2mqtt repair: Køkkenvask 3</summary>
    public AutomationEntity Zigbee2mqttRepairKokkenvask3 => new(_haContext, "automation.zigbee2mqtt_repair_kokkenvask_3");
    ///<summary>zigbee2mqtt repair: Toilet (dør)</summary>
    public AutomationEntity Zigbee2mqttRepairToiletDor => new(_haContext, "automation.zigbee2mqtt_repair_toilet_dor");
    ///<summary>zigbee2mqtt repair: Toilet (vindue)</summary>
    public AutomationEntity Zigbee2mqttRepairToiletVindue => new(_haContext, "automation.zigbee2mqtt_repair_toilet_vindue");
    ///<summary>zigbee2mqtt repair: Underskabsbelysning</summary>
    public AutomationEntity Zigbee2mqttRepairUnderskabsbelysning => new(_haContext, "automation.zigbee2mqtt_repair_underskabsbelysning");
    ///<summary>zigbee2mqtt repair: Walk-in-closet</summary>
    public AutomationEntity Zigbee2mqttRepairWalkInCloset => new(_haContext, "automation.zigbee2mqtt_repair_walk_in_closet");
    ///<summary>zigbee2mqtt: Reparér binding vha. blueprint</summary>
    public AutomationEntity Zigbee2mqttReparerBindingVhaBlueprint => new(_haContext, "automation.zigbee2mqtt_reparer_binding_vha_blueprint");
    ///<summary>zigbee2mqtt: Test</summary>
    public AutomationEntity Zigbee2mqttTest => new(_haContext, "automation.zigbee2mqtt_test");
    ///<summary>zigbee2mqtt: Tillad genindmeldelse</summary>
    public AutomationEntity Zigbee2mqttTilladGenindmeldelse => new(_haContext, "automation.zigbee2mqtt_tillad_genindmeldelse");
}

public partial class BinarySensorEntities
{
    private readonly IHaContext _haContext;
    public BinarySensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>audiobookshelf_connected</summary>
    public BinarySensorEntity AudiobookshelfConnected => new(_haContext, "binary_sensor.audiobookshelf_connected");
    ///<summary>Badeværelse Early start</summary>
    public BinarySensorEntity BadevaerelseEarlyStart => new(_haContext, "binary_sensor.badevaerelse_early_start");
    ///<summary>Badeværelse Connectivity</summary>
    public BinarySensorEntity BadevaerelseLink => new(_haContext, "binary_sensor.badevaerelse_link");
    ///<summary>Badeværelse Window</summary>
    public BinarySensorEntity BadevaerelseOpenWindow => new(_haContext, "binary_sensor.badevaerelse_open_window");
    ///<summary>Badeværelse Overlay</summary>
    public BinarySensorEntity BadevaerelseOverlay => new(_haContext, "binary_sensor.badevaerelse_overlay");
    ///<summary>Badeværelse Power</summary>
    public BinarySensorEntity BadevaerelsePower => new(_haContext, "binary_sensor.badevaerelse_power");
    ///<summary>Bevægelse i stuen Battery</summary>
    public BinarySensorEntity BevaegelseIStuenBatteryLow => new(_haContext, "binary_sensor.bevaegelse_i_stuen_battery_low");
    ///<summary>Bevægelse i stuen Occupancy</summary>
    public BinarySensorEntity BevaegelseIStuenOccupancy => new(_haContext, "binary_sensor.bevaegelse_i_stuen_occupancy");
    ///<summary>Bevægelse på Ebbes værelse Battery</summary>
    public BinarySensorEntity BevaegelsePaEbbesVaerelseBatteryLow => new(_haContext, "binary_sensor.bevaegelse_pa_ebbes_vaerelse_battery_low");
    ///<summary>Bevægelse på Ebbes værelse Occupancy</summary>
    public BinarySensorEntity BevaegelsePaEbbesVaerelseOccupancy => new(_haContext, "binary_sensor.bevaegelse_pa_ebbes_vaerelse_occupancy");
    ///<summary>Bryggers</summary>
    public BinarySensorEntity BryggersUpdateAvailable => new(_haContext, "binary_sensor.bryggers_update_available");
    ///<summary>CEED Air Conditioner</summary>
    public BinarySensorEntity CeedAirConditioner => new(_haContext, "binary_sensor.ceed_air_conditioner");
    ///<summary>CEED Back Left Door</summary>
    public BinarySensorEntity CeedBackLeftDoor => new(_haContext, "binary_sensor.ceed_back_left_door");
    ///<summary>CEED Back Right Door</summary>
    public BinarySensorEntity CeedBackRightDoor => new(_haContext, "binary_sensor.ceed_back_right_door");
    ///<summary>CEED Back Window Heater</summary>
    public BinarySensorEntity CeedBackWindowHeater => new(_haContext, "binary_sensor.ceed_back_window_heater");
    ///<summary>CEED Defrost</summary>
    public BinarySensorEntity CeedDefrost => new(_haContext, "binary_sensor.ceed_defrost");
    ///<summary>CEED Engine</summary>
    public BinarySensorEntity CeedEngine => new(_haContext, "binary_sensor.ceed_engine");
    ///<summary>CEED EV Battery Charge</summary>
    public BinarySensorEntity CeedEvBatteryCharge => new(_haContext, "binary_sensor.ceed_ev_battery_charge");
    ///<summary>CEED EV Battery Plug</summary>
    public BinarySensorEntity CeedEvBatteryPlug => new(_haContext, "binary_sensor.ceed_ev_battery_plug");
    ///<summary>CEED EV First Scheduled Departure</summary>
    public BinarySensorEntity CeedEvFirstScheduledDeparture => new(_haContext, "binary_sensor.ceed_ev_first_scheduled_departure");
    ///<summary>CEED EV Second Scheduled Departure</summary>
    public BinarySensorEntity CeedEvSecondScheduledDeparture => new(_haContext, "binary_sensor.ceed_ev_second_scheduled_departure");
    ///<summary>CEED Front Left Door</summary>
    public BinarySensorEntity CeedFrontLeftDoor => new(_haContext, "binary_sensor.ceed_front_left_door");
    ///<summary>CEED Front Right Door</summary>
    public BinarySensorEntity CeedFrontRightDoor => new(_haContext, "binary_sensor.ceed_front_right_door");
    ///<summary>CEED Fuel Low Level</summary>
    public BinarySensorEntity CeedFuelLowLevel => new(_haContext, "binary_sensor.ceed_fuel_low_level");
    ///<summary>CEED Hood</summary>
    public BinarySensorEntity CeedHood => new(_haContext, "binary_sensor.ceed_hood");
    ///<summary>CEED Steering Wheel Heater</summary>
    public BinarySensorEntity CeedSteeringWheelHeater => new(_haContext, "binary_sensor.ceed_steering_wheel_heater");
    ///<summary>CEED Tire Pressure - All</summary>
    public BinarySensorEntity CeedTirePressureAll => new(_haContext, "binary_sensor.ceed_tire_pressure_all");
    ///<summary>CEED Tire Pressure - Front Left</summary>
    public BinarySensorEntity CeedTirePressureFrontLeft => new(_haContext, "binary_sensor.ceed_tire_pressure_front_left");
    ///<summary>CEED Tire Pressure - Front right</summary>
    public BinarySensorEntity CeedTirePressureFrontRight => new(_haContext, "binary_sensor.ceed_tire_pressure_front_right");
    ///<summary>CEED Tire Pressure - Rear Left</summary>
    public BinarySensorEntity CeedTirePressureRearLeft => new(_haContext, "binary_sensor.ceed_tire_pressure_rear_left");
    ///<summary>CEED Tire Pressure - Rear Right</summary>
    public BinarySensorEntity CeedTirePressureRearRight => new(_haContext, "binary_sensor.ceed_tire_pressure_rear_right");
    ///<summary>CEED Trunk</summary>
    public BinarySensorEntity CeedTrunk => new(_haContext, "binary_sensor.ceed_trunk");
    ///<summary>Dør: Stue Door</summary>
    public BinarySensorEntity DorStueContact => new(_haContext, "binary_sensor.dor_stue_contact");
    ///<summary>Familie</summary>
    public BinarySensorEntity Familie => new(_haContext, "binary_sensor.familie");
    ///<summary>Garage-lanterne</summary>
    public BinarySensorEntity GarageLanterneUpdateAvailable => new(_haContext, "binary_sensor.garage_lanterne_update_available");
    ///<summary>Garageport</summary>
    public BinarySensorEntity Garageport => new(_haContext, "binary_sensor.garageport");
    ///<summary>Grasputin Battery Charging</summary>
    public BinarySensorEntity GrasputinBatteryCharging => new(_haContext, "binary_sensor.grasputin_battery_charging");
    ///<summary>Grasputin Online</summary>
    public BinarySensorEntity GrasputinOnline => new(_haContext, "binary_sensor.grasputin_online");
    ///<summary>Grasputin Rainsensor Triggered</summary>
    public BinarySensorEntity GrasputinRainsensorTriggered => new(_haContext, "binary_sensor.grasputin_rainsensor_triggered");
    ///<summary>Gros Galaxy S20+ High accuracy mode</summary>
    public BinarySensorEntity GrosGalaxyS20HighAccuracyMode => new(_haContext, "binary_sensor.gros_galaxy_s20_high_accuracy_mode");
    ///<summary>Gros Galaxy S20+ Is charging</summary>
    public BinarySensorEntity GrosGalaxyS20IsCharging => new(_haContext, "binary_sensor.gros_galaxy_s20_is_charging");
    ///<summary>IB3356497408 Connection state</summary>
    public BinarySensorEntity Ib3356497408ConnectionState => new(_haContext, "binary_sensor.ib3356497408_connection_state");
    ///<summary>Motion</summary>
    public BinarySensorEntity IndkorselMotion => new(_haContext, "binary_sensor.indkorsel_motion");
    ///<summary>Køkken / Gang Early start</summary>
    public BinarySensorEntity KokkenGangEarlyStart => new(_haContext, "binary_sensor.kokken_gang_early_start");
    ///<summary>Køkken / Gang Connectivity</summary>
    public BinarySensorEntity KokkenGangLink => new(_haContext, "binary_sensor.kokken_gang_link");
    ///<summary>Køkken / Gang Window</summary>
    public BinarySensorEntity KokkenGangOpenWindow => new(_haContext, "binary_sensor.kokken_gang_open_window");
    ///<summary>Køkken / Gang Overlay</summary>
    public BinarySensorEntity KokkenGangOverlay => new(_haContext, "binary_sensor.kokken_gang_overlay");
    ///<summary>Køkken / Gang Power</summary>
    public BinarySensorEntity KokkenGangPower => new(_haContext, "binary_sensor.kokken_gang_power");
    ///<summary>Køkkenvask-kontakt</summary>
    public BinarySensorEntity KokkenvaskKontaktUpdateAvailable => new(_haContext, "binary_sensor.kokkenvask_kontakt_update_available");
    ///<summary>Kristoffer - iPhone Focus</summary>
    public BinarySensorEntity KristofferIphoneFocus => new(_haContext, "binary_sensor.kristoffer_iphone_focus");
    ///<summary>Kristoffers Galaxy S20 Ultra Device locked</summary>
    public BinarySensorEntity KristoffersGalaxyS20UltraDeviceLocked => new(_haContext, "binary_sensor.kristoffers_galaxy_s20_ultra_device_locked");
    ///<summary>Kristoffers Galaxy S20 Ultra High accuracy mode</summary>
    public BinarySensorEntity KristoffersGalaxyS20UltraHighAccuracyMode => new(_haContext, "binary_sensor.kristoffers_galaxy_s20_ultra_high_accuracy_mode");
    ///<summary>Kristoffers Galaxy S20 Ultra Interactive</summary>
    public BinarySensorEntity KristoffersGalaxyS20UltraInteractive => new(_haContext, "binary_sensor.kristoffers_galaxy_s20_ultra_interactive");
    ///<summary>Kristoffers Galaxy S20 Ultra Is charging</summary>
    public BinarySensorEntity KristoffersGalaxyS20UltraOplader => new(_haContext, "binary_sensor.kristoffers_galaxy_s20_ultra_oplader");
    ///<summary>Ebbes værelse Early start</summary>
    public BinarySensorEntity LillebrorsVaerelseEarlyStart => new(_haContext, "binary_sensor.lillebrors_vaerelse_early_start");
    ///<summary>Ebbes værelse Connectivity</summary>
    public BinarySensorEntity LillebrorsVaerelseLink => new(_haContext, "binary_sensor.lillebrors_vaerelse_link");
    ///<summary>Ebbes værelse Window</summary>
    public BinarySensorEntity LillebrorsVaerelseOpenWindow => new(_haContext, "binary_sensor.lillebrors_vaerelse_open_window");
    ///<summary>Ebbes værelse Overlay</summary>
    public BinarySensorEntity LillebrorsVaerelseOverlay => new(_haContext, "binary_sensor.lillebrors_vaerelse_overlay");
    ///<summary>Ebbes værelse Power</summary>
    public BinarySensorEntity LillebrorsVaerelsePower => new(_haContext, "binary_sensor.lillebrors_vaerelse_power");
    ///<summary>nextcloud_system_debug</summary>
    public BinarySensorEntity NextcloudSystemDebug => new(_haContext, "binary_sensor.nextcloud_system_debug");
    ///<summary>nextcloud_system_enable_avatars</summary>
    public BinarySensorEntity NextcloudSystemEnableAvatars => new(_haContext, "binary_sensor.nextcloud_system_enable_avatars");
    ///<summary>nextcloud_system_enable_previews</summary>
    public BinarySensorEntity NextcloudSystemEnablePreviews => new(_haContext, "binary_sensor.nextcloud_system_enable_previews");
    ///<summary>nextcloud_system_filelocking.enabled</summary>
    public BinarySensorEntity NextcloudSystemFilelockingEnabled => new(_haContext, "binary_sensor.nextcloud_system_filelocking_enabled");
    ///<summary>Nogen hjemme</summary>
    public BinarySensorEntity NogenHjemme => new(_haContext, "binary_sensor.nogen_hjemme");
    ///<summary>olive_tree_branch_state</summary>
    public BinarySensorEntity OliveTreeBranchState => new(_haContext, "binary_sensor.olive_tree_branch_state");
    ///<summary>ONEPLUS A3003 Is Charging</summary>
    public BinarySensorEntity OneplusA3003IsCharging => new(_haContext, "binary_sensor.oneplus_a3003_is_charging");
    ///<summary>ONEPLUS A3003 Is Charging</summary>
    public BinarySensorEntity OneplusA3003IsCharging2 => new(_haContext, "binary_sensor.oneplus_a3003_is_charging_2");
    ///<summary>Partial: Felena Tassel RGBW 1</summary>
    public BinarySensorEntity PartialFelenaTasselRgbw1UpdateAvailable => new(_haContext, "binary_sensor.partial_felena_tassel_rgbw_1_update_available");
    ///<summary>Partial: Felena Tassel RGBW 2</summary>
    public BinarySensorEntity PartialFelenaTasselRgbw2UpdateAvailable => new(_haContext, "binary_sensor.partial_felena_tassel_rgbw_2_update_available");
    ///<summary>Partial: Felena Tassel RGBW 3</summary>
    public BinarySensorEntity PartialFelenaTasselRgbw3UpdateAvailable => new(_haContext, "binary_sensor.partial_felena_tassel_rgbw_3_update_available");
    ///<summary>Partial: Køkkenvask 1</summary>
    public BinarySensorEntity PartialKokkenvask1UpdateAvailable => new(_haContext, "binary_sensor.partial_kokkenvask_1_update_available");
    ///<summary>Partial: Toilet (vindue)</summary>
    public BinarySensorEntity PartialToiletVindueUpdateAvailable => new(_haContext, "binary_sensor.partial_toilet_vindue_update_available");
    ///<summary>Renovation</summary>
    public BinarySensorEntity Renovation => new(_haContext, "binary_sensor.renovation");
    ///<summary>Roars værelse Early start</summary>
    public BinarySensorEntity RoarsVaerelseEarlyStart => new(_haContext, "binary_sensor.roars_vaerelse_early_start");
    ///<summary>Roars værelse Connectivity</summary>
    public BinarySensorEntity RoarsVaerelseLink => new(_haContext, "binary_sensor.roars_vaerelse_link");
    ///<summary>Roars værelse Window</summary>
    public BinarySensorEntity RoarsVaerelseOpenWindow => new(_haContext, "binary_sensor.roars_vaerelse_open_window");
    ///<summary>Roars værelse Overlay</summary>
    public BinarySensorEntity RoarsVaerelseOverlay => new(_haContext, "binary_sensor.roars_vaerelse_overlay");
    ///<summary>Roars værelse Power</summary>
    public BinarySensorEntity RoarsVaerelsePower => new(_haContext, "binary_sensor.roars_vaerelse_power");
    ///<summary>Mop attached</summary>
    public BinarySensorEntity RoborockS5MaxMopAttached => new(_haContext, "binary_sensor.roborock_s5_max_mop_attached");
    ///<summary>Water box attached</summary>
    public BinarySensorEntity RoborockS5MaxWaterBoxAttached => new(_haContext, "binary_sensor.roborock_s5_max_water_box_attached");
    ///<summary>Røgalarm: Køkken Battery</summary>
    public BinarySensorEntity RogalarmKokkenBatteryLow => new(_haContext, "binary_sensor.rogalarm_kokken_battery_low");
    ///<summary>Røgalarm: Køkken Fault alarm</summary>
    public BinarySensorEntity RogalarmKokkenFaultAlarm => new(_haContext, "binary_sensor.rogalarm_kokken_fault_alarm");
    ///<summary>Røgalarm: Køkken Smoke</summary>
    public BinarySensorEntity RogalarmKokkenSmoke => new(_haContext, "binary_sensor.rogalarm_kokken_smoke");
    ///<summary>RPi Power status</summary>
    public BinarySensorEntity RpiPowerStatus => new(_haContext, "binary_sensor.rpi_power_status");
    ///<summary>RU0667616768 Battery</summary>
    public BinarySensorEntity Ru0667616768BatteryState => new(_haContext, "binary_sensor.ru0667616768_battery_state");
    ///<summary>RU0667616768 Connection state</summary>
    public BinarySensorEntity Ru0667616768ConnectionState => new(_haContext, "binary_sensor.ru0667616768_connection_state");
    ///<summary>Soveværelse Early start</summary>
    public BinarySensorEntity SovevaerelseEarlyStart => new(_haContext, "binary_sensor.sovevaerelse_early_start");
    ///<summary>Soveværelse Connectivity</summary>
    public BinarySensorEntity SovevaerelseLink => new(_haContext, "binary_sensor.sovevaerelse_link");
    ///<summary>Soveværelse Window</summary>
    public BinarySensorEntity SovevaerelseOpenWindow => new(_haContext, "binary_sensor.sovevaerelse_open_window");
    ///<summary>Soveværelse Overlay</summary>
    public BinarySensorEntity SovevaerelseOverlay => new(_haContext, "binary_sensor.sovevaerelse_overlay");
    ///<summary>Soveværelse Power</summary>
    public BinarySensorEntity SovevaerelsePower => new(_haContext, "binary_sensor.sovevaerelse_power");
    ///<summary>Stue Early start</summary>
    public BinarySensorEntity StueEarlyStart => new(_haContext, "binary_sensor.stue_early_start");
    ///<summary>Stue Connectivity</summary>
    public BinarySensorEntity StueLink => new(_haContext, "binary_sensor.stue_link");
    ///<summary>Stue Window</summary>
    public BinarySensorEntity StueOpenWindow => new(_haContext, "binary_sensor.stue_open_window");
    ///<summary>Stue Overlay</summary>
    public BinarySensorEntity StueOverlay => new(_haContext, "binary_sensor.stue_overlay");
    ///<summary>Stue Power</summary>
    public BinarySensorEntity StuePower => new(_haContext, "binary_sensor.stue_power");
    ///<summary>Termostat i stue (højre) Battery</summary>
    public BinarySensorEntity TermostatIStueHojreBatteryState => new(_haContext, "binary_sensor.termostat_i_stue_hojre_battery_state");
    ///<summary>Termostat i stue (højre) Connection state</summary>
    public BinarySensorEntity TermostatIStueHojreConnectionState => new(_haContext, "binary_sensor.termostat_i_stue_hojre_connection_state");
    ///<summary>Termostat i stue (midt) Battery state</summary>
    public BinarySensorEntity TermostatIStueMidtBatteryState => new(_haContext, "binary_sensor.termostat_i_stue_midt_battery_state");
    ///<summary>Termostat i stue (midt) Connection state</summary>
    public BinarySensorEntity TermostatIStueMidtConnectionState => new(_haContext, "binary_sensor.termostat_i_stue_midt_connection_state");
    ///<summary>Termostat i stue (venstre) Battery state</summary>
    public BinarySensorEntity TermostatIStueVenstreBatteryState => new(_haContext, "binary_sensor.termostat_i_stue_venstre_battery_state");
    ///<summary>Termostat i stue (venstre) Connection state</summary>
    public BinarySensorEntity TermostatIStueVenstreConnectionState => new(_haContext, "binary_sensor.termostat_i_stue_venstre_connection_state");
    ///<summary>Termostat i walk-in closet battery state</summary>
    public BinarySensorEntity TermostatIWalkInClosetBatteryState => new(_haContext, "binary_sensor.termostat_i_walk_in_closet_battery_state");
    ///<summary>Termostat i walk-in closet connection state</summary>
    public BinarySensorEntity TermostatIWalkInClosetConnectionState => new(_haContext, "binary_sensor.termostat_i_walk_in_closet_connection_state");
    ///<summary>Toilet Early start</summary>
    public BinarySensorEntity ToiletEarlyStart => new(_haContext, "binary_sensor.toilet_early_start");
    ///<summary>Toilet Connectivity</summary>
    public BinarySensorEntity ToiletLink => new(_haContext, "binary_sensor.toilet_link");
    ///<summary>Toilet Window</summary>
    public BinarySensorEntity ToiletOpenWindow => new(_haContext, "binary_sensor.toilet_open_window");
    ///<summary>Toilet Overlay</summary>
    public BinarySensorEntity ToiletOverlay => new(_haContext, "binary_sensor.toilet_overlay");
    ///<summary>Toilet Power</summary>
    public BinarySensorEntity ToiletPower => new(_haContext, "binary_sensor.toilet_power");
    ///<summary>Underskabsbelysning-kontakt</summary>
    public BinarySensorEntity UnderskabsbelysningKontaktUpdateAvailable => new(_haContext, "binary_sensor.underskabsbelysning_kontakt_update_available");
    ///<summary>Updater</summary>
    public BinarySensorEntity Updater => new(_haContext, "binary_sensor.updater");
    ///<summary>Termostat i soveværelse battery state</summary>
    public BinarySensorEntity Va0006690304BatteryState => new(_haContext, "binary_sensor.va0006690304_battery_state");
    ///<summary>Termostat i soveværelse connection state</summary>
    public BinarySensorEntity Va0006690304ConnectionState => new(_haContext, "binary_sensor.va0006690304_connection_state");
    ///<summary>Termostat i køkken battery state</summary>
    public BinarySensorEntity Va0203691776BatteryState => new(_haContext, "binary_sensor.va0203691776_battery_state");
    ///<summary>Termostat i køkken connection state</summary>
    public BinarySensorEntity Va0203691776ConnectionState => new(_haContext, "binary_sensor.va0203691776_connection_state");
    ///<summary>Termostat på Ebbes værelse battery state</summary>
    public BinarySensorEntity Va0846141952BatteryState => new(_haContext, "binary_sensor.va0846141952_battery_state");
    ///<summary>Termostat på Ebbes værelse connection state</summary>
    public BinarySensorEntity Va0846141952ConnectionState => new(_haContext, "binary_sensor.va0846141952_connection_state");
    ///<summary>Termostat i gang battery state</summary>
    public BinarySensorEntity Va2590972416BatteryState => new(_haContext, "binary_sensor.va2590972416_battery_state");
    ///<summary>Termostat i gang connection state</summary>
    public BinarySensorEntity Va2590972416ConnectionState => new(_haContext, "binary_sensor.va2590972416_connection_state");
    ///<summary>Termostat på Roars værelse battery state</summary>
    public BinarySensorEntity Va2708412928BatteryState => new(_haContext, "binary_sensor.va2708412928_battery_state");
    ///<summary>Termostat på Roars værelse connection state</summary>
    public BinarySensorEntity Va2708412928ConnectionState => new(_haContext, "binary_sensor.va2708412928_connection_state");
    ///<summary>Termostat på toilet battery state</summary>
    public BinarySensorEntity Va3228506624BatteryState => new(_haContext, "binary_sensor.va3228506624_battery_state");
    ///<summary>Termostat på toilet connection state</summary>
    public BinarySensorEntity Va3228506624ConnectionState => new(_haContext, "binary_sensor.va3228506624_connection_state");
    ///<summary>Valder</summary>
    public BinarySensorEntity ValderUpdateAvailable => new(_haContext, "binary_sensor.valder_update_available");
    ///<summary>Vindue: Bryggers Door</summary>
    public BinarySensorEntity VindueBryggersContact => new(_haContext, "binary_sensor.vindue_bryggers_contact");
    ///<summary>Vindue: Ebbe Door</summary>
    public BinarySensorEntity VindueEbbeContact => new(_haContext, "binary_sensor.vindue_ebbe_contact");
    ///<summary>Vindue: Roar Door</summary>
    public BinarySensorEntity VindueRoarContact => new(_haContext, "binary_sensor.vindue_roar_contact");
    ///<summary>Walk-in-closet-gardin Charging status</summary>
    public BinarySensorEntity WalkInClosetGardinChargingStatus => new(_haContext, "binary_sensor.walk_in_closet_gardin_charging_status");
    ///<summary>Walk-in-closet-gardin Running</summary>
    public BinarySensorEntity WalkInClosetGardinRunning => new(_haContext, "binary_sensor.walk_in_closet_gardin_running");
    ///<summary>Walk-in-closet-kontakt</summary>
    public BinarySensorEntity WalkInClosetKontaktUpdateAvailable => new(_haContext, "binary_sensor.walk_in_closet_kontakt_update_available");
    ///<summary>Walk-in-closet-shortcut</summary>
    public BinarySensorEntity WalkInClosetShortcutUpdateAvailable => new(_haContext, "binary_sensor.walk_in_closet_shortcut_update_available");
    ///<summary>XR500 (Gateway) WAN status</summary>
    public BinarySensorEntity Xr500GatewayWanStatus => new(_haContext, "binary_sensor.xr500_gateway_wan_status");
    ///<summary>Zigbee2MQTT Bridge Connection state</summary>
    public BinarySensorEntity Zigbee2mqttBridgeConnectionState => new(_haContext, "binary_sensor.zigbee2mqtt_bridge_connection_state");
    ///<summary>Renault Zoe Charging</summary>
    public BinarySensorEntity ZoeCharging => new(_haContext, "binary_sensor.zoe_charging");
    ///<summary>Renault Zoe HVAC</summary>
    public BinarySensorEntity ZoeHvac => new(_haContext, "binary_sensor.zoe_hvac");
    ///<summary>Renault Zoe Plug</summary>
    public BinarySensorEntity ZoePluggedIn => new(_haContext, "binary_sensor.zoe_plugged_in");
}

public partial class ButtonEntities
{
    private readonly IHaContext _haContext;
    public ButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Ballon Identify</summary>
    public ButtonEntity BallonIdentify => new(_haContext, "button.ballon_identify");
    ///<summary>Bryggers Identify</summary>
    public ButtonEntity BryggersIdentify2 => new(_haContext, "button.bryggers_identify_2");
    ///<summary>Ebbe-kontakt Identify</summary>
    public ButtonEntity EbbeKontaktIdentify => new(_haContext, "button.ebbe_kontakt_identify");
    ///<summary>Flowerpot VP1 Identify</summary>
    public ButtonEntity FlowerpotVp1Identify2 => new(_haContext, "button.flowerpot_vp1_identify_2");
    ///<summary>Garage-lanterne Identify</summary>
    public ButtonEntity GarageLanterneIdentify => new(_haContext, "button.garage_lanterne_identify");
    ///<summary>Garageport-knap, bil Identify</summary>
    public ButtonEntity GarageportKnapBilIdentify => new(_haContext, "button.garageport_knap_bil_identify");
    ///<summary>Restart baseboard</summary>
    public ButtonEntity GrasputinRestartBaseboard => new(_haContext, "button.grasputin_restart_baseboard");
    ///<summary>Grasputin Start cutting edge</summary>
    public ButtonEntity GrasputinStartCuttingEdge => new(_haContext, "button.grasputin_start_cutting_edge");
    ///<summary>Kanin-astronaut Identify</summary>
    public ButtonEntity KaninAstronautIdentify => new(_haContext, "button.kanin_astronaut_identify");
    ///<summary>Køkkenvask-kontakt Identify</summary>
    public ButtonEntity KokkenvaskKontaktIdentify => new(_haContext, "button.kokkenvask_kontakt_identify");
    ///<summary>Måne Identify</summary>
    public ButtonEntity ManeIdentify => new(_haContext, "button.mane_identify");
    ///<summary>Partial: Aläng 1 Identify</summary>
    public ButtonEntity PartialAlang1Identify => new(_haContext, "button.partial_alang_1_identify");
    ///<summary>Partial: Aläng 2 Identify</summary>
    public ButtonEntity PartialAlang2Identify => new(_haContext, "button.partial_alang_2_identify");
    ///<summary>Partial: Aläng 3 Identify</summary>
    public ButtonEntity PartialAlang3Identify => new(_haContext, "button.partial_alang_3_identify");
    ///<summary>Partial: Entré (dør) Identify</summary>
    public ButtonEntity PartialEntreDorIdentify => new(_haContext, "button.partial_entre_dor_identify");
    ///<summary>Partial: Entré (midt) Identify</summary>
    public ButtonEntity PartialEntreMidtIdentify => new(_haContext, "button.partial_entre_midt_identify");
    ///<summary>Partial: Entré (stue) Identify</summary>
    public ButtonEntity PartialEntreStueIdentify => new(_haContext, "button.partial_entre_stue_identify");
    ///<summary>Partial: Felena Tassel RGBW 1 Identify</summary>
    public ButtonEntity PartialFelenaTasselRgbw1Identify => new(_haContext, "button.partial_felena_tassel_rgbw_1_identify");
    ///<summary>Partial: Felena Tassel RGBW 2 Identify</summary>
    public ButtonEntity PartialFelenaTasselRgbw2Identify => new(_haContext, "button.partial_felena_tassel_rgbw_2_identify");
    ///<summary>Partial: Felena Tassel RGBW 3 Identify</summary>
    public ButtonEntity PartialFelenaTasselRgbw3Identify => new(_haContext, "button.partial_felena_tassel_rgbw_3_identify");
    ///<summary>Partial: Fordelingsgang (køkken) Identify</summary>
    public ButtonEntity PartialFordelingsgangKokkenIdentify => new(_haContext, "button.partial_fordelingsgang_kokken_identify");
    ///<summary>Partial: Fordelingsgang (midt) Identify</summary>
    public ButtonEntity PartialFordelingsgangMidtIdentify => new(_haContext, "button.partial_fordelingsgang_midt_identify");
    ///<summary>Partial: Fordelingsgang (værelser) Identify</summary>
    public ButtonEntity PartialFordelingsgangVaerelserIdentify => new(_haContext, "button.partial_fordelingsgang_vaerelser_identify");
    ///<summary>Partial: Køkkenvask 1 Identify</summary>
    public ButtonEntity PartialKokkenvask1Identify => new(_haContext, "button.partial_kokkenvask_1_identify");
    ///<summary>Partial: Køkkenvask 2 Identify</summary>
    public ButtonEntity PartialKokkenvask2Identify => new(_haContext, "button.partial_kokkenvask_2_identify");
    ///<summary>Partial: Køkkenvask 3 Identify</summary>
    public ButtonEntity PartialKokkenvask3Identify => new(_haContext, "button.partial_kokkenvask_3_identify");
    ///<summary>Roar-kontakt Identify</summary>
    public ButtonEntity RoarKontaktIdentify => new(_haContext, "button.roar_kontakt_identify");
    ///<summary>Reset filter</summary>
    public ButtonEntity RoborockS5MaxResetFilter => new(_haContext, "button.roborock_s5_max_reset_filter");
    ///<summary>Reset main brush</summary>
    public ButtonEntity RoborockS5MaxResetMainBrush => new(_haContext, "button.roborock_s5_max_reset_main_brush");
    ///<summary>Reset sensor dirty</summary>
    public ButtonEntity RoborockS5MaxResetSensorDirty => new(_haContext, "button.roborock_s5_max_reset_sensor_dirty");
    ///<summary>Reset side brush</summary>
    public ButtonEntity RoborockS5MaxResetSideBrush => new(_haContext, "button.roborock_s5_max_reset_side_brush");
    ///<summary>Seedbox Scan clients</summary>
    public ButtonEntity ScanClientsSeedbox => new(_haContext, "button.scan_clients_seedbox");
    ///<summary>Renault Zoe Start air conditioner</summary>
    public ButtonEntity StartAirConditioner => new(_haContext, "button.start_air_conditioner");
    ///<summary>Renault Zoe Start charge</summary>
    public ButtonEntity StartCharge => new(_haContext, "button.start_charge");
    ///<summary>Renault Zoe Stop charge</summary>
    public ButtonEntity StopCharge => new(_haContext, "button.stop_charge");
    ///<summary>Google Assistant Synchronize devices</summary>
    public ButtonEntity SynchronizeDevices => new(_haContext, "button.synchronize_devices");
    ///<summary>Toilet-kontakt Identify</summary>
    public ButtonEntity ToiletKontaktIdentify => new(_haContext, "button.toilet_kontakt_identify");
    ///<summary>Underskabsbelysning-kontakt Identify</summary>
    public ButtonEntity UnderskabsbelysningKontaktIdentify => new(_haContext, "button.underskabsbelysning_kontakt_identify");
    ///<summary>Valder Identify</summary>
    public ButtonEntity ValderIdentify2 => new(_haContext, "button.valder_identify_2");
    ///<summary>Vinke-astronaut Identify</summary>
    public ButtonEntity VinkeAstronautIdentify => new(_haContext, "button.vinke_astronaut_identify");
    ///<summary>Walk-in-closet Identify</summary>
    public ButtonEntity WalkInClosetIdentify => new(_haContext, "button.walk_in_closet_identify");
    ///<summary>Walk-in-closet-kontakt Identify</summary>
    public ButtonEntity WalkInClosetKontaktIdentify => new(_haContext, "button.walk_in_closet_kontakt_identify");
    ///<summary>Walk-in-closet-shortcut Identify</summary>
    public ButtonEntity WalkInClosetShortcutIdentify => new(_haContext, "button.walk_in_closet_shortcut_identify");
    ///<summary>XR500 Restart</summary>
    public ButtonEntity Xr500Reboot => new(_haContext, "button.xr500_reboot");
    ///<summary>Zigbee2MQTT Bridge Restart</summary>
    public ButtonEntity Zigbee2mqttBridgeRestart => new(_haContext, "button.zigbee2mqtt_bridge_restart");
}

public partial class CameraEntities
{
    private readonly IHaContext _haContext;
    public CameraEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Dørklokke</summary>
    public CameraEntity Hoveddor => new(_haContext, "camera.hoveddor");
    ///<summary>Clear</summary>
    public CameraEntity IndkorselClear => new(_haContext, "camera.indkorsel_clear");
    ///<summary>Fluent</summary>
    public CameraEntity IndkorselFluent => new(_haContext, "camera.indkorsel_fluent");
    ///<summary>Xiaomi Cloud Map Extractor</summary>
    public CameraEntity XiaomiCloudMapExtractor => new(_haContext, "camera.xiaomi_cloud_map_extractor");
}

public partial class ClimateEntities
{
    private readonly IHaContext _haContext;
    public ClimateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Badeværelse</summary>
    public ClimateEntity Badevaerelse => new(_haContext, "climate.badevaerelse");
    ///<summary>Køkken / Gang</summary>
    public ClimateEntity KokkenGang => new(_haContext, "climate.kokken_gang");
    ///<summary>Ebbes værelse</summary>
    public ClimateEntity LillebrorsVaerelse => new(_haContext, "climate.lillebrors_vaerelse");
    ///<summary>Roars værelse</summary>
    public ClimateEntity RoarsVaerelse => new(_haContext, "climate.roars_vaerelse");
    ///<summary>Soveværelse</summary>
    public ClimateEntity Sovevaerelse => new(_haContext, "climate.sovevaerelse");
    ///<summary>Stue</summary>
    public ClimateEntity Stue => new(_haContext, "climate.stue");
    ///<summary>Toilet</summary>
    public ClimateEntity Toilet => new(_haContext, "climate.toilet");
}

public partial class CoverEntities
{
    private readonly IHaContext _haContext;
    public CoverEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Walk-in-closet-gardin</summary>
    public CoverEntity WalkInClosetGardin => new(_haContext, "cover.walk_in_closet_gardin");
}

public partial class DeviceTrackerEntities
{
    private readonly IHaContext _haContext;
    public DeviceTrackerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>ANNALINASIPHONE</summary>
    public DeviceTrackerEntity Annalinasiphone => new(_haContext, "device_tracker.annalinasiphone");
    ///<summary>Børnenes telefon</summary>
    public DeviceTrackerEntity BornenesTelefon => new(_haContext, "device_tracker.bornenes_telefon");
    ///<summary>Indkorsel</summary>
    public DeviceTrackerEntity Camera1 => new(_haContext, "device_tracker.camera1");
    ///<summary>Candy Simply-Fi Oven</summary>
    public DeviceTrackerEntity CandySimplyFiOven => new(_haContext, "device_tracker.candy_simply_fi_oven");
    ///<summary>CEED Location</summary>
    public DeviceTrackerEntity CeedLocation => new(_haContext, "device_tracker.ceed_location");
    ///<summary>CHROMECAST</summary>
    public DeviceTrackerEntity Chromecast => new(_haContext, "device_tracker.chromecast");
    ///<summary>CHROMECAST</summary>
    public DeviceTrackerEntity Chromecast2 => new(_haContext, "device_tracker.chromecast_2");
    ///<summary>CHROMECAST</summary>
    public DeviceTrackerEntity Chromecast3 => new(_haContext, "device_tracker.chromecast_3");
    ///<summary>CHROMECAST</summary>
    public DeviceTrackerEntity Chromecast4 => new(_haContext, "device_tracker.chromecast_4");
    ///<summary>DESKTOP-9T9VAUC</summary>
    public DeviceTrackerEntity Desktop9t9vauc => new(_haContext, "device_tracker.desktop_9t9vauc");
    ///<summary>DK-KLE-850G5</summary>
    public DeviceTrackerEntity DkKle850g5 => new(_haContext, "device_tracker.dk_kle_850g5");
    ///<summary>DK-KLE-FURYZ15</summary>
    public DeviceTrackerEntity DkKleFuryz15 => new(_haContext, "device_tracker.dk_kle_furyz15");
    ///<summary>DK-KLE-FURYZ15</summary>
    public DeviceTrackerEntity DkKleFuryz152 => new(_haContext, "device_tracker.dk_kle_furyz15_2");
    ///<summary>ERIK--IPAD</summary>
    public DeviceTrackerEntity ErikIpad => new(_haContext, "device_tracker.erik_ipad");
    ///<summary>ERIK--IPAD</summary>
    public DeviceTrackerEntity ErikIpad2 => new(_haContext, "device_tracker.erik_ipad_2");
    ///<summary>ERIKS-IPHONE</summary>
    public DeviceTrackerEntity EriksIphone => new(_haContext, "device_tracker.eriks_iphone");
    ///<summary>ERIKS-IPHONE</summary>
    public DeviceTrackerEntity EriksIphone2 => new(_haContext, "device_tracker.eriks_iphone_2");
    ///<summary>ESP_10269B</summary>
    public DeviceTrackerEntity Esp10269b => new(_haContext, "device_tracker.esp_10269b");
    ///<summary>ESP_207210</summary>
    public DeviceTrackerEntity Esp207210 => new(_haContext, "device_tracker.esp_207210");
    ///<summary>ESP_207210</summary>
    public DeviceTrackerEntity Esp2072102 => new(_haContext, "device_tracker.esp_207210_2");
    ///<summary>ESP_2074B2</summary>
    public DeviceTrackerEntity Esp2074b2 => new(_haContext, "device_tracker.esp_2074b2");
    ///<summary>ESP_DBBFC1</summary>
    public DeviceTrackerEntity EspDbbfc1 => new(_haContext, "device_tracker.esp_dbbfc1");
    ///<summary>ESP_EB80F3</summary>
    public DeviceTrackerEntity EspEb80f3 => new(_haContext, "device_tracker.esp_eb80f3");
    ///<summary>GALAXY-S20</summary>
    public DeviceTrackerEntity GalaxyS20 => new(_haContext, "device_tracker.galaxy_s20");
    ///<summary>GALAXY-S8</summary>
    public DeviceTrackerEntity GalaxyS8 => new(_haContext, "device_tracker.galaxy_s8");
    ///<summary>GALAXY-S9</summary>
    public DeviceTrackerEntity GalaxyS9 => new(_haContext, "device_tracker.galaxy_s9");
    ///<summary>GALAXY-S9</summary>
    public DeviceTrackerEntity GalaxyS92 => new(_haContext, "device_tracker.galaxy_s9_2");
    ///<summary>GALAXY-S9</summary>
    public DeviceTrackerEntity GalaxyS93 => new(_haContext, "device_tracker.galaxy_s9_3");
    ///<summary>GALAXY-S9</summary>
    public DeviceTrackerEntity GalaxyS94 => new(_haContext, "device_tracker.galaxy_s9_4");
    ///<summary>GALAXY-S9</summary>
    public DeviceTrackerEntity GalaxyS95 => new(_haContext, "device_tracker.galaxy_s9_5");
    ///<summary>GALAXY-S9</summary>
    public DeviceTrackerEntity GalaxyS96 => new(_haContext, "device_tracker.galaxy_s9_6");
    ///<summary>GALAXY-TAB-S3</summary>
    public DeviceTrackerEntity GalaxyTabS3 => new(_haContext, "device_tracker.galaxy_tab_s3");
    ///<summary>GALAXY-TAB-S3</summary>
    public DeviceTrackerEntity GalaxyTabS32 => new(_haContext, "device_tracker.galaxy_tab_s3_2");
    ///<summary>Galaxy Watch4 (WLSW)</summary>
    public DeviceTrackerEntity GalaxyWatch4Wlsw => new(_haContext, "device_tracker.galaxy_watch4_wlsw");
    ///<summary>GAMERGRO</summary>
    public DeviceTrackerEntity Gamergro => new(_haContext, "device_tracker.gamergro");
    ///<summary>Gro</summary>
    public DeviceTrackerEntity Gro => new(_haContext, "device_tracker.gro");
    ///<summary>Gros backup-telefon</summary>
    public DeviceTrackerEntity GrosBackupTelefon => new(_haContext, "device_tracker.gros_backup_telefon");
    ///<summary>Gros backup-telefon</summary>
    public DeviceTrackerEntity GrosBackupTelefon2 => new(_haContext, "device_tracker.gros_backup_telefon_2");
    ///<summary>GROS-GALAXY-S9</summary>
    public DeviceTrackerEntity GrosGalaxyS9 => new(_haContext, "device_tracker.gros_galaxy_s9");
    ///<summary>GROS-S20</summary>
    public DeviceTrackerEntity GrosS20 => new(_haContext, "device_tracker.gros_s20");
    ///<summary>GROS-S20</summary>
    public DeviceTrackerEntity GrosS202 => new(_haContext, "device_tracker.gros_s20_2");
    ///<summary>HF-LPB100</summary>
    public DeviceTrackerEntity HfLpb100 => new(_haContext, "device_tracker.hf_lpb100");
    ///<summary>HF-LPB100</summary>
    public DeviceTrackerEntity HfLpb1002 => new(_haContext, "device_tracker.hf_lpb100_2");
    ///<summary>HOMEASSISTANT</summary>
    public DeviceTrackerEntity Homeassistant => new(_haContext, "device_tracker.homeassistant");
    ///<summary>HOMEASSISTANT</summary>
    public DeviceTrackerEntity Homeassistant2 => new(_haContext, "device_tracker.homeassistant_2");
    ///<summary>HOMEASSISTANT</summary>
    public DeviceTrackerEntity Homeassistant3 => new(_haContext, "device_tracker.homeassistant_3");
    ///<summary>INGE-M-LS-IPAD</summary>
    public DeviceTrackerEntity IngeMLsIpad => new(_haContext, "device_tracker.inge_m_ls_ipad");
    ///<summary>INGE-M-LS-IPAD</summary>
    public DeviceTrackerEntity IngeMLsIpad2 => new(_haContext, "device_tracker.inge_m_ls_ipad_2");
    ///<summary>INGEMLSIPHONE</summary>
    public DeviceTrackerEntity Ingemlsiphone => new(_haContext, "device_tracker.ingemlsiphone");
    ///<summary>INGEMLSIPHONE</summary>
    public DeviceTrackerEntity Ingemlsiphone2 => new(_haContext, "device_tracker.ingemlsiphone_2");
    ///<summary>IPHONE</summary>
    public DeviceTrackerEntity Iphone => new(_haContext, "device_tracker.iphone");
    ///<summary>Kristoffer - iPhone</summary>
    public DeviceTrackerEntity KristofferIphone => new(_haContext, "device_tracker.kristoffer_iphone");
    ///<summary>Kristoffers Galaxy S20 Ultra</summary>
    public DeviceTrackerEntity KristoffersGalaxyS20Ultra => new(_haContext, "device_tracker.kristoffers_galaxy_s20_ultra");
    ///<summary>KRISTOFFERS-GALAXY-S9</summary>
    public DeviceTrackerEntity KristoffersGalaxyS9 => new(_haContext, "device_tracker.kristoffers_galaxy_s9");
    ///<summary>KRISTOFFERS-GALAXY-S9</summary>
    public DeviceTrackerEntity KristoffersGalaxyS92 => new(_haContext, "device_tracker.kristoffers_galaxy_s9_2");
    ///<summary>KRISTOFFERS-GALAXY-S9</summary>
    public DeviceTrackerEntity KristoffersGalaxyS93 => new(_haContext, "device_tracker.kristoffers_galaxy_s9_3");
    ///<summary>KRISTOFFERS-GALAXY-S9</summary>
    public DeviceTrackerEntity KristoffersGalaxyS94 => new(_haContext, "device_tracker.kristoffers_galaxy_s9_4");
    ///<summary>Kristoffers S20</summary>
    public DeviceTrackerEntity KristoffersS20 => new(_haContext, "device_tracker.kristoffers_s20");
    ///<summary>KRISTOFFERS-S20-ULTRA</summary>
    public DeviceTrackerEntity KristoffersS20Ultra => new(_haContext, "device_tracker.kristoffers_s20_ultra");
    ///<summary>KRISTOFFERS-S20-ULTRA</summary>
    public DeviceTrackerEntity KristoffersS20Ultra2 => new(_haContext, "device_tracker.kristoffers_s20_ultra_2");
    ///<summary>(null)</summary>
    public DeviceTrackerEntity KristoffersS20Ultra3 => new(_haContext, "device_tracker.kristoffers_s20_ultra_3");
    ///<summary>Kristoffers S9</summary>
    public DeviceTrackerEntity KristoffersS9 => new(_haContext, "device_tracker.kristoffers_s9");
    ///<summary>LINDA</summary>
    public DeviceTrackerEntity Linda => new(_haContext, "device_tracker.linda");
    ///<summary>LOUISELSIPHONE</summary>
    public DeviceTrackerEntity Louiselsiphone => new(_haContext, "device_tracker.louiselsiphone");
    ///<summary>LTSKB0411</summary>
    public DeviceTrackerEntity Ltskb0411 => new(_haContext, "device_tracker.ltskb0411");
    ///<summary>LTSKB0429</summary>
    public DeviceTrackerEntity Ltskb0429 => new(_haContext, "device_tracker.ltskb0429");
    ///<summary>LTSKB0429</summary>
    public DeviceTrackerEntity Ltskb04292 => new(_haContext, "device_tracker.ltskb0429_2");
    ///<summary>MORTENS-IPAD</summary>
    public DeviceTrackerEntity MortensIpad => new(_haContext, "device_tracker.mortens_ipad");
    ///<summary>NEST-HELLO-E85C</summary>
    public DeviceTrackerEntity NestHelloE85c => new(_haContext, "device_tracker.nest_hello_e85c");
    ///<summary>NINTENDO WII U</summary>
    public DeviceTrackerEntity NintendoWiiU => new(_haContext, "device_tracker.nintendo_wii_u");
    ///<summary>NINTENDO WII U</summary>
    public DeviceTrackerEntity NintendoWiiU2 => new(_haContext, "device_tracker.nintendo_wii_u_2");
    ///<summary>(null)</summary>
    public DeviceTrackerEntity Null => new(_haContext, "device_tracker.null");
    ///<summary>(null)</summary>
    public DeviceTrackerEntity Null2 => new(_haContext, "device_tracker.null_2");
    ///<summary>(null)</summary>
    public DeviceTrackerEntity Null3 => new(_haContext, "device_tracker.null_3");
    ///<summary>(null)</summary>
    public DeviceTrackerEntity Null4 => new(_haContext, "device_tracker.null_4");
    ///<summary>ONEPLUS_3T</summary>
    public DeviceTrackerEntity Oneplus3t => new(_haContext, "device_tracker.oneplus_3t");
    ///<summary>OnePlus 3T</summary>
    public DeviceTrackerEntity Oneplus3t2 => new(_haContext, "device_tracker.oneplus_3t_2");
    ///<summary>ONEPLUS A3003</summary>
    public DeviceTrackerEntity OneplusA3003 => new(_haContext, "device_tracker.oneplus_a3003");
    ///<summary>ONEPLUS A3003</summary>
    public DeviceTrackerEntity OneplusA30032 => new(_haContext, "device_tracker.oneplus_a3003_2");
    ///<summary>PEROHS-IPHONE</summary>
    public DeviceTrackerEntity PerohsIphone => new(_haContext, "device_tracker.perohs_iphone");
    ///<summary>PlexSovevaerelse</summary>
    public DeviceTrackerEntity Plexsovevaerelse => new(_haContext, "device_tracker.plexsovevaerelse");
    ///<summary>PlexSovevaerelse</summary>
    public DeviceTrackerEntity Plexsovevaerelse2 => new(_haContext, "device_tracker.plexsovevaerelse_2");
    ///<summary>PRINTER</summary>
    public DeviceTrackerEntity Printer => new(_haContext, "device_tracker.printer");
    ///<summary>printer</summary>
    public DeviceTrackerEntity Printer2 => new(_haContext, "device_tracker.printer_2");
    ///<summary>RE450</summary>
    public DeviceTrackerEntity Re450 => new(_haContext, "device_tracker.re450");
    ///<summary>RE450</summary>
    public DeviceTrackerEntity Re4502 => new(_haContext, "device_tracker.re450_2");
    ///<summary>ROARS-GALAXY-S9</summary>
    public DeviceTrackerEntity RoarsGalaxyS9 => new(_haContext, "device_tracker.roars_galaxy_s9");
    ///<summary>ROBOTIC MOWER</summary>
    public DeviceTrackerEntity RoboticMower => new(_haContext, "device_tracker.robotic_mower");
    ///<summary>Grasputin</summary>
    public DeviceTrackerEntity RoboticMower2 => new(_haContext, "device_tracker.robotic_mower_2");
    public DeviceTrackerEntity S6937930a15c675accBdda => new(_haContext, "device_tracker.s6937930a15c675acc_bdda");
    public DeviceTrackerEntity S78f354bf382f3aa3c81fc => new(_haContext, "device_tracker.s78f354bf382f3aa3c_81fc");
    public DeviceTrackerEntity S9fc1e43d898f31bacDb8a => new(_haContext, "device_tracker.s9fc1e43d898f31bac_db8a");
    ///<summary>SAMSUNG</summary>
    public DeviceTrackerEntity Samsung => new(_haContext, "device_tracker.samsung");
    ///<summary>[TV] Samsung 7 Series (65)</summary>
    public DeviceTrackerEntity Samsung2 => new(_haContext, "device_tracker.samsung_2");
    ///<summary>SAMSUNG</summary>
    public DeviceTrackerEntity Samsung3 => new(_haContext, "device_tracker.samsung_3");
    ///<summary>Samsung 7 Series (65)</summary>
    public DeviceTrackerEntity Samsung7Series65 => new(_haContext, "device_tracker.samsung_7_series_65");
    ///<summary>Samsung Galaxy S8</summary>
    public DeviceTrackerEntity SamsungGalaxyS8 => new(_haContext, "device_tracker.samsung_galaxy_s8");
    public DeviceTrackerEntity Saphe => new(_haContext, "device_tracker.saphe");
    public DeviceTrackerEntity Sc8bfaff5ce07e22cc18b6 => new(_haContext, "device_tracker.sc8bfaff5ce07e22cc_18b6");
    public DeviceTrackerEntity Sd01db6144334011bc998a => new(_haContext, "device_tracker.sd01db6144334011bc_998a");
    ///<summary>SEEDBOX</summary>
    public DeviceTrackerEntity Seedbox => new(_haContext, "device_tracker.seedbox");
    ///<summary>SEEDBOX</summary>
    public DeviceTrackerEntity Seedbox2 => new(_haContext, "device_tracker.seedbox_2");
    ///<summary>Gros Galaxy S20+</summary>
    public DeviceTrackerEntity SmG985f => new(_haContext, "device_tracker.sm_g985f");
    ///<summary>SM-R860</summary>
    public DeviceTrackerEntity SmR860 => new(_haContext, "device_tracker.sm_r860");
    ///<summary>SONOSZP</summary>
    public DeviceTrackerEntity Sonoszp => new(_haContext, "device_tracker.sonoszp");
    ///<summary>SONOSZP</summary>
    public DeviceTrackerEntity Sonoszp2 => new(_haContext, "device_tracker.sonoszp_2");
    ///<summary>SOVE</summary>
    public DeviceTrackerEntity Sove => new(_haContext, "device_tracker.sove");
    ///<summary>SOVE</summary>
    public DeviceTrackerEntity Sove2 => new(_haContext, "device_tracker.sove_2");
    ///<summary>STUFFS-XPS15</summary>
    public DeviceTrackerEntity StuffsXps15 => new(_haContext, "device_tracker.stuffs_xps15");
    ///<summary>STUFFS-XPS15</summary>
    public DeviceTrackerEntity StuffsXps152 => new(_haContext, "device_tracker.stuffs_xps15_2");
    ///<summary>TADO</summary>
    public DeviceTrackerEntity Tado => new(_haContext, "device_tracker.tado");
    ///<summary>TADO</summary>
    public DeviceTrackerEntity Tado2 => new(_haContext, "device_tracker.tado_2");
    ///<summary>TuyaDeathStar</summary>
    public DeviceTrackerEntity Tuyadeathstar => new(_haContext, "device_tracker.tuyadeathstar");
    ///<summary>TuyaGaragedorSensor</summary>
    public DeviceTrackerEntity Tuyagaragedorsensor => new(_haContext, "device_tracker.tuyagaragedorsensor");
    ///<summary>TuyaIndkorselKontakt</summary>
    public DeviceTrackerEntity Tuyaindkorselkontakt => new(_haContext, "device_tracker.tuyaindkorselkontakt");
    ///<summary>TuyaIndkorselKontakt</summary>
    public DeviceTrackerEntity Tuyaindkorselkontakt2 => new(_haContext, "device_tracker.tuyaindkorselkontakt_2");
    ///<summary>TuyaLEDRoarsSeng</summary>
    public DeviceTrackerEntity Tuyaledroarsseng => new(_haContext, "device_tracker.tuyaledroarsseng");
    ///<summary>THINGSTURN_35A3</summary>
    public DeviceTrackerEntity Tuyaledroarsseng2 => new(_haContext, "device_tracker.tuyaledroarsseng_2");
    ///<summary>TuyaLoftKontakt</summary>
    public DeviceTrackerEntity Tuyaloftkontakt => new(_haContext, "device_tracker.tuyaloftkontakt");
    ///<summary>TuyaLoftKontakt</summary>
    public DeviceTrackerEntity Tuyaloftkontakt2 => new(_haContext, "device_tracker.tuyaloftkontakt_2");
    ///<summary>TuyaLoftSovevaerelse</summary>
    public DeviceTrackerEntity Tuyaloftsovevaerelse => new(_haContext, "device_tracker.tuyaloftsovevaerelse");
    ///<summary>TuyaLysekrone1</summary>
    public DeviceTrackerEntity Tuyalysekrone1 => new(_haContext, "device_tracker.tuyalysekrone1");
    ///<summary>TuyaLysekrone2</summary>
    public DeviceTrackerEntity Tuyalysekrone2 => new(_haContext, "device_tracker.tuyalysekrone2");
    ///<summary>TuyaLysekrone3</summary>
    public DeviceTrackerEntity Tuyalysekrone3 => new(_haContext, "device_tracker.tuyalysekrone3");
    ///<summary>TuyaLysekrone4</summary>
    public DeviceTrackerEntity Tuyalysekrone4 => new(_haContext, "device_tracker.tuyalysekrone4");
    ///<summary>TuyaLysekrone5</summary>
    public DeviceTrackerEntity Tuyalysekrone5 => new(_haContext, "device_tracker.tuyalysekrone5");
    ///<summary>TuyaLysekrone6</summary>
    public DeviceTrackerEntity Tuyalysekrone6 => new(_haContext, "device_tracker.tuyalysekrone6");
    ///<summary>TuyaLysEntreMidt</summary>
    public DeviceTrackerEntity Tuyalysentremidt => new(_haContext, "device_tracker.tuyalysentremidt");
    ///<summary>TuyaLysEntreMidt</summary>
    public DeviceTrackerEntity Tuyalysentremidt2 => new(_haContext, "device_tracker.tuyalysentremidt_2");
    ///<summary>TuyaLysEntreModHoveddor</summary>
    public DeviceTrackerEntity Tuyalysentremodhoveddor => new(_haContext, "device_tracker.tuyalysentremodhoveddor");
    ///<summary>TuyaLysEntreModHoveddor</summary>
    public DeviceTrackerEntity Tuyalysentremodhoveddor2 => new(_haContext, "device_tracker.tuyalysentremodhoveddor_2");
    ///<summary>TuyaLysEntreModStue</summary>
    public DeviceTrackerEntity Tuyalysentremodstue => new(_haContext, "device_tracker.tuyalysentremodstue");
    ///<summary>TuyaLysEntreModStue</summary>
    public DeviceTrackerEntity Tuyalysentremodstue2 => new(_haContext, "device_tracker.tuyalysentremodstue_2");
    ///<summary>TuyaLysGangMidt</summary>
    public DeviceTrackerEntity Tuyalysgangmidt => new(_haContext, "device_tracker.tuyalysgangmidt");
    ///<summary>TuyaLysGangMidt</summary>
    public DeviceTrackerEntity Tuyalysgangmidt2 => new(_haContext, "device_tracker.tuyalysgangmidt_2");
    ///<summary>TuyaLysGangModKokken</summary>
    public DeviceTrackerEntity Tuyalysgangmodkokken => new(_haContext, "device_tracker.tuyalysgangmodkokken");
    ///<summary>TuyaLysGangModKokken</summary>
    public DeviceTrackerEntity Tuyalysgangmodkokken2 => new(_haContext, "device_tracker.tuyalysgangmodkokken_2");
    ///<summary>TuyaLysGangModVaerelser</summary>
    public DeviceTrackerEntity Tuyalysgangmodvaerelser => new(_haContext, "device_tracker.tuyalysgangmodvaerelser");
    ///<summary>TuyaLysGangModVaerelser</summary>
    public DeviceTrackerEntity Tuyalysgangmodvaerelser2 => new(_haContext, "device_tracker.tuyalysgangmodvaerelser_2");
    ///<summary>TuyaLysKokkenVaskH</summary>
    public DeviceTrackerEntity Tuyalyskokkenvaskh => new(_haContext, "device_tracker.tuyalyskokkenvaskh");
    ///<summary>TuyaLysKokkenVaskM</summary>
    public DeviceTrackerEntity Tuyalyskokkenvaskm => new(_haContext, "device_tracker.tuyalyskokkenvaskm");
    ///<summary>TuyaLysKokkenVaskM</summary>
    public DeviceTrackerEntity Tuyalyskokkenvaskm2 => new(_haContext, "device_tracker.tuyalyskokkenvaskm_2");
    ///<summary>TuyaLysKokkenVaskV</summary>
    public DeviceTrackerEntity Tuyalyskokkenvaskv => new(_haContext, "device_tracker.tuyalyskokkenvaskv");
    ///<summary>TuyaLysKokkenVaskV</summary>
    public DeviceTrackerEntity Tuyalyskokkenvaskv2 => new(_haContext, "device_tracker.tuyalyskokkenvaskv_2");
    ///<summary>TuyaLysOverPejsen</summary>
    public DeviceTrackerEntity Tuyalysoverpejsen => new(_haContext, "device_tracker.tuyalysoverpejsen");
    ///<summary>TuyaNatlampeRoar</summary>
    public DeviceTrackerEntity Tuyanatlamperoar => new(_haContext, "device_tracker.tuyanatlamperoar");
    ///<summary>TuyaNatlampeRoar</summary>
    public DeviceTrackerEntity Tuyanatlamperoar2 => new(_haContext, "device_tracker.tuyanatlamperoar_2");
    ///<summary>TuyaSeedboxKontakt</summary>
    public DeviceTrackerEntity Tuyaseedboxkontakt => new(_haContext, "device_tracker.tuyaseedboxkontakt");
    ///<summary>TuyaSeedboxKontakt</summary>
    public DeviceTrackerEntity Tuyaseedboxkontakt2 => new(_haContext, "device_tracker.tuyaseedboxkontakt_2");
    ///<summary>ESP_10269B</summary>
    public DeviceTrackerEntity Tuyaterrassekoleskab => new(_haContext, "device_tracker.tuyaterrassekoleskab");
    ///<summary>TuyaTerrasseKontakt</summary>
    public DeviceTrackerEntity Tuyaterrassekontakt => new(_haContext, "device_tracker.tuyaterrassekontakt");
    ///<summary>TuyaTerrasseKontakt</summary>
    public DeviceTrackerEntity Tuyaterrassekontakt2 => new(_haContext, "device_tracker.tuyaterrassekontakt_2");
    ///<summary>[TV] Samsung 7 Series (65)</summary>
    public DeviceTrackerEntity TvSamsung7Series65 => new(_haContext, "device_tracker.tv_samsung_7_series_65");
    ///<summary>TWINKLY-EDA359</summary>
    public DeviceTrackerEntity TwinklyEda359 => new(_haContext, "device_tracker.twinkly_eda359");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice => new(_haContext, "device_tracker.unnamed_device");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice10 => new(_haContext, "device_tracker.unnamed_device_10");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice11 => new(_haContext, "device_tracker.unnamed_device_11");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice12 => new(_haContext, "device_tracker.unnamed_device_12");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice13 => new(_haContext, "device_tracker.unnamed_device_13");
    ///<summary>CHROMETV</summary>
    public DeviceTrackerEntity UnnamedDevice14 => new(_haContext, "device_tracker.unnamed_device_14");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice15 => new(_haContext, "device_tracker.unnamed_device_15");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice16 => new(_haContext, "device_tracker.unnamed_device_16");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice17 => new(_haContext, "device_tracker.unnamed_device_17");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice18 => new(_haContext, "device_tracker.unnamed_device_18");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice19 => new(_haContext, "device_tracker.unnamed_device_19");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice2 => new(_haContext, "device_tracker.unnamed_device_2");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice20 => new(_haContext, "device_tracker.unnamed_device_20");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice21 => new(_haContext, "device_tracker.unnamed_device_21");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice22 => new(_haContext, "device_tracker.unnamed_device_22");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice23 => new(_haContext, "device_tracker.unnamed_device_23");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice24 => new(_haContext, "device_tracker.unnamed_device_24");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice25 => new(_haContext, "device_tracker.unnamed_device_25");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice26 => new(_haContext, "device_tracker.unnamed_device_26");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice27 => new(_haContext, "device_tracker.unnamed_device_27");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice28 => new(_haContext, "device_tracker.unnamed_device_28");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice29 => new(_haContext, "device_tracker.unnamed_device_29");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice3 => new(_haContext, "device_tracker.unnamed_device_3");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice30 => new(_haContext, "device_tracker.unnamed_device_30");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice31 => new(_haContext, "device_tracker.unnamed_device_31");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice32 => new(_haContext, "device_tracker.unnamed_device_32");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice33 => new(_haContext, "device_tracker.unnamed_device_33");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice34 => new(_haContext, "device_tracker.unnamed_device_34");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice35 => new(_haContext, "device_tracker.unnamed_device_35");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice36 => new(_haContext, "device_tracker.unnamed_device_36");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice37 => new(_haContext, "device_tracker.unnamed_device_37");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice38 => new(_haContext, "device_tracker.unnamed_device_38");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice39 => new(_haContext, "device_tracker.unnamed_device_39");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice4 => new(_haContext, "device_tracker.unnamed_device_4");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice40 => new(_haContext, "device_tracker.unnamed_device_40");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice5 => new(_haContext, "device_tracker.unnamed_device_5");
    ///<summary>Nintendo Switch</summary>
    public DeviceTrackerEntity UnnamedDevice6 => new(_haContext, "device_tracker.unnamed_device_6");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice7 => new(_haContext, "device_tracker.unnamed_device_7");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice8 => new(_haContext, "device_tracker.unnamed_device_8");
    ///<summary>unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice9 => new(_haContext, "device_tracker.unnamed_device_9");
    ///<summary>WB268384</summary>
    public DeviceTrackerEntity Wb268384 => new(_haContext, "device_tracker.wb268384");
    ///<summary>DESKTOP-CO5LNMA</summary>
    public DeviceTrackerEntity WinF8s9dtb7ecu => new(_haContext, "device_tracker.win_f8s9dtb7ecu");
    ///<summary>WIN-OPKNSS9QIVE</summary>
    public DeviceTrackerEntity WinOpknss9qive => new(_haContext, "device_tracker.win_opknss9qive");
    ///<summary>WLAN0</summary>
    public DeviceTrackerEntity Wlan0 => new(_haContext, "device_tracker.wlan0");
    ///<summary>WLAN0</summary>
    public DeviceTrackerEntity Wlan010 => new(_haContext, "device_tracker.wlan0_10");
    ///<summary>WLAN0</summary>
    public DeviceTrackerEntity Wlan011 => new(_haContext, "device_tracker.wlan0_11");
    ///<summary>WLAN0</summary>
    public DeviceTrackerEntity Wlan02 => new(_haContext, "device_tracker.wlan0_2");
    ///<summary>WLAN0</summary>
    public DeviceTrackerEntity Wlan03 => new(_haContext, "device_tracker.wlan0_3");
    ///<summary>WLAN0</summary>
    public DeviceTrackerEntity Wlan04 => new(_haContext, "device_tracker.wlan0_4");
    ///<summary>WLAN0</summary>
    public DeviceTrackerEntity Wlan05 => new(_haContext, "device_tracker.wlan0_5");
    ///<summary>WLAN0</summary>
    public DeviceTrackerEntity Wlan06 => new(_haContext, "device_tracker.wlan0_6");
    ///<summary>WLAN0</summary>
    public DeviceTrackerEntity Wlan07 => new(_haContext, "device_tracker.wlan0_7");
    ///<summary>WLAN0</summary>
    public DeviceTrackerEntity Wlan08 => new(_haContext, "device_tracker.wlan0_8");
    ///<summary>WLAN0</summary>
    public DeviceTrackerEntity Wlan09 => new(_haContext, "device_tracker.wlan0_9");
    ///<summary>WQ4912</summary>
    public DeviceTrackerEntity Wq4912 => new(_haContext, "device_tracker.wq4912");
    ///<summary>WY5767</summary>
    public DeviceTrackerEntity Wy5767 => new(_haContext, "device_tracker.wy5767");
    ///<summary>XBOX</summary>
    public DeviceTrackerEntity Xbox => new(_haContext, "device_tracker.xbox");
    ///<summary>XBOXONE</summary>
    public DeviceTrackerEntity Xboxone => new(_haContext, "device_tracker.xboxone");
    ///<summary>Roborock S5 Max</summary>
    public DeviceTrackerEntity Xiaomiroborocks5max => new(_haContext, "device_tracker.xiaomiroborocks5max");
}

public partial class GroupEntities
{
    private readonly IHaContext _haContext;
    public GroupEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Ebbes værelse</summary>
    public GroupEntity LysEbbe => new(_haContext, "group.lys_ebbe");
    ///<summary>Indendørs lys</summary>
    public GroupEntity LysIndendors => new(_haContext, "group.lys_indendors");
    ///<summary>Køkken</summary>
    public GroupEntity LysKokken => new(_haContext, "group.lys_kokken");
    ///<summary>Loft</summary>
    public GroupEntity LysLoft => new(_haContext, "group.lys_loft");
    ///<summary>Roars værelse</summary>
    public GroupEntity LysRoar => new(_haContext, "group.lys_roar");
    ///<summary>Soveværelse</summary>
    public GroupEntity LysSovevaerelse => new(_haContext, "group.lys_sovevaerelse");
    ///<summary>Stue</summary>
    public GroupEntity LysStue => new(_haContext, "group.lys_stue");
    ///<summary>Walk-in closet</summary>
    public GroupEntity LysWalkInCloset => new(_haContext, "group.lys_walk_in_closet");
}

public partial class InputBooleanEntities
{
    private readonly IHaContext _haContext;
    public InputBooleanEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>ADHD-medicin</summary>
    public InputBooleanEntity AdhdMedicin => new(_haContext, "input_boolean.adhd_medicin");
    ///<summary>Bagkant for bilopladning aktiveret</summary>
    public InputBooleanEntity BagkantForBilopladningAktiveret => new(_haContext, "input_boolean.bagkant_for_bilopladning_aktiveret");
    ///<summary>Dørklokke: Tryk</summary>
    public InputBooleanEntity Dorklokke => new(_haContext, "input_boolean.dorklokke");
    ///<summary>Emballage</summary>
    public InputBooleanEntity Emballage => new(_haContext, "input_boolean.emballage");
    ///<summary>Ferietilstand</summary>
    public InputBooleanEntity Ferietilstand => new(_haContext, "input_boolean.ferietilstand");
    ///<summary>Garagedør-sensor</summary>
    public InputBooleanEntity GaragedorSensor => new(_haContext, "input_boolean.garagedor_sensor");
    ///<summary>Hjemme</summary>
    public InputBooleanEntity Hjemme => new(_haContext, "input_boolean.hjemme");
    ///<summary>Kummefryser på pause</summary>
    public InputBooleanEntity KummefryserPaPause => new(_haContext, "input_boolean.kummefryser_pa_pause");
    ///<summary>netdaemon_lerbaek_net_daemon_apps_automations_chest_freezer_chest_freezer</summary>
    public InputBooleanEntity NetdaemonLerbaekNetDaemonAppsAutomationsChestFreezerChestFreezer => new(_haContext, "input_boolean.netdaemon_lerbaek_net_daemon_apps_automations_chest_freezer_chest_freezer");
    ///<summary>netdaemon_lerbaek_net_daemon_apps_automations_night_brightness</summary>
    public InputBooleanEntity NetdaemonLerbaekNetDaemonAppsAutomationsNightBrightness => new(_haContext, "input_boolean.netdaemon_lerbaek_net_daemon_apps_automations_night_brightness");
    ///<summary>netdaemon_lerbaek_net_daemon_apps_integrations_campen_auktioner_campen_auktioner</summary>
    public InputBooleanEntity NetdaemonLerbaekNetDaemonAppsIntegrationsCampenAuktionerCampenAuktioner => new(_haContext, "input_boolean.netdaemon_lerbaek_net_daemon_apps_integrations_campen_auktioner_campen_auktioner");
    ///<summary>netdaemon_lerbaek_net_daemon_apps_integrations_nordlux_nordlux</summary>
    public InputBooleanEntity NetdaemonLerbaekNetDaemonAppsIntegrationsNordluxNordlux => new(_haContext, "input_boolean.netdaemon_lerbaek_net_daemon_apps_integrations_nordlux_nordlux");
    ///<summary>netdaemon_lerbaek_net_daemon_apps_monitoring_humidity</summary>
    public InputBooleanEntity NetdaemonLerbaekNetDaemonAppsMonitoringHumidity => new(_haContext, "input_boolean.netdaemon_lerbaek_net_daemon_apps_monitoring_humidity");
    ///<summary>netdaemon_lerbaek_net_daemon_apps_monitoring_lectio_lectio_calendar</summary>
    public InputBooleanEntity NetdaemonLerbaekNetDaemonAppsMonitoringLectioLectioCalendar => new(_haContext, "input_boolean.netdaemon_lerbaek_net_daemon_apps_monitoring_lectio_lectio_calendar");
    ///<summary>netdaemon_lerbaek_net_daemon_apps_monitoring_price_monitor_price_monitor</summary>
    public InputBooleanEntity NetdaemonLerbaekNetDaemonAppsMonitoringPriceMonitorPriceMonitor => new(_haContext, "input_boolean.netdaemon_lerbaek_net_daemon_apps_monitoring_price_monitor_price_monitor");
    ///<summary>Night mode</summary>
    public InputBooleanEntity NightMode => new(_haContext, "input_boolean.night_mode");
    ///<summary>Night mode, Ebbe</summary>
    public InputBooleanEntity NightModeEbbe => new(_haContext, "input_boolean.night_mode_ebbe");
    ///<summary>Pap og papir</summary>
    public InputBooleanEntity PapOgPapir => new(_haContext, "input_boolean.pap_og_papir");
    ///<summary>Restaffald</summary>
    public InputBooleanEntity Restaffald => new(_haContext, "input_boolean.restaffald");
    ///<summary>Storskrald</summary>
    public InputBooleanEntity Storskrald => new(_haContext, "input_boolean.storskrald");
    ///<summary>Walk-in-closet-gardin-position ændret</summary>
    public InputBooleanEntity WalkInClosetGardinPositionAendret => new(_haContext, "input_boolean.walk_in_closet_gardin_position_aendret");
}

public partial class InputDatetimeEntities
{
    private readonly IHaContext _haContext;
    public InputDatetimeEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Bagkant for bilopladning</summary>
    public InputDatetimeEntity BagkantForBilopladning => new(_haContext, "input_datetime.bagkant_for_bilopladning");
    ///<summary>Dørklokke: Nulstil lydstyrke</summary>
    public InputDatetimeEntity DorklokkeNulstilLydstyrke => new(_haContext, "input_datetime.dorklokke_nulstil_lydstyrke");
    ///<summary>Julelys slukketid, aften</summary>
    public InputDatetimeEntity JulelysSlukketidAften => new(_haContext, "input_datetime.julelys_slukketid_aften");
    ///<summary>Julelys tændetid, morgen</summary>
    public InputDatetimeEntity JulelysTaendetidMorgen => new(_haContext, "input_datetime.julelys_taendetid_morgen");
    ///<summary>Tid</summary>
    public InputDatetimeEntity Tid => new(_haContext, "input_datetime.tid");
}

public partial class InputNumberEntities
{
    private readonly IHaContext _haContext;
    public InputNumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Dørklokke: Lydstyrke</summary>
    public InputNumberEntity DorklokkeLydstyrke => new(_haContext, "input_number.dorklokke_lydstyrke");
    ///<summary>Max. pris for julelys</summary>
    public InputNumberEntity MaxPrisForJulelys => new(_haContext, "input_number.max_pris_for_julelys");
    ///<summary>Støvsuger-ID: Badeværelse</summary>
    public InputNumberEntity StovsugerIdBadevaerelse => new(_haContext, "input_number.stovsuger_id_badevaerelse");
    ///<summary>Støvsuger-ID: Bryggers</summary>
    public InputNumberEntity StovsugerIdBryggers => new(_haContext, "input_number.stovsuger_id_bryggers");
    ///<summary>Støvsuger-ID: Ebbes værelse</summary>
    public InputNumberEntity StovsugerIdEbbesVaerelse => new(_haContext, "input_number.stovsuger_id_ebbes_vaerelse");
    ///<summary>Støvsuger-ID: Entré</summary>
    public InputNumberEntity StovsugerIdEntre => new(_haContext, "input_number.stovsuger_id_entre");
    ///<summary>Støvsuger-ID: Fordelingsgang</summary>
    public InputNumberEntity StovsugerIdFordelingsgang => new(_haContext, "input_number.stovsuger_id_fordelingsgang");
    ///<summary>Støvsuger-ID: Køkken</summary>
    public InputNumberEntity StovsugerIdKoekken => new(_haContext, "input_number.stovsuger_id_koekken");
    ///<summary>Støvsuger-ID: Roars værelse</summary>
    public InputNumberEntity StovsugerIdRoarsVaerelse => new(_haContext, "input_number.stovsuger_id_roars_vaerelse");
    ///<summary>Støvsuger-ID: Soveværelse</summary>
    public InputNumberEntity StovsugerIdSovevaerelse => new(_haContext, "input_number.stovsuger_id_sovevaerelse");
    ///<summary>Støvsuger-ID: Spisestue</summary>
    public InputNumberEntity StovsugerIdSpisestue => new(_haContext, "input_number.stovsuger_id_spisestue");
    ///<summary>Støvsuger-ID: Stue</summary>
    public InputNumberEntity StovsugerIdStue => new(_haContext, "input_number.stovsuger_id_stue");
    ///<summary>Støvsuger-ID: Værelsesgang</summary>
    public InputNumberEntity StovsugerIdVaerelsesgang => new(_haContext, "input_number.stovsuger_id_vaerelsesgang");
    ///<summary>Støvsuger-ID: Walk-in closet</summary>
    public InputNumberEntity StovsugerIdWalkInCloset => new(_haContext, "input_number.stovsuger_id_walk_in_closet");
}

public partial class InputTextEntities
{
    private readonly IHaContext _haContext;
    public InputTextEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Campen watchlist</summary>
    public InputTextEntity CampenWatchlist => new(_haContext, "input_text.campen_watchlist");
    ///<summary>Ebbe-kontakt, last action</summary>
    public InputTextEntity EbbeKontaktLastAction => new(_haContext, "input_text.ebbe_kontakt_last_action");
    ///<summary>NetDaemon error</summary>
    public InputTextEntity NetdaemonError => new(_haContext, "input_text.netdaemon_error");
    ///<summary>Underskabs-belysning-kontakt, last action</summary>
    public InputTextEntity UnderskabsBelysningKontaktLastAction => new(_haContext, "input_text.underskabs_belysning_kontakt_last_action");
}

public partial class LightEntities
{
    private readonly IHaContext _haContext;
    public LightEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Aläng</summary>
    public LightEntity Alang => new(_haContext, "light.alang");
    ///<summary>Alle indendørs lys</summary>
    public LightEntity AlleIndendorsLys => new(_haContext, "light.alle_indendors_lys");
    ///<summary>Badeværelse GU5.3</summary>
    public LightEntity BadevaerelseGu53 => new(_haContext, "light.badevaerelse_gu5_3");
    ///<summary>Ballon</summary>
    public LightEntity Ballon => new(_haContext, "light.ballon");
    ///<summary>Bryggers</summary>
    public LightEntity Bryggers => new(_haContext, "light.bryggers");
    ///<summary>Entré</summary>
    public LightEntity Entre => new(_haContext, "light.entre");
    ///<summary>Felena Tassel</summary>
    public LightEntity FelenaTassel => new(_haContext, "light.felena_tassel");
    ///<summary>Flowerpot VP1</summary>
    public LightEntity FlowerpotVp1 => new(_haContext, "light.flowerpot_vp1");
    ///<summary>Fordelingsgang</summary>
    public LightEntity Fordelingsgang => new(_haContext, "light.fordelingsgang");
    ///<summary>Garage-lanterne</summary>
    public LightEntity GarageLanterne => new(_haContext, "light.garage_lanterne");
    ///<summary>Havelamper</summary>
    public LightEntity Havelamper => new(_haContext, "light.havelamper");
    ///<summary>Hjørneterrasse</summary>
    public LightEntity Hjorneterrasse => new(_haContext, "light.hjorneterrasse");
    ///<summary>Indkørsel</summary>
    public LightEntity Indkorsel => new(_haContext, "light.indkorsel");
    ///<summary>Julelys</summary>
    public LightEntity Julelys => new(_haContext, "light.julelys");
    ///<summary>Kanin-astronaut</summary>
    public LightEntity KaninAstronaut => new(_haContext, "light.kanin_astronaut");
    ///<summary>Køkkenvask</summary>
    public LightEntity Kokkenvask => new(_haContext, "light.kokkenvask");
    ///<summary>Lys foran garagen</summary>
    public LightEntity LysForanGaragen => new(_haContext, "light.lys_foran_garagen");
    ///<summary>Lys i baghaven</summary>
    public LightEntity LysIBaghaven => new(_haContext, "light.lys_i_baghaven");
    ///<summary>Lys i bryggerset</summary>
    public LightEntity LysIBryggerset => new(_haContext, "light.lys_i_bryggerset");
    ///<summary>Lys i entréen</summary>
    public LightEntity LysIEntreen => new(_haContext, "light.lys_i_entreen");
    ///<summary>Lys i fordelingsgangen</summary>
    public LightEntity LysIFordelingsgangen => new(_haContext, "light.lys_i_fordelingsgangen");
    ///<summary>Lys i indkørslen</summary>
    public LightEntity LysIIndkorslen => new(_haContext, "light.lys_i_indkorslen");
    ///<summary>Lys i køkkenet</summary>
    public LightEntity LysIKokkenet => new(_haContext, "light.lys_i_kokkenet");
    ///<summary>Lys i stuen</summary>
    public LightEntity LysIStuen => new(_haContext, "light.lys_i_stuen");
    ///<summary>Lys på badeværelset</summary>
    public LightEntity LysPaBadevaerelset => new(_haContext, "light.lys_pa_badevaerelset");
    ///<summary>Lys på Ebbes værelse</summary>
    public LightEntity LysPaEbbesVaerelse => new(_haContext, "light.lys_pa_ebbes_vaerelse");
    ///<summary>Lys på Roars værelse</summary>
    public LightEntity LysPaRoarsVaerelse => new(_haContext, "light.lys_pa_roars_vaerelse");
    ///<summary>Lys på soveværelset</summary>
    public LightEntity LysPaSovevaerelset => new(_haContext, "light.lys_pa_sovevaerelset");
    ///<summary>Lys på toilettet</summary>
    public LightEntity LysPaToilettet => new(_haContext, "light.lys_pa_toilettet");
    ///<summary>Lys på loftet</summary>
    public LightEntity LysPaaLoftet => new(_haContext, "light.lys_paa_loftet");
    ///<summary>Lys under Roars seng</summary>
    public LightEntity LysUnderRoarsSeng => new(_haContext, "light.lys_under_roars_seng");
    ///<summary>Måne</summary>
    public LightEntity Maane => new(_haContext, "light.maane");
    ///<summary>Olive Tree Branch</summary>
    public LightEntity OliveTreeBranch => new(_haContext, "light.olive_tree_branch");
    ///<summary>Partial: Aläng 1</summary>
    public LightEntity PartialAlang1 => new(_haContext, "light.partial_alang_1");
    ///<summary>Partial: Aläng 2</summary>
    public LightEntity PartialAlang2 => new(_haContext, "light.partial_alang_2");
    ///<summary>Partial: Aläng 3</summary>
    public LightEntity PartialAlang3 => new(_haContext, "light.partial_alang_3");
    ///<summary>Partial: Badeværelse GU5.3 Bad</summary>
    public LightEntity PartialBadevaerelseGu53Bad => new(_haContext, "light.partial_badevaerelse_gu5_3_bad");
    ///<summary>Partial: Badeværelse GU5.3 Midt</summary>
    public LightEntity PartialBadevaerelseGu53Midt => new(_haContext, "light.partial_badevaerelse_gu5_3_midt");
    ///<summary>Partial: Badeværelse GU5.3 Toilet</summary>
    public LightEntity PartialBadevaerelseGu53Toilet => new(_haContext, "light.partial_badevaerelse_gu5_3_toilet");
    ///<summary>Partial: Entré (dør)</summary>
    public LightEntity PartialEntreDor => new(_haContext, "light.partial_entre_dor");
    ///<summary>Partial: Entré (midt)</summary>
    public LightEntity PartialEntreMidt => new(_haContext, "light.partial_entre_midt");
    ///<summary>Partial: Entré (stue)</summary>
    public LightEntity PartialEntreStue => new(_haContext, "light.partial_entre_stue");
    ///<summary>Partial: Felena Tassel RGBW 1</summary>
    public LightEntity PartialFelenaTasselRgbw1 => new(_haContext, "light.partial_felena_tassel_rgbw_1");
    ///<summary>Partial: Felena Tassel RGBW 2</summary>
    public LightEntity PartialFelenaTasselRgbw2 => new(_haContext, "light.partial_felena_tassel_rgbw_2");
    ///<summary>Partial: Felena Tassel RGBW 3</summary>
    public LightEntity PartialFelenaTasselRgbw3 => new(_haContext, "light.partial_felena_tassel_rgbw_3");
    ///<summary>Partial: Fordelingsgang (køkken)</summary>
    public LightEntity PartialFordelingsgangKokken => new(_haContext, "light.partial_fordelingsgang_kokken");
    ///<summary>Partial: Fordelingsgang (midt)</summary>
    public LightEntity PartialFordelingsgangMidt => new(_haContext, "light.partial_fordelingsgang_midt");
    ///<summary>Partial: Fordelingsgang (værelser)</summary>
    public LightEntity PartialFordelingsgangVaerelser => new(_haContext, "light.partial_fordelingsgang_vaerelser");
    ///<summary>Partial: Garageport (højre)</summary>
    public LightEntity PartialGarageportHojre => new(_haContext, "light.partial_garageport_hojre");
    ///<summary>Partial: Garageport (venstre)</summary>
    public LightEntity PartialGarageportVenstre => new(_haContext, "light.partial_garageport_venstre");
    ///<summary>Partial: Indkørsel 1</summary>
    public LightEntity PartialIndkorsel1 => new(_haContext, "light.partial_indkorsel_1");
    ///<summary>Partial: Indkørsel 2</summary>
    public LightEntity PartialIndkorsel2 => new(_haContext, "light.partial_indkorsel_2");
    ///<summary>Partial: Indkørsel 3</summary>
    public LightEntity PartialIndkorsel3 => new(_haContext, "light.partial_indkorsel_3");
    ///<summary>Partial: Indkørsel 4</summary>
    public LightEntity PartialIndkorsel4 => new(_haContext, "light.partial_indkorsel_4");
    ///<summary>Partial: Indkørsel 5</summary>
    public LightEntity PartialIndkorsel5 => new(_haContext, "light.partial_indkorsel_5");
    ///<summary>Partial: Køkkenvask 1</summary>
    public LightEntity PartialKokkenvask1 => new(_haContext, "light.partial_kokkenvask_1");
    ///<summary>Partial: Køkkenvask 2</summary>
    public LightEntity PartialKokkenvask2 => new(_haContext, "light.partial_kokkenvask_2");
    ///<summary>Partial: Køkkenvask 3</summary>
    public LightEntity PartialKokkenvask3 => new(_haContext, "light.partial_kokkenvask_3");
    ///<summary>Partial: Toilet (dør)</summary>
    public LightEntity PartialToiletDor => new(_haContext, "light.partial_toilet_dor");
    ///<summary>Partial: Toilet (vindue)</summary>
    public LightEntity PartialToiletVindue => new(_haContext, "light.partial_toilet_vindue");
    ///<summary>Spejllys</summary>
    public LightEntity Spejllys => new(_haContext, "light.spejllys");
    ///<summary>Terrasse</summary>
    public LightEntity Terrasse => new(_haContext, "light.terrasse");
    ///<summary>Toilet</summary>
    public LightEntity Toilet => new(_haContext, "light.toilet");
    ///<summary>Underskabsbelysning</summary>
    public LightEntity Underskabsbelysning => new(_haContext, "light.underskabsbelysning");
    ///<summary>Valder</summary>
    public LightEntity Valder => new(_haContext, "light.valder");
    ///<summary>Vinke-astronaut</summary>
    public LightEntity VinkeAstronaut => new(_haContext, "light.vinke_astronaut");
    ///<summary>Walk-in-closet</summary>
    public LightEntity WalkInCloset => new(_haContext, "light.walk_in_closet");
}

public partial class LockEntities
{
    private readonly IHaContext _haContext;
    public LockEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>CEED Door Lock</summary>
    public LockEntity CeedDoorLock => new(_haContext, "lock.ceed_door_lock");
    ///<summary>Havelamper Child lock</summary>
    public LockEntity HavelamperChildLock => new(_haContext, "lock.havelamper_child_lock");
    ///<summary>Hjørneterrasse Child lock</summary>
    public LockEntity HjorneterrasseChildLock => new(_haContext, "lock.hjorneterrasse_child_lock");
    ///<summary>Julelys Child lock</summary>
    public LockEntity JulelysChildLock => new(_haContext, "lock.julelys_child_lock");
    ///<summary>Kummefryser Child lock</summary>
    public LockEntity KummefryserChildLock => new(_haContext, "lock.kummefryser_child_lock");
    ///<summary>Lys i indkørslen Child lock</summary>
    public LockEntity LysIIndkorslenChildLock => new(_haContext, "lock.lys_i_indkorslen_child_lock");
    ///<summary>Lys på loftet Child lock</summary>
    public LockEntity LysPaaLoftetChildLock => new(_haContext, "lock.lys_paa_loftet_child_lock");
    ///<summary>Seedbox Child lock</summary>
    public LockEntity SeedboxChildLock => new(_haContext, "lock.seedbox_child_lock");
    ///<summary>Tørretumbler Child lock</summary>
    public LockEntity TorretumblerChildLock => new(_haContext, "lock.torretumbler_child_lock");
    ///<summary>Vaskemaskine Child lock</summary>
    public LockEntity VaskemaskineChildLock => new(_haContext, "lock.vaskemaskine_child_lock");
    ///<summary>Wallbox PulsarPlus SN 268384 Lock</summary>
    public LockEntity WallboxPortalLockedUnlocked => new(_haContext, "lock.wallbox_portal_locked_unlocked");
}

public partial class MediaPlayerEntities
{
    private readonly IHaContext _haContext;
    public MediaPlayerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>CC Soveværelse</summary>
    public MediaPlayerEntity CcSovevaerelse => new(_haContext, "media_player.cc_sovevaerelse");
    ///<summary>ChromeCast (Stue)</summary>
    public MediaPlayerEntity CcStue => new(_haContext, "media_player.cc_stue");
    public MediaPlayerEntity Ccsovevaerelse => new(_haContext, "media_player.ccsovevaerelse");
    ///<summary>ChromeCast Soveværelse</summary>
    public MediaPlayerEntity ChromecastSovevaerelse => new(_haContext, "media_player.chromecast_sovevaerelse");
    ///<summary>ChromeCast Soveværelse</summary>
    public MediaPlayerEntity ChromecastSovevaerelse2 => new(_haContext, "media_player.chromecast_sovevaerelse_2");
    ///<summary>Chromecast5045</summary>
    public MediaPlayerEntity Chromecast5045 => new(_haContext, "media_player.chromecast5045");
    public MediaPlayerEntity Chromecast7792 => new(_haContext, "media_player.chromecast7792");
    ///<summary>ChromeTV</summary>
    public MediaPlayerEntity Chrometv => new(_haContext, "media_player.chrometv");
    ///<summary>ChromeTV</summary>
    public MediaPlayerEntity Chrometv2 => new(_haContext, "media_player.chrometv_2");
    ///<summary>Legeværelse</summary>
    public MediaPlayerEntity Legevaerelse => new(_haContext, "media_player.legevaerelse");
    ///<summary>Plex (kasperemkjr - Plex for Android (TV) - Chromecast Google TV (HD))</summary>
    public MediaPlayerEntity PlexKasperemkjrPlexForAndroidTvChromecastGoogleTvHd => new(_haContext, "media_player.plex_kasperemkjr_plex_for_android_tv_chromecast_google_tv_hd");
    ///<summary>Plex (linda.emkjaer@gmail.com - Plex for iOS - Anna Lindas iPhone)</summary>
    public MediaPlayerEntity PlexLindaEmkjaerGmailComPlexForIosAnnaLindasIphone => new(_haContext, "media_player.plex_linda_emkjaer_gmail_com_plex_for_ios_anna_lindas_iphone");
    ///<summary>Plex (Plex for LG - LG 55UM7400PLB)</summary>
    public MediaPlayerEntity PlexLindaEmkjaerGmailComPlexForLgLg55um7400plb => new(_haContext, "media_player.plex_linda_emkjaer_gmail_com_plex_for_lg_lg_55um7400plb");
    ///<summary>Plex (louise.p8 - Plex for Android (TV) - Allente 1)</summary>
    public MediaPlayerEntity PlexLouiseP8PlexForAndroidTvAllente1 => new(_haContext, "media_player.plex_louise_p8_plex_for_android_tv_allente_1");
    ///<summary>Plex (louise.p8 - Plex for Samsung - TV UE22H5600)</summary>
    public MediaPlayerEntity PlexLouiseP8PlexForSamsungTvUe22h5600 => new(_haContext, "media_player.plex_louise_p8_plex_for_samsung_tv_ue22h5600");
    ///<summary>Plex (louise.p8 - Plex Cast - Chromecast)</summary>
    public MediaPlayerEntity PlexLouisePedersenGmailComPlexCastChromecast => new(_haContext, "media_player.plex_louise_pedersen_gmail_com_plex_cast_chromecast");
    ///<summary>Plex (louise.p8 - Plex for iOS - Louise L.s iPhone)</summary>
    public MediaPlayerEntity PlexLouisePedersenGmailComPlexForIosLouiseLSIphone => new(_haContext, "media_player.plex_louise_pedersen_gmail_com_plex_for_ios_louise_l_s_iphone");
    ///<summary>Plex (louise.p8 - Plex for LG - NetCast)</summary>
    public MediaPlayerEntity PlexLouisePedersenGmailComPlexForLgNetcast => new(_haContext, "media_player.plex_louise_pedersen_gmail_com_plex_for_lg_netcast");
    ///<summary>Plex (louise.pedersen@gmail.com - Plex Web - Chrome - OSX)</summary>
    public MediaPlayerEntity PlexLouisePedersenGmailComPlexWebChromeOsx => new(_haContext, "media_player.plex_louise_pedersen_gmail_com_plex_web_chrome_osx");
    ///<summary>Plex (louise.p8 - Plex Web - Chrome - Windows)</summary>
    public MediaPlayerEntity PlexLouisePedersenGmailComPlexWebChromeWindows => new(_haContext, "media_player.plex_louise_pedersen_gmail_com_plex_web_chrome_windows");
    ///<summary>Plex (mail147 - Plex Web - Chrome - Windows)</summary>
    public MediaPlayerEntity PlexMail147PlexWebChromeWindows => new(_haContext, "media_player.plex_mail147_plex_web_chrome_windows");
    ///<summary>Plex (mail147 - Plex Web - Microsoft Edge - Windows)</summary>
    public MediaPlayerEntity PlexMail147PlexWebMicrosoftEdgeWindows => new(_haContext, "media_player.plex_mail147_plex_web_microsoft_edge_windows");
    ///<summary>Plex (mail2eep@gmail.com - Plex for Samsung - TV 2017)</summary>
    public MediaPlayerEntity PlexMail2eepGmailComPlexForSamsungTv2017 => new(_haContext, "media_player.plex_mail2eep_gmail_com_plex_for_samsung_tv_2017");
    ///<summary>Plex (mail147 - Plex for Samsung - TV 2017)</summary>
    public MediaPlayerEntity PlexMail2eepGmailComPlexForSamsungTv20172 => new(_haContext, "media_player.plex_mail2eep_gmail_com_plex_for_samsung_tv_2017_2");
    ///<summary>Plex (mail2eep@gmail.com - Plex Web - Chrome - Windows)</summary>
    public MediaPlayerEntity PlexMail2eepGmailComPlexWebChromeWindows => new(_haContext, "media_player.plex_mail2eep_gmail_com_plex_web_chrome_windows");
    ///<summary>Plex (Plex Cast - Chromecast)</summary>
    public MediaPlayerEntity PlexPlexCastChromecast => new(_haContext, "media_player.plex_plex_cast_chromecast");
    ///<summary>Plex (Plex Cast - Chromecast)</summary>
    public MediaPlayerEntity PlexPlexCastChromecast2 => new(_haContext, "media_player.plex_plex_cast_chromecast_2");
    ///<summary>Plex (Plex Cast - Chromecast)</summary>
    public MediaPlayerEntity PlexPlexCastChromecast3 => new(_haContext, "media_player.plex_plex_cast_chromecast_3");
    ///<summary>Plex (Plex Cast - Chromecast)</summary>
    public MediaPlayerEntity PlexPlexCastChromecast4 => new(_haContext, "media_player.plex_plex_cast_chromecast_4");
    ///<summary>Plex (Plex for Android - Galaxy S8)</summary>
    public MediaPlayerEntity PlexPlexForAndroidGalaxyS8 => new(_haContext, "media_player.plex_plex_for_android_galaxy_s8");
    ///<summary>Plex (Plex for Android - Galaxy Tab S3)</summary>
    public MediaPlayerEntity PlexPlexForAndroidGalaxyTabS3 => new(_haContext, "media_player.plex_plex_for_android_galaxy_tab_s3");
    ///<summary>Plex (Plex for Android (Mobile) - Galaxy S20+)</summary>
    public MediaPlayerEntity PlexPlexForAndroidMobileGalaxyS20 => new(_haContext, "media_player.plex_plex_for_android_mobile_galaxy_s20");
    ///<summary>Plex (Plex for Android (Mobile) - Galaxy S20 Ultra 5G)</summary>
    public MediaPlayerEntity PlexPlexForAndroidMobileSmG988b => new(_haContext, "media_player.plex_plex_for_android_mobile_sm_g988b");
    ///<summary>Plex (Plex for Android (TV) - Chromecast)</summary>
    public MediaPlayerEntity PlexPlexForAndroidTvChromecast => new(_haContext, "media_player.plex_plex_for_android_tv_chromecast");
    ///<summary>Plex (Plex for Android (TV) - Sovev?relse)</summary>
    public MediaPlayerEntity PlexPlexForAndroidTvSovevRelse => new(_haContext, "media_player.plex_plex_for_android_tv_sovev_relse");
    ///<summary>Plex (Plex for Kodi - Snuggles)</summary>
    public MediaPlayerEntity PlexPlexForKodiSnuggles => new(_haContext, "media_player.plex_plex_for_kodi_snuggles");
    ///<summary>Plex (Plex for LG - LG 43UN81006LB)</summary>
    public MediaPlayerEntity PlexPlexForLgLg43un81006lb => new(_haContext, "media_player.plex_plex_for_lg_lg_43un81006lb");
    ///<summary>Plex (Plex for Samsung - TV 2018)</summary>
    public MediaPlayerEntity PlexPlexForSamsungTv2018 => new(_haContext, "media_player.plex_plex_for_samsung_tv_2018");
    ///<summary>Plex (Plex for Samsung - TV 2018)</summary>
    public MediaPlayerEntity PlexPlexForSamsungTv20182 => new(_haContext, "media_player.plex_plex_for_samsung_tv_2018_2");
    ///<summary>Plex (Plex for Samsung - TV 2018)</summary>
    public MediaPlayerEntity PlexPlexForSamsungTv20183 => new(_haContext, "media_player.plex_plex_for_samsung_tv_2018_3");
    ///<summary>Plex (Plex for Samsung - TV 2018)</summary>
    public MediaPlayerEntity PlexPlexForSamsungTv20184 => new(_haContext, "media_player.plex_plex_for_samsung_tv_2018_4");
    ///<summary>Plex (Plex for Samsung - TV 2018)</summary>
    public MediaPlayerEntity PlexPlexForSamsungTv20185 => new(_haContext, "media_player.plex_plex_for_samsung_tv_2018_5");
    ///<summary>Plex (Plex for Samsung - TV 2021)</summary>
    public MediaPlayerEntity PlexPlexForSamsungTv2021 => new(_haContext, "media_player.plex_plex_for_samsung_tv_2021");
    ///<summary>Plex (Plex for Windows - DESKTOP-CO5LNMA)</summary>
    public MediaPlayerEntity PlexPlexForWindowsDesktopCo5lnma => new(_haContext, "media_player.plex_plex_for_windows_desktop_co5lnma");
    ///<summary>Plex (Plex Web - Chrome)</summary>
    public MediaPlayerEntity PlexPlexWebChrome => new(_haContext, "media_player.plex_plex_web_chrome");
    ///<summary>Plex (Plex Web - Chrome - Android)</summary>
    public MediaPlayerEntity PlexPlexWebChrome2 => new(_haContext, "media_player.plex_plex_web_chrome_2");
    ///<summary>Plex (Plex Web - Chrome - Windows)</summary>
    public MediaPlayerEntity PlexPlexWebChrome3 => new(_haContext, "media_player.plex_plex_web_chrome_3");
    ///<summary>Plex (Plex Web - Chrome - Android)</summary>
    public MediaPlayerEntity PlexPlexWebChromeAndroid => new(_haContext, "media_player.plex_plex_web_chrome_android");
    ///<summary>Plex (Plex Web - Chrome - Android)</summary>
    public MediaPlayerEntity PlexPlexWebChromeAndroid2 => new(_haContext, "media_player.plex_plex_web_chrome_android_2");
    ///<summary>Plex (Plex Web - Chrome - Android)</summary>
    public MediaPlayerEntity PlexPlexWebChromeAndroid3 => new(_haContext, "media_player.plex_plex_web_chrome_android_3");
    ///<summary>Plex (Plex Web - Chrome - Windows)</summary>
    public MediaPlayerEntity PlexPlexWebChromeWindows => new(_haContext, "media_player.plex_plex_web_chrome_windows");
    ///<summary>Plex (Plex Web - Chrome - Windows)</summary>
    public MediaPlayerEntity PlexPlexWebChromeWindows2 => new(_haContext, "media_player.plex_plex_web_chrome_windows_2");
    ///<summary>Plex (Plex Web - Chrome - Windows)</summary>
    public MediaPlayerEntity PlexPlexWebChromeWindows3 => new(_haContext, "media_player.plex_plex_web_chrome_windows_3");
    ///<summary>Plex (Plex Web - Chrome)</summary>
    public MediaPlayerEntity PlexPlexWebChromeWindows4 => new(_haContext, "media_player.plex_plex_web_chrome_windows_4");
    ///<summary>Plex (Plex Web - Chrome - Windows)</summary>
    public MediaPlayerEntity PlexPlexWebChromeWindows5 => new(_haContext, "media_player.plex_plex_web_chrome_windows_5");
    ///<summary>Plex (Plex Web - Chrome - Windows)</summary>
    public MediaPlayerEntity PlexPlexWebChromeWindows6 => new(_haContext, "media_player.plex_plex_web_chrome_windows_6");
    ///<summary>Plex (stadsg - Plex for Apple TV - Apple TV)</summary>
    public MediaPlayerEntity PlexStadsgPlexForAppleTvAppleTv => new(_haContext, "media_player.plex_stadsg_plex_for_apple_tv_apple_tv");
    ///<summary>Plex (stadsg - Plex for Apple TV - Apple TV)</summary>
    public MediaPlayerEntity PlexStadsgaard86GmailComPlexForAppleTvDagligstue => new(_haContext, "media_player.plex_stadsgaard86_gmail_com_plex_for_apple_tv_dagligstue");
    ///<summary>Samsung 7 Series (65)</summary>
    public MediaPlayerEntity Samsung7Series65 => new(_haContext, "media_player.samsung_7_series_65");
    ///<summary>Sove</summary>
    public MediaPlayerEntity Sove => new(_haContext, "media_player.sove");
    ///<summary>[TV] Samsung 7 Series (65)</summary>
    public MediaPlayerEntity TvSamsung7Series65 => new(_haContext, "media_player.tv_samsung_7_series_65");
}

public partial class NumberEntities
{
    private readonly IHaContext _haContext;
    public NumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Grasputin Raindelay</summary>
    public NumberEntity GrasputinRaindelay => new(_haContext, "number.grasputin_raindelay");
    ///<summary>Grasputin Time extension</summary>
    public NumberEntity GrasputinTimeExtension => new(_haContext, "number.grasputin_time_extension");
    ///<summary>Torque</summary>
    public NumberEntity GrasputinTorque => new(_haContext, "number.grasputin_torque");
    ///<summary>Motion sensitivity</summary>
    public NumberEntity IndkorselMotionSensitivity => new(_haContext, "number.indkorsel_motion_sensitivity");
    ///<summary>Legeværelse Balance</summary>
    public NumberEntity LegevaerelseBalance => new(_haContext, "number.legevaerelse_balance");
    ///<summary>Legeværelse Bass</summary>
    public NumberEntity LegevaerelseBass => new(_haContext, "number.legevaerelse_bass");
    ///<summary>Legeværelse Treble</summary>
    public NumberEntity LegevaerelseTreble => new(_haContext, "number.legevaerelse_treble");
    ///<summary>Wallbox PulsarPlus SN 268384 Maximum charging current</summary>
    public NumberEntity WallboxPortalMaxChargingCurrent => new(_haContext, "number.wallbox_portal_max_charging_current");
    ///<summary>Wallbox PulsarPlus SN 268384 Energy price</summary>
    public NumberEntity WallboxPulsarplusSn268384EnergyPrice => new(_haContext, "number.wallbox_pulsarplus_sn_268384_energy_price");
}

public partial class PersonEntities
{
    private readonly IHaContext _haContext;
    public PersonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Erik Ejler Pedersen</summary>
    public PersonEntity Erik => new(_haContext, "person.erik");
    ///<summary>Gro</summary>
    public PersonEntity Gro => new(_haContext, "person.gro");
    ///<summary>Inge Lerbæk Pedersen</summary>
    public PersonEntity Inge => new(_haContext, "person.inge");
    ///<summary>Kia Ceed</summary>
    public PersonEntity KiaCeed => new(_haContext, "person.kia_ceed");
    ///<summary>Kristoffer</summary>
    public PersonEntity Kristoffer => new(_haContext, "person.kristoffer");
    ///<summary>Linda Emkjær</summary>
    public PersonEntity Linda => new(_haContext, "person.linda");
    ///<summary>Louise Lerbæk Pedersen</summary>
    public PersonEntity Louise => new(_haContext, "person.louise");
}

public partial class RemoteEntities
{
    private readonly IHaContext _haContext;
    public RemoteEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>ChromeCast Soveværelse</summary>
    public RemoteEntity ChromecastSovevaerelse => new(_haContext, "remote.chromecast_sovevaerelse");
    ///<summary>ChromeTV</summary>
    public RemoteEntity Chrometv => new(_haContext, "remote.chrometv");
    ///<summary>Samsung 7 Series (65)</summary>
    public RemoteEntity Samsung7Series65 => new(_haContext, "remote.samsung_7_series_65");
}

public partial class SceneEntities
{
    private readonly IHaContext _haContext;
    public SceneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Indkørsel: Regnbue</summary>
    public SceneEntity IndkorselRegnbue => new(_haContext, "scene.indkorsel_regnbue");
}

public partial class ScriptEntities
{
    private readonly IHaContext _haContext;
    public ScriptEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Find telefon</summary>
    public ScriptEntity FindTelefon => new(_haContext, "script.find_telefon");
    ///<summary>Garage: Luk port med plads til ledning</summary>
    public ScriptEntity GarageLukPortMedPladsTilLedning => new(_haContext, "script.garage_luk_port_med_plads_til_ledning");
    ///<summary>Garage: Temp</summary>
    public ScriptEntity GarageTemp => new(_haContext, "script.garage_temp");
    ///<summary>Halloween: Pulserende, rødt lys</summary>
    public ScriptEntity Halloween => new(_haContext, "script.halloween");
    ///<summary>Hjem: Godnat</summary>
    public ScriptEntity HjemGodnat => new(_haContext, "script.hjem_godnat");
    ///<summary>Støvsuger: Pit-stop</summary>
    public ScriptEntity KokkenStovsugerPitstop => new(_haContext, "script.kokken_stovsuger_pitstop");
    ///<summary>Halloween: Torden</summary>
    public ScriptEntity Lightning => new(_haContext, "script.lightning");
    ///<summary>Roar: Dæmp loftlys hvis tændt</summary>
    public ScriptEntity RoarDaempLoftlysHvisTaendt => new(_haContext, "script.roar_daemp_loftlys_hvis_taendt");
    ///<summary>Roar: Dæmp natlampe hvis tændt</summary>
    public ScriptEntity RoarDaempLysHvisTaendt => new(_haContext, "script.roar_daemp_lys_hvis_taendt");
    ///<summary>Roar: Toiletbesøg er slut</summary>
    public ScriptEntity RoarToiletbesogErSlut => new(_haContext, "script.roar_toiletbesog_er_slut");
    ///<summary>Hjem: Sluk indendørs lys</summary>
    public ScriptEntity SceneSlukAlleIndendorsLys => new(_haContext, "script.scene_sluk_alle_indendors_lys");
    ///<summary>Støvsuger: Ebbes mad</summary>
    public ScriptEntity StovsugerEbbesMad => new(_haContext, "script.stovsuger_ebbes_mad");
    ///<summary>Støvsuger: Højeste sugestyrke</summary>
    public ScriptEntity StovsugerHojesteSugestyrke => new(_haContext, "script.stovsuger_hojeste_sugestyrke");
    ///<summary>Støvsuger: Køkken x 3</summary>
    public ScriptEntity StovsugerKokken => new(_haContext, "script.stovsuger_kokken");
    ///<summary>Støvsuger: Køkken x 1</summary>
    public ScriptEntity StovsugerKokkenX1 => new(_haContext, "script.stovsuger_kokken_x_1");
    ///<summary>Støvsuger: Køkken x 2</summary>
    public ScriptEntity StovsugerKokkenX2 => new(_haContext, "script.stovsuger_kokken_x_2");
    ///<summary>Støvsuger: Laveste sugestyrke</summary>
    public ScriptEntity StovsugerLavesteSugestyrke => new(_haContext, "script.stovsuger_laveste_sugestyrke");
    ///<summary>Støvsuger: Skift sugestyrke</summary>
    public ScriptEntity StovsugerSkiftSugestyrke => new(_haContext, "script.stovsuger_skift_sugestyrke");
    ///<summary>Støvsuger: Start/pause</summary>
    public ScriptEntity StovsugerStartPause => new(_haContext, "script.stovsuger_start_pause");
    ///<summary>Støvsuger: Vent til færdig</summary>
    public ScriptEntity StovsugerVentTilFardig => new(_haContext, "script.stovsuger_vent_til_fardig");
    ///<summary>zigbee2mqtt: Repair binding</summary>
    public ScriptEntity Zigbee2mqttRepairBinding => new(_haContext, "script.zigbee2mqtt_repair_binding");
    ///<summary>zigbee2mqtt: Reparér binding</summary>
    public ScriptEntity Zigbee2mqttReparerBinding => new(_haContext, "script.zigbee2mqtt_reparer_binding");
}

public partial class SelectEntities
{
    private readonly IHaContext _haContext;
    public SelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Ballon Power-on behavior</summary>
    public SelectEntity BallonPowerOnBehavior => new(_haContext, "select.ballon_power_on_behavior");
    ///<summary>Bryggers Power-on behavior</summary>
    public SelectEntity BryggersPowerOnBehavior => new(_haContext, "select.bryggers_power_on_behavior");
    ///<summary>BryggersTS004F Operation mode</summary>
    public SelectEntity Bryggersts004fOperationMode => new(_haContext, "select.bryggersts004f_operation_mode");
    ///<summary>Renault Zoe Charge mode</summary>
    public SelectEntity ChargeMode => new(_haContext, "select.charge_mode");
    ///<summary>Flowerpot VP1 Power-on behavior</summary>
    public SelectEntity FlowerpotVp1PowerOnBehavior => new(_haContext, "select.flowerpot_vp1_power_on_behavior");
    ///<summary>Garage-lanterne Power-on behavior</summary>
    public SelectEntity GarageLanternePowerOnBehavior => new(_haContext, "select.garage_lanterne_power_on_behavior");
    ///<summary>Grasputin Current zone</summary>
    public SelectEntity GrasputinCurrentZone => new(_haContext, "select.grasputin_current_zone");
    ///<summary>Havelamper Indicator mode</summary>
    public SelectEntity HavelamperIndicatorMode => new(_haContext, "select.havelamper_indicator_mode");
    ///<summary>Havelamper Power outage memory</summary>
    public SelectEntity HavelamperPowerOutageMemory => new(_haContext, "select.havelamper_power_outage_memory");
    ///<summary>Hjørneterrasse Indicator mode</summary>
    public SelectEntity HjorneterrasseIndicatorMode => new(_haContext, "select.hjorneterrasse_indicator_mode");
    ///<summary>Hjørneterrasse Power outage memory</summary>
    public SelectEntity HjorneterrassePowerOutageMemory => new(_haContext, "select.hjorneterrasse_power_outage_memory");
    ///<summary>Day night mode</summary>
    public SelectEntity IndkorselDayNightMode => new(_haContext, "select.indkorsel_day_night_mode");
    ///<summary>Julelys Indicator mode</summary>
    public SelectEntity JulelysIndicatorMode => new(_haContext, "select.julelys_indicator_mode");
    ///<summary>Julelys Power outage memory</summary>
    public SelectEntity JulelysPowerOutageMemory => new(_haContext, "select.julelys_power_outage_memory");
    ///<summary>Kanin-astronaut Power-on behavior</summary>
    public SelectEntity KaninAstronautPowerOnBehavior => new(_haContext, "select.kanin_astronaut_power_on_behavior");
    ///<summary>Kummefryser Indicator mode</summary>
    public SelectEntity KummefryserIndicatorMode => new(_haContext, "select.kummefryser_indicator_mode");
    ///<summary>Kummefryser Power outage memory</summary>
    public SelectEntity KummefryserPowerOutageMemory => new(_haContext, "select.kummefryser_power_outage_memory");
    ///<summary>Lys i indkørslen Indicator mode</summary>
    public SelectEntity LysIIndkorslenIndicatorMode => new(_haContext, "select.lys_i_indkorslen_indicator_mode");
    ///<summary>Lys i indkørslen Power outage memory</summary>
    public SelectEntity LysIIndkorslenPowerOutageMemory => new(_haContext, "select.lys_i_indkorslen_power_outage_memory");
    ///<summary>Lys på loftet Indicator mode</summary>
    public SelectEntity LysPaaLoftetIndicatorMode => new(_haContext, "select.lys_paa_loftet_indicator_mode");
    ///<summary>Lys på loftet Power outage memory</summary>
    public SelectEntity LysPaaLoftetPowerOutageMemory => new(_haContext, "select.lys_paa_loftet_power_outage_memory");
    ///<summary>Måne Power-on behavior</summary>
    public SelectEntity MaanePowerOnBehavior => new(_haContext, "select.maane_power_on_behavior");
    ///<summary>Partial: Aläng 1 Power-on behavior</summary>
    public SelectEntity PartialAlang1PowerOnBehavior => new(_haContext, "select.partial_alang_1_power_on_behavior");
    ///<summary>Partial: Aläng 2 Power-on behavior</summary>
    public SelectEntity PartialAlang2PowerOnBehavior => new(_haContext, "select.partial_alang_2_power_on_behavior");
    ///<summary>Partial: Aläng 3 Power-on behavior</summary>
    public SelectEntity PartialAlang3PowerOnBehavior => new(_haContext, "select.partial_alang_3_power_on_behavior");
    ///<summary>Partial: Entré (dør) Power-on behavior</summary>
    public SelectEntity PartialEntreDorPowerOnBehavior => new(_haContext, "select.partial_entre_dor_power_on_behavior");
    ///<summary>Partial: Entré (midt) Power-on behavior</summary>
    public SelectEntity PartialEntreMidtPowerOnBehavior => new(_haContext, "select.partial_entre_midt_power_on_behavior");
    ///<summary>Partial: Entré (stue) Power-on behavior</summary>
    public SelectEntity PartialEntreStuePowerOnBehavior => new(_haContext, "select.partial_entre_stue_power_on_behavior");
    ///<summary>Partial: Felena Tassel RGBW 1 Power-on behavior</summary>
    public SelectEntity PartialFelenaTasselRgbw1PowerOnBehavior => new(_haContext, "select.partial_felena_tassel_rgbw_1_power_on_behavior");
    ///<summary>Partial: Felena Tassel RGBW 2 Power-on behavior</summary>
    public SelectEntity PartialFelenaTasselRgbw2PowerOnBehavior => new(_haContext, "select.partial_felena_tassel_rgbw_2_power_on_behavior");
    ///<summary>Partial: Felena Tassel RGBW 3 Power-on behavior</summary>
    public SelectEntity PartialFelenaTasselRgbw3PowerOnBehavior => new(_haContext, "select.partial_felena_tassel_rgbw_3_power_on_behavior");
    ///<summary>Partial: Fordelingsgang (køkken) Power-on behavior</summary>
    public SelectEntity PartialFordelingsgangKokkenPowerOnBehavior => new(_haContext, "select.partial_fordelingsgang_kokken_power_on_behavior");
    ///<summary>Partial: Fordelingsgang (midt) Power-on behavior</summary>
    public SelectEntity PartialFordelingsgangMidtPowerOnBehavior => new(_haContext, "select.partial_fordelingsgang_midt_power_on_behavior");
    ///<summary>Partial: Fordelingsgang (værelser) Power-on behavior</summary>
    public SelectEntity PartialFordelingsgangVaerelserPowerOnBehavior => new(_haContext, "select.partial_fordelingsgang_vaerelser_power_on_behavior");
    ///<summary>Partial: Garageport (højre) Color power on behavior</summary>
    public SelectEntity PartialGarageportHojreColorPowerOnBehavior => new(_haContext, "select.partial_garageport_hojre_color_power_on_behavior");
    ///<summary>Partial: Garageport (venstre) Color power on behavior</summary>
    public SelectEntity PartialGarageportVenstreColorPowerOnBehavior => new(_haContext, "select.partial_garageport_venstre_color_power_on_behavior");
    ///<summary>Partial: Indkørsel 1 Color power on behavior</summary>
    public SelectEntity PartialIndkorsel1ColorPowerOnBehavior => new(_haContext, "select.partial_indkorsel_1_color_power_on_behavior");
    ///<summary>Partial: Indkørsel 2 Color power on behavior</summary>
    public SelectEntity PartialIndkorsel2ColorPowerOnBehavior => new(_haContext, "select.partial_indkorsel_2_color_power_on_behavior");
    ///<summary>Partial: Indkørsel 3 Color power on behavior</summary>
    public SelectEntity PartialIndkorsel3ColorPowerOnBehavior => new(_haContext, "select.partial_indkorsel_3_color_power_on_behavior");
    ///<summary>Partial: Indkørsel 4 Color power on behavior</summary>
    public SelectEntity PartialIndkorsel4ColorPowerOnBehavior => new(_haContext, "select.partial_indkorsel_4_color_power_on_behavior");
    ///<summary>Partial: Indkørsel 5 Color power on behavior</summary>
    public SelectEntity PartialIndkorsel5ColorPowerOnBehavior => new(_haContext, "select.partial_indkorsel_5_color_power_on_behavior");
    ///<summary>Partial: Køkkenvask 1 Power-on behavior</summary>
    public SelectEntity PartialKokkenvask1PowerOnBehavior => new(_haContext, "select.partial_kokkenvask_1_power_on_behavior");
    ///<summary>Partial: Køkkenvask 2 Power-on behavior</summary>
    public SelectEntity PartialKokkenvask2PowerOnBehavior => new(_haContext, "select.partial_kokkenvask_2_power_on_behavior");
    ///<summary>Partial: Køkkenvask 3 Power-on behavior</summary>
    public SelectEntity PartialKokkenvask3PowerOnBehavior => new(_haContext, "select.partial_kokkenvask_3_power_on_behavior");
    ///<summary>Seedbox Indicator mode</summary>
    public SelectEntity SeedboxIndicatorMode => new(_haContext, "select.seedbox_indicator_mode");
    ///<summary>Seedbox Power outage memory</summary>
    public SelectEntity SeedboxPowerOutageMemory => new(_haContext, "select.seedbox_power_outage_memory");
    ///<summary>StøvsugerTS004F Operation mode</summary>
    public SelectEntity Stovsugerts004fOperationMode => new(_haContext, "select.stovsugerts004f_operation_mode");
    ///<summary>StueTS004F Operation mode</summary>
    public SelectEntity Stuets004fOperationMode => new(_haContext, "select.stuets004f_operation_mode");
    ///<summary>Tørretumbler Indicator mode</summary>
    public SelectEntity TorretumblerIndicatorMode => new(_haContext, "select.torretumbler_indicator_mode");
    ///<summary>Tørretumbler Power outage memory</summary>
    public SelectEntity TorretumblerPowerOutageMemory => new(_haContext, "select.torretumbler_power_outage_memory");
    ///<summary>Valder Power-on behavior</summary>
    public SelectEntity ValderPowerOnBehavior => new(_haContext, "select.valder_power_on_behavior");
    ///<summary>Vaskemaskine Indicator mode</summary>
    public SelectEntity VaskemaskineIndicatorMode => new(_haContext, "select.vaskemaskine_indicator_mode");
    ///<summary>Vaskemaskine Power outage memory</summary>
    public SelectEntity VaskemaskinePowerOutageMemory => new(_haContext, "select.vaskemaskine_power_outage_memory");
    ///<summary>Vinke-astronaut Power-on behavior</summary>
    public SelectEntity VinkeAstronautPowerOnBehavior => new(_haContext, "select.vinke_astronaut_power_on_behavior");
    ///<summary>Walk-in-closet-gardin Motor speed</summary>
    public SelectEntity WalkInClosetGardinMotorSpeed => new(_haContext, "select.walk_in_closet_gardin_motor_speed");
    ///<summary>Walk-in-closet Power-on behavior</summary>
    public SelectEntity WalkInClosetPowerOnBehavior => new(_haContext, "select.walk_in_closet_power_on_behavior");
    ///<summary>Zigbee2MQTT Bridge Log level</summary>
    public SelectEntity Zigbee2mqttBridgeLogLevel => new(_haContext, "select.zigbee2mqtt_bridge_log_level");
}

public partial class SensorEntities
{
    private readonly IHaContext _haContext;
    public SensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>audiobookshelf_sessions</summary>
    public SensorEntity AudiobookshelfSessions => new(_haContext, "sensor.audiobookshelf_sessions");
    ///<summary>awesome</summary>
    public SensorEntity Awesome => new(_haContext, "sensor.awesome");
    ///<summary>Badeværelse Tado mode</summary>
    public SensorEntity BadevaerelseTadoMode => new(_haContext, "sensor.badevaerelse_tado_mode");
    ///<summary>Ballon Color options</summary>
    public SensorEntity BallonColorOptions => new(_haContext, "sensor.ballon_color_options");
    ///<summary>Børnenes telefon Battery state</summary>
    public SensorEntity BornenesTelefonBatteryState => new(_haContext, "sensor.bornenes_telefon_battery_state");
    ///<summary>Børnenes telefon Charger type</summary>
    public SensorEntity BornenesTelefonChargerType => new(_haContext, "sensor.bornenes_telefon_charger_type");
    ///<summary>BryggersTS004F Action</summary>
    public SensorEntity Bryggersts004fAction => new(_haContext, "sensor.bryggersts004f_action");
    ///<summary>campen_watchlist</summary>
    public SensorEntity CampenWatchlist => new(_haContext, "sensor.campen_watchlist");
    ///<summary>Canon TS5300 series</summary>
    public SensorEntity CanonTs5300Series => new(_haContext, "sensor.canon_ts5300_series");
    ///<summary>CEED Data</summary>
    public SensorEntity CeedData => new(_haContext, "sensor.ceed_data");
    ///<summary>CEED EV First Scheduled Departure Time</summary>
    public SensorEntity CeedEvFirstScheduledDepartureTime => new(_haContext, "sensor.ceed_ev_first_scheduled_departure_time");
    ///<summary>CEED EV Off Peak End Time</summary>
    public SensorEntity CeedEvOffPeakEndTime => new(_haContext, "sensor.ceed_ev_off_peak_end_time");
    ///<summary>CEED EV Off Peak Start Time</summary>
    public SensorEntity CeedEvOffPeakStartTime => new(_haContext, "sensor.ceed_ev_off_peak_start_time");
    ///<summary>CEED EV Second Scheduled Departure Time</summary>
    public SensorEntity CeedEvSecondScheduledDepartureTime => new(_haContext, "sensor.ceed_ev_second_scheduled_departure_time");
    ///<summary>CEED Geocoded Location</summary>
    public SensorEntity CeedGeocodedLocation => new(_haContext, "sensor.ceed_geocoded_location");
    ///<summary>CEED Last Updated At</summary>
    public SensorEntity CeedLastUpdatedAt => new(_haContext, "sensor.ceed_last_updated_at");
    ///<summary>Dør: Stue Power outage count</summary>
    public SensorEntity DorStuePowerOutageCount => new(_haContext, "sensor.dor_stue_power_outage_count");
    ///<summary>Ebbe-kontakt Action</summary>
    public SensorEntity EbbeKontaktAction => new(_haContext, "sensor.ebbe_kontakt_action");
    ///<summary>Ebbe-kontakt Click</summary>
    public SensorEntity EbbeKontaktClick => new(_haContext, "sensor.ebbe_kontakt_click");
    ///<summary>Hourly Electricity Cost</summary>
    public SensorEntity ElectricityFees => new(_haContext, "sensor.electricity_fees");
    ///<summary>Fam. Lerbæk Emkjær Automatic geofencing</summary>
    public SensorEntity FamLerbaekEmkjaerAutomaticGeofencing => new(_haContext, "sensor.fam_lerbaek_emkjaer_automatic_geofencing");
    ///<summary>Fam. Lerbæk Emkjær Geofencing mode</summary>
    public SensorEntity FamLerbaekEmkjaerGeofencingMode => new(_haContext, "sensor.fam_lerbaek_emkjaer_geofencing_mode");
    ///<summary>Fam. Lerbæk Emkjær Tado mode</summary>
    public SensorEntity FamLerbaekEmkjaerTadoMode => new(_haContext, "sensor.fam_lerbaek_emkjaer_tado_mode");
    ///<summary>Fam. Lerbæk Emkjær Weather condition</summary>
    public SensorEntity FamLerbaekEmkjaerWeatherCondition => new(_haContext, "sensor.fam_lerbaek_emkjaer_weather_condition");
    ///<summary>Galaxy Watch4 (WLSW) Battery state</summary>
    public SensorEntity GalaxyWatch4WlswBatteryState => new(_haContext, "sensor.galaxy_watch4_wlsw_battery_state");
    ///<summary>Galaxy Watch4 (WLSW) Charger type</summary>
    public SensorEntity GalaxyWatch4WlswChargerType => new(_haContext, "sensor.galaxy_watch4_wlsw_charger_type");
    ///<summary>Garage-lanterne Color options</summary>
    public SensorEntity GarageLanterneColorOptions => new(_haContext, "sensor.garage_lanterne_color_options");
    ///<summary>Garageport-knap, bil Action</summary>
    public SensorEntity GarageportKnapBilAction => new(_haContext, "sensor.garageport_knap_bil_action");
    ///<summary>Grasputin Error</summary>
    public SensorEntity GrasputinError => new(_haContext, "sensor.grasputin_error");
    ///<summary>Grasputin Last Update</summary>
    public SensorEntity GrasputinLastUpdate => new(_haContext, "sensor.grasputin_last_update");
    ///<summary>Grasputin Next Scheduled Start</summary>
    public SensorEntity GrasputinNextScheduledStart => new(_haContext, "sensor.grasputin_next_scheduled_start");
    ///<summary>Gros backup-telefon Battery state</summary>
    public SensorEntity GrosBackupTelefonBatteryState => new(_haContext, "sensor.gros_backup_telefon_battery_state");
    ///<summary>Gros backup-telefon Charger type</summary>
    public SensorEntity GrosBackupTelefonChargerType => new(_haContext, "sensor.gros_backup_telefon_charger_type");
    ///<summary>Gros Galaxy S20+ Battery health</summary>
    public SensorEntity GrosGalaxyS20BatteryHealth => new(_haContext, "sensor.gros_galaxy_s20_battery_health");
    ///<summary>Gros Galaxy S20+ Battery state</summary>
    public SensorEntity GrosGalaxyS20BatteryState => new(_haContext, "sensor.gros_galaxy_s20_battery_state");
    ///<summary>Gros Galaxy S20+ Charger type</summary>
    public SensorEntity GrosGalaxyS20ChargerType => new(_haContext, "sensor.gros_galaxy_s20_charger_type");
    ///<summary>Gros Galaxy S20+ Geocoded location</summary>
    public SensorEntity GrosGalaxyS20GeocodedLocation => new(_haContext, "sensor.gros_galaxy_s20_geocoded_location");
    ///<summary>Gros Galaxy S20+ Last removed notification</summary>
    public SensorEntity GrosGalaxyS20LastRemovedNotification => new(_haContext, "sensor.gros_galaxy_s20_last_removed_notification");
    ///<summary>Gros Galaxy S20+ WiFi connection</summary>
    public SensorEntity GrosGalaxyS20WifiConnection => new(_haContext, "sensor.gros_galaxy_s20_wifi_connection");
    ///<summary>Køkken / Gang Tado mode</summary>
    public SensorEntity KokkenGangTadoMode => new(_haContext, "sensor.kokken_gang_tado_mode");
    ///<summary>Køkkenvask-kontakt Action</summary>
    public SensorEntity KokkenvaskKontaktAction => new(_haContext, "sensor.kokkenvask_kontakt_action");
    ///<summary>Køkkenvask-kontakt Click</summary>
    public SensorEntity KokkenvaskKontaktClick => new(_haContext, "sensor.kokkenvask_kontakt_click");
    ///<summary>Kristoffer - iPhone Activity</summary>
    public SensorEntity KristofferIphoneActivity => new(_haContext, "sensor.kristoffer_iphone_activity");
    ///<summary>Kristoffer - iPhone Battery State</summary>
    public SensorEntity KristofferIphoneBatteryState => new(_haContext, "sensor.kristoffer_iphone_battery_state");
    ///<summary>Kristoffer - iPhone BSSID</summary>
    public SensorEntity KristofferIphoneBssid => new(_haContext, "sensor.kristoffer_iphone_bssid");
    ///<summary>Kristoffer - iPhone Connection Type</summary>
    public SensorEntity KristofferIphoneConnectionType => new(_haContext, "sensor.kristoffer_iphone_connection_type");
    ///<summary>Kristoffer - iPhone Geocoded Location</summary>
    public SensorEntity KristofferIphoneGeocodedLocation => new(_haContext, "sensor.kristoffer_iphone_geocoded_location");
    ///<summary>Kristoffer - iPhone Last Update Trigger</summary>
    public SensorEntity KristofferIphoneLastUpdateTrigger => new(_haContext, "sensor.kristoffer_iphone_last_update_trigger");
    ///<summary>Kristoffer - iPhone SIM 1</summary>
    public SensorEntity KristofferIphoneSim1 => new(_haContext, "sensor.kristoffer_iphone_sim_1");
    ///<summary>Kristoffer - iPhone SIM 2</summary>
    public SensorEntity KristofferIphoneSim2 => new(_haContext, "sensor.kristoffer_iphone_sim_2");
    ///<summary>Kristoffer - iPhone SSID</summary>
    public SensorEntity KristofferIphoneSsid => new(_haContext, "sensor.kristoffer_iphone_ssid");
    ///<summary>Kristoffers Galaxy S20 Ultra Battery state</summary>
    public SensorEntity KristoffersGalaxyS20UltraBatteritilstand => new(_haContext, "sensor.kristoffers_galaxy_s20_ultra_batteritilstand");
    ///<summary>Kristoffers Galaxy S20 Ultra Battery health</summary>
    public SensorEntity KristoffersGalaxyS20UltraBatteryHealth => new(_haContext, "sensor.kristoffers_galaxy_s20_ultra_battery_health");
    ///<summary>Kristoffers Galaxy S20 Ultra Do Not Disturb sensor</summary>
    public SensorEntity KristoffersGalaxyS20UltraDoNotDisturbSensor => new(_haContext, "sensor.kristoffers_galaxy_s20_ultra_do_not_disturb_sensor");
    ///<summary>Kristoffers Galaxy S20 Ultra Geocoded location</summary>
    public SensorEntity KristoffersGalaxyS20UltraGeocodedLocation => new(_haContext, "sensor.kristoffers_galaxy_s20_ultra_geocoded_location");
    ///<summary>Kristoffers Galaxy S20 Ultra Charger type</summary>
    public SensorEntity KristoffersGalaxyS20UltraOpladerType => new(_haContext, "sensor.kristoffers_galaxy_s20_ultra_oplader_type");
    ///<summary>Kristoffers Galaxy S20 Ultra Public IP address</summary>
    public SensorEntity KristoffersGalaxyS20UltraPublicIpAddress => new(_haContext, "sensor.kristoffers_galaxy_s20_ultra_public_ip_address");
    ///<summary>Kristoffers Galaxy S20 Ultra WiFi connection</summary>
    public SensorEntity KristoffersGalaxyS20UltraWifiConnection => new(_haContext, "sensor.kristoffers_galaxy_s20_ultra_wifi_connection");
    ///<summary>Ebbes værelse Tado mode</summary>
    public SensorEntity LillebrorsVaerelseTadoMode => new(_haContext, "sensor.lillebrors_vaerelse_tado_mode");
    ///<summary>Måne Color options</summary>
    public SensorEntity ManeColorOptions => new(_haContext, "sensor.mane_color_options");
    ///<summary>netdaemon_status</summary>
    public SensorEntity NetdaemonStatus => new(_haContext, "sensor.netdaemon_status");
    ///<summary>nextcloud_activeUsers_last1hour</summary>
    public SensorEntity NextcloudActiveusersLast1hour => new(_haContext, "sensor.nextcloud_activeusers_last1hour");
    ///<summary>nextcloud_activeUsers_last24hours</summary>
    public SensorEntity NextcloudActiveusersLast24hours => new(_haContext, "sensor.nextcloud_activeusers_last24hours");
    ///<summary>nextcloud_activeUsers_last5minutes</summary>
    public SensorEntity NextcloudActiveusersLast5minutes => new(_haContext, "sensor.nextcloud_activeusers_last5minutes");
    ///<summary>nextcloud_database_type</summary>
    public SensorEntity NextcloudDatabaseType => new(_haContext, "sensor.nextcloud_database_type");
    ///<summary>nextcloud_database_version</summary>
    public SensorEntity NextcloudDatabaseVersion => new(_haContext, "sensor.nextcloud_database_version");
    ///<summary>nextcloud_server_php_max_execution_time</summary>
    public SensorEntity NextcloudServerPhpMaxExecutionTime => new(_haContext, "sensor.nextcloud_server_php_max_execution_time");
    ///<summary>nextcloud_server_php_memory_limit</summary>
    public SensorEntity NextcloudServerPhpMemoryLimit => new(_haContext, "sensor.nextcloud_server_php_memory_limit");
    ///<summary>nextcloud_server_php_upload_max_filesize</summary>
    public SensorEntity NextcloudServerPhpUploadMaxFilesize => new(_haContext, "sensor.nextcloud_server_php_upload_max_filesize");
    ///<summary>nextcloud_server_php_version</summary>
    public SensorEntity NextcloudServerPhpVersion => new(_haContext, "sensor.nextcloud_server_php_version");
    ///<summary>nextcloud_server_webserver</summary>
    public SensorEntity NextcloudServerWebserver => new(_haContext, "sensor.nextcloud_server_webserver");
    ///<summary>nextcloud_shares_num_fed_shares_received</summary>
    public SensorEntity NextcloudSharesNumFedSharesReceived => new(_haContext, "sensor.nextcloud_shares_num_fed_shares_received");
    ///<summary>nextcloud_shares_num_fed_shares_sent</summary>
    public SensorEntity NextcloudSharesNumFedSharesSent => new(_haContext, "sensor.nextcloud_shares_num_fed_shares_sent");
    ///<summary>nextcloud_shares_num_shares</summary>
    public SensorEntity NextcloudSharesNumShares => new(_haContext, "sensor.nextcloud_shares_num_shares");
    ///<summary>nextcloud_shares_num_shares_groups</summary>
    public SensorEntity NextcloudSharesNumSharesGroups => new(_haContext, "sensor.nextcloud_shares_num_shares_groups");
    ///<summary>nextcloud_shares_num_shares_link</summary>
    public SensorEntity NextcloudSharesNumSharesLink => new(_haContext, "sensor.nextcloud_shares_num_shares_link");
    ///<summary>nextcloud_shares_num_shares_link_no_password</summary>
    public SensorEntity NextcloudSharesNumSharesLinkNoPassword => new(_haContext, "sensor.nextcloud_shares_num_shares_link_no_password");
    ///<summary>nextcloud_shares_num_shares_mail</summary>
    public SensorEntity NextcloudSharesNumSharesMail => new(_haContext, "sensor.nextcloud_shares_num_shares_mail");
    ///<summary>nextcloud_shares_num_shares_room</summary>
    public SensorEntity NextcloudSharesNumSharesRoom => new(_haContext, "sensor.nextcloud_shares_num_shares_room");
    ///<summary>nextcloud_shares_num_shares_user</summary>
    public SensorEntity NextcloudSharesNumSharesUser => new(_haContext, "sensor.nextcloud_shares_num_shares_user");
    ///<summary>nextcloud_storage_num_files</summary>
    public SensorEntity NextcloudStorageNumFiles => new(_haContext, "sensor.nextcloud_storage_num_files");
    ///<summary>nextcloud_storage_num_storages</summary>
    public SensorEntity NextcloudStorageNumStorages => new(_haContext, "sensor.nextcloud_storage_num_storages");
    ///<summary>nextcloud_storage_num_storages_home</summary>
    public SensorEntity NextcloudStorageNumStoragesHome => new(_haContext, "sensor.nextcloud_storage_num_storages_home");
    ///<summary>nextcloud_storage_num_storages_local</summary>
    public SensorEntity NextcloudStorageNumStoragesLocal => new(_haContext, "sensor.nextcloud_storage_num_storages_local");
    ///<summary>nextcloud_storage_num_storages_other</summary>
    public SensorEntity NextcloudStorageNumStoragesOther => new(_haContext, "sensor.nextcloud_storage_num_storages_other");
    ///<summary>nextcloud_storage_num_users</summary>
    public SensorEntity NextcloudStorageNumUsers => new(_haContext, "sensor.nextcloud_storage_num_users");
    ///<summary>nextcloud_system_apps_num_installed</summary>
    public SensorEntity NextcloudSystemAppsNumInstalled => new(_haContext, "sensor.nextcloud_system_apps_num_installed");
    ///<summary>nextcloud_system_apps_num_updates_available</summary>
    public SensorEntity NextcloudSystemAppsNumUpdatesAvailable => new(_haContext, "sensor.nextcloud_system_apps_num_updates_available");
    ///<summary>nextcloud_system_cpuload</summary>
    public SensorEntity NextcloudSystemCpuload => new(_haContext, "sensor.nextcloud_system_cpuload");
    ///<summary>nextcloud_system_freespace</summary>
    public SensorEntity NextcloudSystemFreespace => new(_haContext, "sensor.nextcloud_system_freespace");
    ///<summary>nextcloud_system_mem_free</summary>
    public SensorEntity NextcloudSystemMemFree => new(_haContext, "sensor.nextcloud_system_mem_free");
    ///<summary>nextcloud_system_mem_total</summary>
    public SensorEntity NextcloudSystemMemTotal => new(_haContext, "sensor.nextcloud_system_mem_total");
    ///<summary>nextcloud_system_memcache.distributed</summary>
    public SensorEntity NextcloudSystemMemcacheDistributed => new(_haContext, "sensor.nextcloud_system_memcache_distributed");
    ///<summary>nextcloud_system_memcache.local</summary>
    public SensorEntity NextcloudSystemMemcacheLocal => new(_haContext, "sensor.nextcloud_system_memcache_local");
    ///<summary>nextcloud_system_memcache.locking</summary>
    public SensorEntity NextcloudSystemMemcacheLocking => new(_haContext, "sensor.nextcloud_system_memcache_locking");
    ///<summary>nextcloud_system_swap_free</summary>
    public SensorEntity NextcloudSystemSwapFree => new(_haContext, "sensor.nextcloud_system_swap_free");
    ///<summary>nextcloud_system_swap_total</summary>
    public SensorEntity NextcloudSystemSwapTotal => new(_haContext, "sensor.nextcloud_system_swap_total");
    ///<summary>nextcloud_system_theme</summary>
    public SensorEntity NextcloudSystemTheme => new(_haContext, "sensor.nextcloud_system_theme");
    ///<summary>nextcloud_system_version</summary>
    public SensorEntity NextcloudSystemVersion => new(_haContext, "sensor.nextcloud_system_version");
    ///<summary>Nykredit 0,5% 2053 med afdrag</summary>
    public SensorEntity Nykredit052053MedAfdrag => new(_haContext, "sensor.nykredit_05_2053_med_afdrag");
    ///<summary>Nykredit 1% 2053 med afdrag</summary>
    public SensorEntity Nykredit12053MedAfdrag => new(_haContext, "sensor.nykredit_1_2053_med_afdrag");
    ///<summary>Nykredit 1,5% 2053 med afdrag</summary>
    public SensorEntity Nykredit152053MedAfdrag => new(_haContext, "sensor.nykredit_15_2053_med_afdrag");
    ///<summary>Nykredit 2% 2050 med afdrag</summary>
    public SensorEntity Nykredit22050MedAfdrag => new(_haContext, "sensor.nykredit_2_2050_med_afdrag");
    ///<summary>Nykredit 2,5% 2053 med afdrag</summary>
    public SensorEntity Nykredit252053MedAfdrag => new(_haContext, "sensor.nykredit_25_2053_med_afdrag");
    ///<summary>Nykredit 3% 2053 med afdrag</summary>
    public SensorEntity Nykredit32053MedAfdrag => new(_haContext, "sensor.nykredit_3_2053_med_afdrag");
    ///<summary>Nykredit 3,5% 2053 med afdrag</summary>
    public SensorEntity Nykredit352053MedAfdrag => new(_haContext, "sensor.nykredit_35_2053_med_afdrag");
    ///<summary>Nykredit 4% 2053 med afdrag</summary>
    public SensorEntity Nykredit42053MedAfdrag => new(_haContext, "sensor.nykredit_4_2053_med_afdrag");
    ///<summary>Nykredit 5% 2053 med afdrag</summary>
    public SensorEntity Nykredit52053MedAfdrag => new(_haContext, "sensor.nykredit_5_2053_med_afdrag");
    ///<summary>Nykredit 6% 2053 med afdrag</summary>
    public SensorEntity Nykredit62053MedAfdrag => new(_haContext, "sensor.nykredit_6_2053_med_afdrag");
    ///<summary>ONEPLUS A3003 Battery Health</summary>
    public SensorEntity OneplusA3003BatteryHealth => new(_haContext, "sensor.oneplus_a3003_battery_health");
    ///<summary>ONEPLUS A3003 Battery Health</summary>
    public SensorEntity OneplusA3003BatteryHealth2 => new(_haContext, "sensor.oneplus_a3003_battery_health_2");
    ///<summary>ONEPLUS A3003 Battery State</summary>
    public SensorEntity OneplusA3003BatteryState => new(_haContext, "sensor.oneplus_a3003_battery_state");
    ///<summary>ONEPLUS A3003 Battery State</summary>
    public SensorEntity OneplusA3003BatteryState2 => new(_haContext, "sensor.oneplus_a3003_battery_state_2");
    ///<summary>ONEPLUS A3003 Charger Type</summary>
    public SensorEntity OneplusA3003ChargerType => new(_haContext, "sensor.oneplus_a3003_charger_type");
    ///<summary>ONEPLUS A3003 Charger Type</summary>
    public SensorEntity OneplusA3003ChargerType2 => new(_haContext, "sensor.oneplus_a3003_charger_type_2");
    ///<summary>ONEPLUS A3003 Do Not Disturb Sensor</summary>
    public SensorEntity OneplusA3003DoNotDisturbSensor2 => new(_haContext, "sensor.oneplus_a3003_do_not_disturb_sensor_2");
    ///<summary>ONEPLUS A3003 Geocoded Location</summary>
    public SensorEntity OneplusA3003GeocodedLocation2 => new(_haContext, "sensor.oneplus_a3003_geocoded_location_2");
    ///<summary>ONEPLUS A3003 Network Type</summary>
    public SensorEntity OneplusA3003NetworkType2 => new(_haContext, "sensor.oneplus_a3003_network_type_2");
    ///<summary>ONEPLUS A3003 Next Alarm</summary>
    public SensorEntity OneplusA3003NextAlarm2 => new(_haContext, "sensor.oneplus_a3003_next_alarm_2");
    ///<summary>ONEPLUS A3003 Public IP Address</summary>
    public SensorEntity OneplusA3003PublicIpAddress2 => new(_haContext, "sensor.oneplus_a3003_public_ip_address_2");
    ///<summary>ONEPLUS A3003 WiFi Connection</summary>
    public SensorEntity OneplusA3003WifiConnection2 => new(_haContext, "sensor.oneplus_a3003_wifi_connection_2");
    ///<summary>OpenWeatherMap Condition</summary>
    public SensorEntity OpenweathermapCondition => new(_haContext, "sensor.openweathermap_condition");
    ///<summary>OpenWeatherMap Forecast Condition</summary>
    public SensorEntity OpenweathermapForecastCondition => new(_haContext, "sensor.openweathermap_forecast_condition");
    ///<summary>OpenWeatherMap Forecast Time</summary>
    public SensorEntity OpenweathermapForecastTime => new(_haContext, "sensor.openweathermap_forecast_time");
    ///<summary>OpenWeatherMap Precipitation kind</summary>
    public SensorEntity OpenweathermapPrecipitationKind => new(_haContext, "sensor.openweathermap_precipitation_kind");
    ///<summary>OpenWeatherMap Weather</summary>
    public SensorEntity OpenweathermapWeather => new(_haContext, "sensor.openweathermap_weather");
    ///<summary>OpenWeatherMap Weather Code</summary>
    public SensorEntity OpenweathermapWeatherCode => new(_haContext, "sensor.openweathermap_weather_code");
    ///<summary>Partial: Entré (dør) Color options</summary>
    public SensorEntity PartialEntreDorColorOptions => new(_haContext, "sensor.partial_entre_dor_color_options");
    ///<summary>Partial: Entré (midt) Color options</summary>
    public SensorEntity PartialEntreMidtColorOptions => new(_haContext, "sensor.partial_entre_midt_color_options");
    ///<summary>Partial: Entré (stue) Color options</summary>
    public SensorEntity PartialEntreStueColorOptions => new(_haContext, "sensor.partial_entre_stue_color_options");
    ///<summary>Partial: Felena Tassel RGBW 1 Color options</summary>
    public SensorEntity PartialFelenaTasselRgbw1ColorOptions => new(_haContext, "sensor.partial_felena_tassel_rgbw_1_color_options");
    ///<summary>Partial: Felena Tassel RGBW 2 Color options</summary>
    public SensorEntity PartialFelenaTasselRgbw2ColorOptions => new(_haContext, "sensor.partial_felena_tassel_rgbw_2_color_options");
    ///<summary>Partial: Felena Tassel RGBW 3 Color options</summary>
    public SensorEntity PartialFelenaTasselRgbw3ColorOptions => new(_haContext, "sensor.partial_felena_tassel_rgbw_3_color_options");
    ///<summary>Partial: Fordelingsgang (køkken) Color options</summary>
    public SensorEntity PartialFordelingsgangKokkenColorOptions => new(_haContext, "sensor.partial_fordelingsgang_kokken_color_options");
    ///<summary>Partial: Fordelingsgang (midt) Color options</summary>
    public SensorEntity PartialFordelingsgangMidtColorOptions => new(_haContext, "sensor.partial_fordelingsgang_midt_color_options");
    ///<summary>Partial: Fordelingsgang (værelser) Color options</summary>
    public SensorEntity PartialFordelingsgangVaerelserColorOptions => new(_haContext, "sensor.partial_fordelingsgang_vaerelser_color_options");
    ///<summary>Partial: Køkkenvask 1 Color options</summary>
    public SensorEntity PartialKokkenvask1ColorOptions => new(_haContext, "sensor.partial_kokkenvask_1_color_options");
    ///<summary>Partial: Køkkenvask 2 Color options</summary>
    public SensorEntity PartialKokkenvask2ColorOptions => new(_haContext, "sensor.partial_kokkenvask_2_color_options");
    ///<summary>Partial: Køkkenvask 3 Color options</summary>
    public SensorEntity PartialKokkenvask3ColorOptions => new(_haContext, "sensor.partial_kokkenvask_3_color_options");
    ///<summary>RD 30 år / 1,5 % (DK0004619467)</summary>
    public SensorEntity Rd30Ar15Dk0004619467 => new(_haContext, "sensor.rd_30_ar_15_dk0004619467");
    ///<summary>RD 30 år / 2,0 % (DK0004622099)</summary>
    public SensorEntity Rd30Ar20Dk0004622099 => new(_haContext, "sensor.rd_30_ar_20_dk0004622099");
    ///<summary>RD 30 år / 2,5 % (DK0004622842)</summary>
    public SensorEntity Rd30Ar25Dk0004622842 => new(_haContext, "sensor.rd_30_ar_25_dk0004622842");
    ///<summary>RD 30 år / 3,0 % (DK0004622925)</summary>
    public SensorEntity Rd30Ar30Dk0004622925 => new(_haContext, "sensor.rd_30_ar_30_dk0004622925");
    ///<summary>RD 30 år / 4,0 % (DK0004623659)</summary>
    public SensorEntity Rd30Ar40Dk0004623659 => new(_haContext, "sensor.rd_30_ar_40_dk0004623659");
    ///<summary>RD 30 år / 4,0 % (DK0004627130)</summary>
    public SensorEntity Rd30Ar40Dk0004627130 => new(_haContext, "sensor.rd_30_ar_40_dk0004627130");
    ///<summary>RD 30 år / 5,0 % (DK0004623816)</summary>
    public SensorEntity Rd30Ar50Dk0004623816 => new(_haContext, "sensor.rd_30_ar_50_dk0004623816");
    ///<summary>RD 30 år / 5,0 % (DK0004626918)</summary>
    public SensorEntity Rd30Ar50Dk0004626918 => new(_haContext, "sensor.rd_30_ar_50_dk0004626918");
    ///<summary>RD 30 år / 6,0 % (DK0004624467)</summary>
    public SensorEntity Rd30Ar60Dk0004624467 => new(_haContext, "sensor.rd_30_ar_60_dk0004624467");
    ///<summary>Renault Zoe Remote engine start</summary>
    public SensorEntity RemoteEngineStart => new(_haContext, "sensor.remote_engine_start");
    ///<summary>Renovation: Emballage</summary>
    public SensorEntity RenovationEmballage => new(_haContext, "sensor.renovation_emballage");
    ///<summary>Emballage</summary>
    public SensorEntity RenovationEmballageFormatted => new(_haContext, "sensor.renovation_emballage_formatted");
    ///<summary>Renovation: Pap &amp; papir</summary>
    public SensorEntity RenovationPapPapir => new(_haContext, "sensor.renovation_pap_papir");
    ///<summary>Pap &amp; papir</summary>
    public SensorEntity RenovationPapPapirFormatted => new(_haContext, "sensor.renovation_pap_papir_formatted");
    ///<summary>Renovation: Restaffald</summary>
    public SensorEntity RenovationRestaffald => new(_haContext, "sensor.renovation_restaffald");
    ///<summary>Restaffald</summary>
    public SensorEntity RenovationRestaffaldFormatted => new(_haContext, "sensor.renovation_restaffald_formatted");
    ///<summary>Renovation: Storskrald</summary>
    public SensorEntity RenovationStorskrald => new(_haContext, "sensor.renovation_storskrald");
    ///<summary>Storskrald (afhentning)</summary>
    public SensorEntity RenovationStorskraldFormatted => new(_haContext, "sensor.renovation_storskrald_formatted");
    ///<summary>Renovation: Tømmedage</summary>
    public SensorEntity RenovationTommedage => new(_haContext, "sensor.renovation_tommedage");
    ///<summary>Roar-kontakt Action</summary>
    public SensorEntity RoarKontaktAction => new(_haContext, "sensor.roar_kontakt_action");
    ///<summary>Roar-kontakt Click</summary>
    public SensorEntity RoarKontaktClick => new(_haContext, "sensor.roar_kontakt_click");
    ///<summary>Roars værelse Tado mode</summary>
    public SensorEntity RoarsVaerelseTadoMode => new(_haContext, "sensor.roars_vaerelse_tado_mode");
    ///<summary>Last clean end</summary>
    public SensorEntity RoborockS5MaxLastCleanEnd => new(_haContext, "sensor.roborock_s5_max_last_clean_end");
    ///<summary>Last clean start</summary>
    public SensorEntity RoborockS5MaxLastCleanStart => new(_haContext, "sensor.roborock_s5_max_last_clean_start");
    ///<summary>Røgalarm: Køkken Battery level</summary>
    public SensorEntity RogalarmKokkenBatteryLevel => new(_haContext, "sensor.rogalarm_kokken_battery_level");
    ///<summary>Røgalarm: Køkken Test alarm result</summary>
    public SensorEntity RogalarmKokkenTestAlarmResult => new(_haContext, "sensor.rogalarm_kokken_test_alarm_result");
    ///<summary>Samsung Galaxy S8 Battery state</summary>
    public SensorEntity SamsungGalaxyS8BatteryState => new(_haContext, "sensor.samsung_galaxy_s8_battery_state");
    ///<summary>Samsung Galaxy S8 Charger type</summary>
    public SensorEntity SamsungGalaxyS8ChargerType => new(_haContext, "sensor.samsung_galaxy_s8_charger_type");
    ///<summary>Soveværelse Tado mode</summary>
    public SensorEntity SovevaerelseTadoMode => new(_haContext, "sensor.sovevaerelse_tado_mode");
    ///<summary>StøvsugerTS004F Action</summary>
    public SensorEntity Stovsugerts004fAction => new(_haContext, "sensor.stovsugerts004f_action");
    ///<summary>Stue Tado mode</summary>
    public SensorEntity StueTadoMode => new(_haContext, "sensor.stue_tado_mode");
    ///<summary>StueTS004F Action</summary>
    public SensorEntity Stuets004fAction => new(_haContext, "sensor.stuets004f_action");
    ///<summary>Sun Next dawn</summary>
    public SensorEntity SunNextDawn => new(_haContext, "sensor.sun_next_dawn");
    ///<summary>Sun Next dusk</summary>
    public SensorEntity SunNextDusk => new(_haContext, "sensor.sun_next_dusk");
    ///<summary>Sun Next midnight</summary>
    public SensorEntity SunNextMidnight => new(_haContext, "sensor.sun_next_midnight");
    ///<summary>Sun Next noon</summary>
    public SensorEntity SunNextNoon => new(_haContext, "sensor.sun_next_noon");
    ///<summary>Sun Next rising</summary>
    public SensorEntity SunNextRising => new(_haContext, "sensor.sun_next_rising");
    ///<summary>Sun Next setting</summary>
    public SensorEntity SunNextSetting => new(_haContext, "sensor.sun_next_setting");
    ///<summary>Toilet-kontakt Action</summary>
    public SensorEntity ToiletKontaktAction => new(_haContext, "sensor.toilet_kontakt_action");
    ///<summary>Toilet-kontakt Click</summary>
    public SensorEntity ToiletKontaktClick => new(_haContext, "sensor.toilet_kontakt_click");
    ///<summary>Toilet Tado mode</summary>
    public SensorEntity ToiletTadoMode => new(_haContext, "sensor.toilet_tado_mode");
    ///<summary>Underskabsbelysning-kontakt Action</summary>
    public SensorEntity UnderskabsbelysningKontaktAction => new(_haContext, "sensor.underskabsbelysning_kontakt_action");
    ///<summary>Underskabsbelysning-kontakt Click</summary>
    public SensorEntity UnderskabsbelysningKontaktClick => new(_haContext, "sensor.underskabsbelysning_kontakt_click");
    ///<summary>Valder Color options</summary>
    public SensorEntity ValderColorOptions => new(_haContext, "sensor.valder_color_options");
    ///<summary>Vindue: Bryggers Power outage count</summary>
    public SensorEntity VindueBryggersPowerOutageCount => new(_haContext, "sensor.vindue_bryggers_power_outage_count");
    ///<summary>Vindue: Ebbe Power outage count</summary>
    public SensorEntity VindueEbbePowerOutageCount => new(_haContext, "sensor.vindue_ebbe_power_outage_count");
    ///<summary>Vindue: Roar Power outage count</summary>
    public SensorEntity VindueRoarPowerOutageCount => new(_haContext, "sensor.vindue_roar_power_outage_count");
    ///<summary>Walk-in-closet-gardin Motor state</summary>
    public SensorEntity WalkInClosetGardinMotorState => new(_haContext, "sensor.walk_in_closet_gardin_motor_state");
    ///<summary>Walk-in-closet-kontakt Action</summary>
    public SensorEntity WalkInClosetKontaktAction => new(_haContext, "sensor.walk_in_closet_kontakt_action");
    ///<summary>Walk-in-closet-kontakt Click</summary>
    public SensorEntity WalkInClosetKontaktClick => new(_haContext, "sensor.walk_in_closet_kontakt_click");
    ///<summary>Walk-in-closet-shortcut Action</summary>
    public SensorEntity WalkInClosetShortcutAction => new(_haContext, "sensor.walk_in_closet_shortcut_action");
    ///<summary>Wallbox PulsarPlus SN 268384 Charging speed</summary>
    public SensorEntity WallboxPortalChargingSpeed => new(_haContext, "sensor.wallbox_portal_charging_speed");
    ///<summary>Wallbox PulsarPlus SN 268384 Cost</summary>
    public SensorEntity WallboxPortalCost => new(_haContext, "sensor.wallbox_portal_cost");
    ///<summary>Wallbox PulsarPlus SN 268384 Current mode</summary>
    public SensorEntity WallboxPortalCurrentMode => new(_haContext, "sensor.wallbox_portal_current_mode");
    ///<summary>Wallbox PulsarPlus SN 268384 Status description</summary>
    public SensorEntity WallboxPortalStatusDescription => new(_haContext, "sensor.wallbox_portal_status_description");
    ///<summary>XR500 (Gateway) External IP</summary>
    public SensorEntity Xr500GatewayExternalIp => new(_haContext, "sensor.xr500_gateway_external_ip");
    ///<summary>Zigbee2MQTT Bridge Version</summary>
    public SensorEntity Zigbee2mqttBridgeVersion => new(_haContext, "sensor.zigbee2mqtt_bridge_version");
    ///<summary>Renault Zoe Last battery activity</summary>
    public SensorEntity ZoeBatteryLastActivity => new(_haContext, "sensor.zoe_battery_last_activity");
    ///<summary>Renault Zoe Charge state</summary>
    public SensorEntity ZoeChargeState => new(_haContext, "sensor.zoe_charge_state");
    ///<summary>Renault Zoe Last HVAC activity</summary>
    public SensorEntity ZoeHvacLastActivity => new(_haContext, "sensor.zoe_hvac_last_activity");
    ///<summary>Renault Zoe Plug state</summary>
    public SensorEntity ZoePlugState => new(_haContext, "sensor.zoe_plug_state");
    ///<summary>Badeværelse Heating</summary>
    public NumericSensorEntity BadevaerelseHeating => new(_haContext, "sensor.badevaerelse_heating");
    ///<summary>Badeværelse Humidity</summary>
    public NumericSensorEntity BadevaerelseHumidity => new(_haContext, "sensor.badevaerelse_humidity");
    ///<summary>Badeværelse Temperature</summary>
    public NumericSensorEntity BadevaerelseTemperature => new(_haContext, "sensor.badevaerelse_temperature");
    ///<summary>Bevægelse i stuen Battery</summary>
    public NumericSensorEntity BevaegelseIStuenBattery => new(_haContext, "sensor.bevaegelse_i_stuen_battery");
    ///<summary>Bevægelse på Ebbes værelse Battery</summary>
    public NumericSensorEntity BevaegelsePaEbbesVaerelseBattery => new(_haContext, "sensor.bevaegelse_pa_ebbes_vaerelse_battery");
    ///<summary>Børnenes telefon Battery level</summary>
    public NumericSensorEntity BornenesTelefonBatteryLevel => new(_haContext, "sensor.bornenes_telefon_battery_level");
    ///<summary>BryggersTS004F Battery</summary>
    public NumericSensorEntity Bryggersts004fBattery => new(_haContext, "sensor.bryggersts004f_battery");
    ///<summary>Canon TS5300 series Black</summary>
    public NumericSensorEntity CanonTs5300SeriesBlack => new(_haContext, "sensor.canon_ts5300_series_black");
    ///<summary>Canon TS5300 series Color</summary>
    public NumericSensorEntity CanonTs5300SeriesColor => new(_haContext, "sensor.canon_ts5300_series_color");
    ///<summary>CEED Car Battery Level</summary>
    public NumericSensorEntity CeedCarBatteryLevel => new(_haContext, "sensor.ceed_car_battery_level");
    ///<summary>CEED Daily Driving Stats</summary>
    public NumericSensorEntity CeedDailyDrivingStats => new(_haContext, "sensor.ceed_daily_driving_stats");
    ///<summary>CEED Estimated Charge Duration</summary>
    public NumericSensorEntity CeedEstimatedChargeDuration => new(_haContext, "sensor.ceed_estimated_charge_duration");
    ///<summary>CEED Estimated Portable Charge Duration</summary>
    public NumericSensorEntity CeedEstimatedPortableChargeDuration => new(_haContext, "sensor.ceed_estimated_portable_charge_duration");
    ///<summary>CEED Estimated Station Charge Duration</summary>
    public NumericSensorEntity CeedEstimatedStationChargeDuration => new(_haContext, "sensor.ceed_estimated_station_charge_duration");
    ///<summary>CEED EV Battery Level</summary>
    public NumericSensorEntity CeedEvBatteryLevel => new(_haContext, "sensor.ceed_ev_battery_level");
    ///<summary>CEED EV Range</summary>
    public NumericSensorEntity CeedEvRange => new(_haContext, "sensor.ceed_ev_range");
    ///<summary>CEED Fuel Driving Range</summary>
    public NumericSensorEntity CeedFuelDrivingRange => new(_haContext, "sensor.ceed_fuel_driving_range");
    ///<summary>CEED Odometer</summary>
    public NumericSensorEntity CeedOdometer => new(_haContext, "sensor.ceed_odometer");
    ///<summary>CEED Set Temperature</summary>
    public NumericSensorEntity CeedSetTemperature => new(_haContext, "sensor.ceed_set_temperature");
    ///<summary>CEED Total Driving Range</summary>
    public NumericSensorEntity CeedTotalDrivingRange => new(_haContext, "sensor.ceed_total_driving_range");
    ///<summary>Dør: Stue Battery</summary>
    public NumericSensorEntity DorStueBattery => new(_haContext, "sensor.dor_stue_battery");
    ///<summary>Dør: Stue Temperature</summary>
    public NumericSensorEntity DorStueDeviceTemperature => new(_haContext, "sensor.dor_stue_device_temperature");
    ///<summary>Ebbe-kontakt Battery</summary>
    public NumericSensorEntity EbbeKontaktBattery => new(_haContext, "sensor.ebbe_kontakt_battery");
    ///<summary>EForsyning Amount remaining</summary>
    public NumericSensorEntity EforsyningAmountRemaining => new(_haContext, "sensor.eforsyning_amount_remaining");
    ///<summary>EForsyning Energy end</summary>
    public NumericSensorEntity EforsyningEnergyEnd => new(_haContext, "sensor.eforsyning_energy_end");
    ///<summary>EForsyning Energy exp-end</summary>
    public NumericSensorEntity EforsyningEnergyExpEnd => new(_haContext, "sensor.eforsyning_energy_exp_end");
    ///<summary>EForsyning Energy exp-used</summary>
    public NumericSensorEntity EforsyningEnergyExpUsed => new(_haContext, "sensor.eforsyning_energy_exp_used");
    ///<summary>EForsyning Energy start</summary>
    public NumericSensorEntity EforsyningEnergyStart => new(_haContext, "sensor.eforsyning_energy_start");
    ///<summary>EForsyning Energy total-used</summary>
    public NumericSensorEntity EforsyningEnergyTotalUsed => new(_haContext, "sensor.eforsyning_energy_total_used");
    ///<summary>EForsyning Energy total-used Cost</summary>
    public NumericSensorEntity EforsyningEnergyTotalUsedCost => new(_haContext, "sensor.eforsyning_energy_total_used_cost");
    ///<summary>EForsyning Energy use-prognosis</summary>
    public NumericSensorEntity EforsyningEnergyUsePrognosis => new(_haContext, "sensor.eforsyning_energy_use_prognosis");
    ///<summary>EForsyning Energy used</summary>
    public NumericSensorEntity EforsyningEnergyUsed => new(_haContext, "sensor.eforsyning_energy_used");
    ///<summary>EForsyning Energy used Cost</summary>
    public NumericSensorEntity EforsyningEnergyUsedCost => new(_haContext, "sensor.eforsyning_energy_used_cost");
    ///<summary>EForsyning Water end</summary>
    public NumericSensorEntity EforsyningWaterEnd => new(_haContext, "sensor.eforsyning_water_end");
    ///<summary>EForsyning Water exp-end</summary>
    public NumericSensorEntity EforsyningWaterExpEnd => new(_haContext, "sensor.eforsyning_water_exp_end");
    ///<summary>EForsyning Water exp-used</summary>
    public NumericSensorEntity EforsyningWaterExpUsed => new(_haContext, "sensor.eforsyning_water_exp_used");
    ///<summary>EForsyning Water start</summary>
    public NumericSensorEntity EforsyningWaterStart => new(_haContext, "sensor.eforsyning_water_start");
    ///<summary>EForsyning Water Temperature cooling</summary>
    public NumericSensorEntity EforsyningWaterTemperatureCooling => new(_haContext, "sensor.eforsyning_water_temperature_cooling");
    ///<summary>EForsyning Water Temperature exp-return</summary>
    public NumericSensorEntity EforsyningWaterTemperatureExpReturn => new(_haContext, "sensor.eforsyning_water_temperature_exp_return");
    ///<summary>EForsyning Water Temperature forward</summary>
    public NumericSensorEntity EforsyningWaterTemperatureForward => new(_haContext, "sensor.eforsyning_water_temperature_forward");
    ///<summary>EForsyning Water Temperature return</summary>
    public NumericSensorEntity EforsyningWaterTemperatureReturn => new(_haContext, "sensor.eforsyning_water_temperature_return");
    ///<summary>EForsyning Water Temperature return year-to-date</summary>
    public NumericSensorEntity EforsyningWaterTemperatureReturnYearToDate => new(_haContext, "sensor.eforsyning_water_temperature_return_year_to_date");
    ///<summary>EForsyning Water total-used</summary>
    public NumericSensorEntity EforsyningWaterTotalUsed => new(_haContext, "sensor.eforsyning_water_total_used");
    ///<summary>EForsyning Water use-prognosis</summary>
    public NumericSensorEntity EforsyningWaterUsePrognosis => new(_haContext, "sensor.eforsyning_water_use_prognosis");
    ///<summary>EForsyning Water used</summary>
    public NumericSensorEntity EforsyningWaterUsed => new(_haContext, "sensor.eforsyning_water_used");
    public NumericSensorEntity EloverblikEnergyTotalCost => new(_haContext, "sensor.eloverblik_energy_total_cost");
    ///<summary>Energi Data Service</summary>
    public NumericSensorEntity EnergiDataService => new(_haContext, "sensor.energi_data_service");
    ///<summary>Energi Data Service CO2</summary>
    public NumericSensorEntity EnergiDataServiceCo2 => new(_haContext, "sensor.energi_data_service_co2");
    ///<summary>Fam. Lerbæk Emkjær Outdoor temperature</summary>
    public NumericSensorEntity FamLerbaekEmkjaerOutdoorTemperature => new(_haContext, "sensor.fam_lerbaek_emkjaer_outdoor_temperature");
    ///<summary>Fam. Lerbæk Emkjær Solar percentage</summary>
    public NumericSensorEntity FamLerbaekEmkjaerSolarPercentage => new(_haContext, "sensor.fam_lerbaek_emkjaer_solar_percentage");
    ///<summary>Galaxy Watch4 (WLSW) Battery level</summary>
    public NumericSensorEntity GalaxyWatch4WlswBatteryLevel => new(_haContext, "sensor.galaxy_watch4_wlsw_battery_level");
    ///<summary>Garageport-knap, bil Battery</summary>
    public NumericSensorEntity GarageportKnapBilBattery => new(_haContext, "sensor.garageport_knap_bil_battery");
    ///<summary>Gennemsnitlig luftfugtighed</summary>
    public NumericSensorEntity GennemsnitligLuftfugtighed => new(_haContext, "sensor.gennemsnitlig_luftfugtighed");
    ///<summary>Gennemsnitlig temperatur</summary>
    public NumericSensorEntity GennemsnitligTemperatur => new(_haContext, "sensor.gennemsnitlig_temperatur");
    ///<summary>Grasputin Battery</summary>
    public NumericSensorEntity GrasputinBattery => new(_haContext, "sensor.grasputin_battery");
    ///<summary>Grasputin Battery Temperature</summary>
    public NumericSensorEntity GrasputinBatteryTemperature => new(_haContext, "sensor.grasputin_battery_temperature");
    ///<summary>Grasputin Battery Total Charge Cycles</summary>
    public NumericSensorEntity GrasputinBatteryTotalChargeCycles => new(_haContext, "sensor.grasputin_battery_total_charge_cycles");
    ///<summary>Battery Voltage</summary>
    public NumericSensorEntity GrasputinBatteryVoltageDead => new(_haContext, "sensor.grasputin_battery_voltage_dead");
    ///<summary>Grasputin Blades Current On Time</summary>
    public NumericSensorEntity GrasputinBladesCurrentOnTime => new(_haContext, "sensor.grasputin_blades_current_on_time");
    ///<summary>Blades Reset At</summary>
    public NumericSensorEntity GrasputinBladesResetAtDead => new(_haContext, "sensor.grasputin_blades_reset_at_dead");
    ///<summary>Blades Reset At Hours</summary>
    public NumericSensorEntity GrasputinBladesResetAtHoursDead => new(_haContext, "sensor.grasputin_blades_reset_at_hours_dead");
    ///<summary>Grasputin Blades Total On Time</summary>
    public NumericSensorEntity GrasputinBladesTotalOnTime => new(_haContext, "sensor.grasputin_blades_total_on_time");
    ///<summary>Daily Progress</summary>
    public NumericSensorEntity GrasputinDailyProgressDead => new(_haContext, "sensor.grasputin_daily_progress_dead");
    ///<summary>Grasputin Distance Driven</summary>
    public NumericSensorEntity GrasputinDistanceDriven => new(_haContext, "sensor.grasputin_distance_driven");
    ///<summary>Grasputin Pitch</summary>
    public NumericSensorEntity GrasputinPitch => new(_haContext, "sensor.grasputin_pitch");
    ///<summary>Rainsensor Delay</summary>
    public NumericSensorEntity GrasputinRainsensorDelay => new(_haContext, "sensor.grasputin_rainsensor_delay");
    ///<summary>Rainsensor Remaining</summary>
    public NumericSensorEntity GrasputinRainsensorRemainingDead => new(_haContext, "sensor.grasputin_rainsensor_remaining_dead");
    ///<summary>Grasputin Roll</summary>
    public NumericSensorEntity GrasputinRoll => new(_haContext, "sensor.grasputin_roll");
    ///<summary>Grasputin Rssi</summary>
    public NumericSensorEntity GrasputinRssi => new(_haContext, "sensor.grasputin_rssi");
    ///<summary>Grasputin Total Worktime</summary>
    public NumericSensorEntity GrasputinTotalWorktime => new(_haContext, "sensor.grasputin_total_worktime");
    ///<summary>Grasputin Yaw</summary>
    public NumericSensorEntity GrasputinYaw => new(_haContext, "sensor.grasputin_yaw");
    ///<summary>Gros backup-telefon Battery level</summary>
    public NumericSensorEntity GrosBackupTelefonBatteryLevel => new(_haContext, "sensor.gros_backup_telefon_battery_level");
    ///<summary>Gros Galaxy S20+ Battery level</summary>
    public NumericSensorEntity GrosGalaxyS20BatteryLevel => new(_haContext, "sensor.gros_galaxy_s20_battery_level");
    ///<summary>Gros Galaxy S20+ Battery power</summary>
    public NumericSensorEntity GrosGalaxyS20BatteryPower => new(_haContext, "sensor.gros_galaxy_s20_battery_power");
    ///<summary>Gros Galaxy S20+ Battery temperature</summary>
    public NumericSensorEntity GrosGalaxyS20BatteryTemperature => new(_haContext, "sensor.gros_galaxy_s20_battery_temperature");
    ///<summary>Gros Galaxy S20+ High accuracy update interval</summary>
    public NumericSensorEntity GrosGalaxyS20HighAccuracyUpdateInterval => new(_haContext, "sensor.gros_galaxy_s20_high_accuracy_update_interval");
    ///<summary>hacs</summary>
    public NumericSensorEntity Hacs => new(_haContext, "sensor.hacs");
    ///<summary>Havelamper Energy</summary>
    public NumericSensorEntity HavelamperEnergy => new(_haContext, "sensor.havelamper_energy");
    ///<summary>Havelamper Power</summary>
    public NumericSensorEntity HavelamperPower => new(_haContext, "sensor.havelamper_power");
    ///<summary>Hjørneterrasse Energy</summary>
    public NumericSensorEntity HjorneterrasseEnergy => new(_haContext, "sensor.hjorneterrasse_energy");
    ///<summary>Hjørneterrasse Power</summary>
    public NumericSensorEntity HjorneterrassePower => new(_haContext, "sensor.hjorneterrasse_power");
    ///<summary>Woodstock Sofabord 120 x 47 x 60 cm </summary>
    public NumericSensorEntity Ilvapricemonitor10557295642100692 => new(_haContext, "sensor.ilvapricemonitor_1055729_5642100692");
    ///<summary>Julelys Energy</summary>
    public NumericSensorEntity JulelysEnergy => new(_haContext, "sensor.julelys_energy");
    ///<summary>Julelys Power</summary>
    public NumericSensorEntity JulelysPower => new(_haContext, "sensor.julelys_power");
    ///<summary>Køkken / Gang Heating</summary>
    public NumericSensorEntity KokkenGangHeating => new(_haContext, "sensor.kokken_gang_heating");
    ///<summary>Køkken / Gang Humidity</summary>
    public NumericSensorEntity KokkenGangHumidity => new(_haContext, "sensor.kokken_gang_humidity");
    ///<summary>Køkken / Gang Temperature</summary>
    public NumericSensorEntity KokkenGangTemperature => new(_haContext, "sensor.kokken_gang_temperature");
    ///<summary>Køkkenvask-kontakt Battery</summary>
    public NumericSensorEntity KokkenvaskKontaktBattery => new(_haContext, "sensor.kokkenvask_kontakt_battery");
    ///<summary>Kristoffer - iPhone Average Active Pace</summary>
    public NumericSensorEntity KristofferIphoneAverageActivePace => new(_haContext, "sensor.kristoffer_iphone_average_active_pace");
    ///<summary>Kristoffer - iPhone Battery Level</summary>
    public NumericSensorEntity KristofferIphoneBatteryLevel => new(_haContext, "sensor.kristoffer_iphone_battery_level");
    ///<summary>Kristoffer - iPhone Distance</summary>
    public NumericSensorEntity KristofferIphoneDistance => new(_haContext, "sensor.kristoffer_iphone_distance");
    ///<summary>Kristoffer - iPhone Floors Ascended</summary>
    public NumericSensorEntity KristofferIphoneFloorsAscended => new(_haContext, "sensor.kristoffer_iphone_floors_ascended");
    ///<summary>Kristoffer - iPhone Floors Descended</summary>
    public NumericSensorEntity KristofferIphoneFloorsDescended => new(_haContext, "sensor.kristoffer_iphone_floors_descended");
    ///<summary>Kristoffer - iPhone Steps</summary>
    public NumericSensorEntity KristofferIphoneSteps => new(_haContext, "sensor.kristoffer_iphone_steps");
    ///<summary>Kristoffer - iPhone Storage</summary>
    public NumericSensorEntity KristofferIphoneStorage => new(_haContext, "sensor.kristoffer_iphone_storage");
    ///<summary>Kristoffers Galaxy S20 Ultra Battery level</summary>
    public NumericSensorEntity KristoffersGalaxyS20UltraBatteriniveau => new(_haContext, "sensor.kristoffers_galaxy_s20_ultra_batteriniveau");
    ///<summary>Kristoffers Galaxy S20 Ultra Battery power</summary>
    public NumericSensorEntity KristoffersGalaxyS20UltraBatteryPower => new(_haContext, "sensor.kristoffers_galaxy_s20_ultra_battery_power");
    ///<summary>Kristoffers Galaxy S20 Ultra Battery temperature</summary>
    public NumericSensorEntity KristoffersGalaxyS20UltraBatteryTemperature => new(_haContext, "sensor.kristoffers_galaxy_s20_ultra_battery_temperature");
    ///<summary>Kristoffers Galaxy S20 Ultra Bluetooth connection</summary>
    public NumericSensorEntity KristoffersGalaxyS20UltraBluetoothConnection => new(_haContext, "sensor.kristoffers_galaxy_s20_ultra_bluetooth_connection");
    ///<summary>Kristoffers Galaxy S20 Ultra High accuracy update interval</summary>
    public NumericSensorEntity KristoffersGalaxyS20UltraHighAccuracyUpdateInterval => new(_haContext, "sensor.kristoffers_galaxy_s20_ultra_high_accuracy_update_interval");
    ///<summary>Kristoffers Galaxy S20 Ultra Sleep segment</summary>
    public NumericSensorEntity KristoffersGalaxyS20UltraSleepSegment => new(_haContext, "sensor.kristoffers_galaxy_s20_ultra_sleep_segment");
    ///<summary>Kummefryser Energy</summary>
    public NumericSensorEntity KummefryserEnergy => new(_haContext, "sensor.kummefryser_energy");
    ///<summary>Kummefryser-forbrug</summary>
    public NumericSensorEntity KummefryserForbrug => new(_haContext, "sensor.kummefryser_forbrug");
    ///<summary>Kummefryser-forbrug, kWh</summary>
    public NumericSensorEntity KummefryserForbrugKwh => new(_haContext, "sensor.kummefryser_forbrug_kwh");
    ///<summary>Kummefryser Power</summary>
    public NumericSensorEntity KummefryserPower => new(_haContext, "sensor.kummefryser_power");
    ///<summary>Kummefryser, strømstyrke</summary>
    public NumericSensorEntity KummefryserStromstyrke => new(_haContext, "sensor.kummefryser_stromstyrke");
    ///<summary>Kummefryser temperatur Battery</summary>
    public NumericSensorEntity KummefryserTemperaturBattery => new(_haContext, "sensor.kummefryser_temperatur_battery");
    ///<summary>Kummefryser temperatur Humidity</summary>
    public NumericSensorEntity KummefryserTemperaturHumidity => new(_haContext, "sensor.kummefryser_temperatur_humidity");
    ///<summary>Kummefryser temperatur Temperature</summary>
    public NumericSensorEntity KummefryserTemperaturTemperature => new(_haContext, "sensor.kummefryser_temperatur_temperature");
    ///<summary>Ebbes værelse Heating</summary>
    public NumericSensorEntity LillebrorsVaerelseHeating => new(_haContext, "sensor.lillebrors_vaerelse_heating");
    ///<summary>Ebbes værelse Humidity</summary>
    public NumericSensorEntity LillebrorsVaerelseHumidity => new(_haContext, "sensor.lillebrors_vaerelse_humidity");
    ///<summary>Ebbes værelse Temperature</summary>
    public NumericSensorEntity LillebrorsVaerelseTemperature => new(_haContext, "sensor.lillebrors_vaerelse_temperature");
    ///<summary>Lys i indkørslen Energy</summary>
    public NumericSensorEntity LysIIndkorslenEnergy => new(_haContext, "sensor.lys_i_indkorslen_energy");
    ///<summary>Lys i indkørslen Power</summary>
    public NumericSensorEntity LysIIndkorslenPower => new(_haContext, "sensor.lys_i_indkorslen_power");
    ///<summary>Lys i indkørslen, strømstyrke</summary>
    public NumericSensorEntity LysIIndkorslenStromstyrke => new(_haContext, "sensor.lys_i_indkorslen_stromstyrke");
    ///<summary>Lys på loftet Energy</summary>
    public NumericSensorEntity LysPaaLoftetEnergy => new(_haContext, "sensor.lys_paa_loftet_energy");
    ///<summary>Lys på loftet Power</summary>
    public NumericSensorEntity LysPaaLoftetPower => new(_haContext, "sensor.lys_paa_loftet_power");
    ///<summary>nordpool_kwh_dk1_dkk_3_10_025</summary>
    public NumericSensorEntity NordpoolKwhDk1Dkk310025 => new(_haContext, "sensor.nordpool_kwh_dk1_dkk_3_10_025");
    ///<summary>ONEPLUS A3003 Battery Level</summary>
    public NumericSensorEntity OneplusA3003BatteryLevel => new(_haContext, "sensor.oneplus_a3003_battery_level");
    ///<summary>ONEPLUS A3003 Battery Level</summary>
    public NumericSensorEntity OneplusA3003BatteryLevel2 => new(_haContext, "sensor.oneplus_a3003_battery_level_2");
    ///<summary>ONEPLUS A3003 Battery Power</summary>
    public NumericSensorEntity OneplusA3003BatteryPower => new(_haContext, "sensor.oneplus_a3003_battery_power");
    ///<summary>ONEPLUS A3003 Battery Power</summary>
    public NumericSensorEntity OneplusA3003BatteryPower2 => new(_haContext, "sensor.oneplus_a3003_battery_power_2");
    ///<summary>ONEPLUS A3003 Battery Temperature</summary>
    public NumericSensorEntity OneplusA3003BatteryTemperature => new(_haContext, "sensor.oneplus_a3003_battery_temperature");
    ///<summary>ONEPLUS A3003 Battery Temperature</summary>
    public NumericSensorEntity OneplusA3003BatteryTemperature2 => new(_haContext, "sensor.oneplus_a3003_battery_temperature_2");
    ///<summary>ONEPLUS A3003 Bluetooth Connection</summary>
    public NumericSensorEntity OneplusA3003BluetoothConnection2 => new(_haContext, "sensor.oneplus_a3003_bluetooth_connection_2");
    ///<summary>OpenSky</summary>
    public NumericSensorEntity Opensky => new(_haContext, "sensor.opensky");
    ///<summary>OpenWeatherMap Cloud coverage</summary>
    public NumericSensorEntity OpenweathermapCloudCoverage => new(_haContext, "sensor.openweathermap_cloud_coverage");
    ///<summary>OpenWeatherMap Dew Point</summary>
    public NumericSensorEntity OpenweathermapDewPoint => new(_haContext, "sensor.openweathermap_dew_point");
    ///<summary>OpenWeatherMap Feels like temperature</summary>
    public NumericSensorEntity OpenweathermapFeelsLikeTemperature => new(_haContext, "sensor.openweathermap_feels_like_temperature");
    ///<summary>OpenWeatherMap Forecast Cloud coverage</summary>
    public NumericSensorEntity OpenweathermapForecastCloudCoverage => new(_haContext, "sensor.openweathermap_forecast_cloud_coverage");
    ///<summary>OpenWeatherMap Forecast Cloud coverage</summary>
    public NumericSensorEntity OpenweathermapForecastCloudCoverage2 => new(_haContext, "sensor.openweathermap_forecast_cloud_coverage_2");
    ///<summary>OpenWeatherMap Forecast Precipitation</summary>
    public NumericSensorEntity OpenweathermapForecastPrecipitation => new(_haContext, "sensor.openweathermap_forecast_precipitation");
    ///<summary>OpenWeatherMap Forecast Precipitation probability</summary>
    public NumericSensorEntity OpenweathermapForecastPrecipitationProbability => new(_haContext, "sensor.openweathermap_forecast_precipitation_probability");
    ///<summary>OpenWeatherMap Forecast Pressure</summary>
    public NumericSensorEntity OpenweathermapForecastPressure => new(_haContext, "sensor.openweathermap_forecast_pressure");
    ///<summary>OpenWeatherMap Forecast Temperature</summary>
    public NumericSensorEntity OpenweathermapForecastTemperature => new(_haContext, "sensor.openweathermap_forecast_temperature");
    ///<summary>OpenWeatherMap Forecast Temperature Low</summary>
    public NumericSensorEntity OpenweathermapForecastTemperatureLow => new(_haContext, "sensor.openweathermap_forecast_temperature_low");
    ///<summary>OpenWeatherMap Forecast Wind bearing</summary>
    public NumericSensorEntity OpenweathermapForecastWindBearing => new(_haContext, "sensor.openweathermap_forecast_wind_bearing");
    ///<summary>OpenWeatherMap Forecast Wind speed</summary>
    public NumericSensorEntity OpenweathermapForecastWindSpeed => new(_haContext, "sensor.openweathermap_forecast_wind_speed");
    ///<summary>OpenWeatherMap Humidity</summary>
    public NumericSensorEntity OpenweathermapHumidity => new(_haContext, "sensor.openweathermap_humidity");
    ///<summary>OpenWeatherMap Pressure</summary>
    public NumericSensorEntity OpenweathermapPressure => new(_haContext, "sensor.openweathermap_pressure");
    ///<summary>OpenWeatherMap Rain</summary>
    public NumericSensorEntity OpenweathermapRain => new(_haContext, "sensor.openweathermap_rain");
    ///<summary>OpenWeatherMap Snow</summary>
    public NumericSensorEntity OpenweathermapSnow => new(_haContext, "sensor.openweathermap_snow");
    ///<summary>OpenWeatherMap Temperature</summary>
    public NumericSensorEntity OpenweathermapTemperature => new(_haContext, "sensor.openweathermap_temperature");
    ///<summary>OpenWeatherMap UV Index</summary>
    public NumericSensorEntity OpenweathermapUvIndex => new(_haContext, "sensor.openweathermap_uv_index");
    ///<summary>OpenWeatherMap Visibility</summary>
    public NumericSensorEntity OpenweathermapVisibility => new(_haContext, "sensor.openweathermap_visibility");
    ///<summary>OpenWeatherMap Wind bearing</summary>
    public NumericSensorEntity OpenweathermapWindBearing => new(_haContext, "sensor.openweathermap_wind_bearing");
    ///<summary>OpenWeatherMap Wind speed</summary>
    public NumericSensorEntity OpenweathermapWindSpeed => new(_haContext, "sensor.openweathermap_wind_speed");
    ///<summary>Battery</summary>
    public NumericSensorEntity OricoHddDockingStationBattery => new(_haContext, "sensor.orico_hdd_docking_station_battery");
    ///<summary>Seedbox</summary>
    public NumericSensorEntity PlexSeedbox => new(_haContext, "sensor.plex_seedbox");
    ///<summary>Roar-kontakt Battery</summary>
    public NumericSensorEntity RoarKontaktBattery => new(_haContext, "sensor.roar_kontakt_battery");
    ///<summary>Roars værelse Heating</summary>
    public NumericSensorEntity RoarsVaerelseHeating => new(_haContext, "sensor.roars_vaerelse_heating");
    ///<summary>Roars værelse Humidity</summary>
    public NumericSensorEntity RoarsVaerelseHumidity => new(_haContext, "sensor.roars_vaerelse_humidity");
    ///<summary>Roars værelse Temperature</summary>
    public NumericSensorEntity RoarsVaerelseTemperature => new(_haContext, "sensor.roars_vaerelse_temperature");
    ///<summary>Current clean area</summary>
    public NumericSensorEntity RoborockS5MaxCurrentCleanArea => new(_haContext, "sensor.roborock_s5_max_current_clean_area");
    ///<summary>Current clean duration</summary>
    public NumericSensorEntity RoborockS5MaxCurrentCleanDuration => new(_haContext, "sensor.roborock_s5_max_current_clean_duration");
    ///<summary>Filter left</summary>
    public NumericSensorEntity RoborockS5MaxFilterLeft => new(_haContext, "sensor.roborock_s5_max_filter_left");
    ///<summary>Last clean area</summary>
    public NumericSensorEntity RoborockS5MaxLastCleanArea => new(_haContext, "sensor.roborock_s5_max_last_clean_area");
    ///<summary>Last clean duration</summary>
    public NumericSensorEntity RoborockS5MaxLastCleanDuration => new(_haContext, "sensor.roborock_s5_max_last_clean_duration");
    ///<summary>Main brush left</summary>
    public NumericSensorEntity RoborockS5MaxMainBrushLeft => new(_haContext, "sensor.roborock_s5_max_main_brush_left");
    ///<summary>Sensor dirty left</summary>
    public NumericSensorEntity RoborockS5MaxSensorDirtyLeft => new(_haContext, "sensor.roborock_s5_max_sensor_dirty_left");
    ///<summary>Side brush left</summary>
    public NumericSensorEntity RoborockS5MaxSideBrushLeft => new(_haContext, "sensor.roborock_s5_max_side_brush_left");
    ///<summary>Estimated distance</summary>
    public NumericSensorEntity S6937930a15c675accBddaEstimatedDistance => new(_haContext, "sensor.s6937930a15c675acc_bdda_estimated_distance");
    ///<summary>Estimated Distance</summary>
    public NumericSensorEntity S78f354bf382f3aa3c81fcEstimatedDistance => new(_haContext, "sensor.s78f354bf382f3aa3c_81fc_estimated_distance");
    ///<summary>Estimated Distance</summary>
    public NumericSensorEntity S9fc1e43d898f31bacDb8aEstimatedDistance => new(_haContext, "sensor.s9fc1e43d898f31bac_db8a_estimated_distance");
    ///<summary>Samsung Galaxy S8 Battery level</summary>
    public NumericSensorEntity SamsungGalaxyS8BatteryLevel => new(_haContext, "sensor.samsung_galaxy_s8_battery_level");
    ///<summary>Estimated distance</summary>
    public NumericSensorEntity SapheEstimatedDistance => new(_haContext, "sensor.saphe_estimated_distance");
    ///<summary>Estimated distance</summary>
    public NumericSensorEntity Sc8bfaff5ce07e22cc18b6EstimatedDistance => new(_haContext, "sensor.sc8bfaff5ce07e22cc_18b6_estimated_distance");
    ///<summary>Estimated distance</summary>
    public NumericSensorEntity Sd01db6144334011bc998aEstimatedDistance => new(_haContext, "sensor.sd01db6144334011bc_998a_estimated_distance");
    ///<summary>Seedbox Energy</summary>
    public NumericSensorEntity SeedboxEnergy => new(_haContext, "sensor.seedbox_energy");
    ///<summary>Seedbox Power</summary>
    public NumericSensorEntity SeedboxPower => new(_haContext, "sensor.seedbox_power");
    ///<summary>Smart Scale C1 Real-time weight</summary>
    public NumericSensorEntity SmartScaleC1RealTimeWeight => new(_haContext, "sensor.smart_scale_c1_real_time_weight");
    ///<summary>Smart Scale C1 Weight</summary>
    public NumericSensorEntity SmartScaleC1Weight => new(_haContext, "sensor.smart_scale_c1_weight");
    ///<summary>Soveværelse Heating</summary>
    public NumericSensorEntity SovevaerelseHeating => new(_haContext, "sensor.sovevaerelse_heating");
    ///<summary>Soveværelse Humidity</summary>
    public NumericSensorEntity SovevaerelseHumidity => new(_haContext, "sensor.sovevaerelse_humidity");
    ///<summary>Soveværelse Temperature</summary>
    public NumericSensorEntity SovevaerelseTemperature => new(_haContext, "sensor.sovevaerelse_temperature");
    ///<summary>StøvsugerTS004F Battery</summary>
    public NumericSensorEntity Stovsugerts004fBattery => new(_haContext, "sensor.stovsugerts004f_battery");
    ///<summary>Stue Heating</summary>
    public NumericSensorEntity StueHeating => new(_haContext, "sensor.stue_heating");
    ///<summary>Stue Humidity</summary>
    public NumericSensorEntity StueHumidity => new(_haContext, "sensor.stue_humidity");
    ///<summary>Stue Temperature</summary>
    public NumericSensorEntity StueTemperature => new(_haContext, "sensor.stue_temperature");
    ///<summary>StueTS004F Battery</summary>
    public NumericSensorEntity Stuets004fBattery => new(_haContext, "sensor.stuets004f_battery");
    ///<summary>Temperatur på badeværelset</summary>
    public NumericSensorEntity TemperatureBadevaerelse => new(_haContext, "sensor.temperature_badevaerelse");
    ///<summary>TGTG 365discount - Skanderborg, Kildevej (Frugt &amp; Grønt)</summary>
    public NumericSensorEntity Tgtg365discountSkanderborgKildevejFrugtGront => new(_haContext, "sensor.tgtg_365discount_skanderborg_kildevej_frugt_gront");
    ///<summary>TGTG Dankonfekt  - Tilst (Lykkepose)</summary>
    public NumericSensorEntity TgtgDankonfektTilstLykkepose => new(_haContext, "sensor.tgtg_dankonfekt_tilst_lykkepose");
    ///<summary>TGTG føtex - Skanderborg (Frugt &amp; Grønt)</summary>
    public NumericSensorEntity TgtgFotexSkanderborgFrugtGront => new(_haContext, "sensor.tgtg_fotex_skanderborg_frugt_gront");
    ///<summary>TGTG Lidl - Skanderborg (Frugt &amp; Grønt sen)</summary>
    public NumericSensorEntity TgtgLidlSkanderborgFrugtGrontSen => new(_haContext, "sensor.tgtg_lidl_skanderborg_frugt_gront_sen");
    ///<summary>TGTG Lidl - Skanderborg (Frugt &amp; Grønt tidlig)</summary>
    public NumericSensorEntity TgtgLidlSkanderborgFrugtGrontTidlig => new(_haContext, "sensor.tgtg_lidl_skanderborg_frugt_gront_tidlig");
    ///<summary>TGTG Netto - Søtoften 2A (Frugt &amp; Grønt)</summary>
    public NumericSensorEntity TgtgNettoSotoften2aFrugtGront => new(_haContext, "sensor.tgtg_netto_sotoften_2a_frugt_gront");
    ///<summary>TGTG Netto - Søtoften 2A (Mejeri, Kød &amp; Køl)</summary>
    public NumericSensorEntity TgtgNettoSotoften2aMejeriKodKol => new(_haContext, "sensor.tgtg_netto_sotoften_2a_mejeri_kod_kol");
    ///<summary>TGTG Netto - Vesteralle 2 B.C.K. (Frugt &amp; Grønt)</summary>
    public NumericSensorEntity TgtgNettoVesteralle2BCKFrugtGront => new(_haContext, "sensor.tgtg_netto_vesteralle_2_b_c_k_frugt_gront");
    ///<summary>TGTG S.Brød (Brød &amp; Bagværk)</summary>
    public NumericSensorEntity TgtgSBrodBrodBagvaerk => new(_haContext, "sensor.tgtg_s_brod_brod_bagvaerk");
    ///<summary>TGTG SushiArt - Skanderborg (Aften)</summary>
    public NumericSensorEntity TgtgSushimaniaSkanderborgAften => new(_haContext, "sensor.tgtg_sushimania_skanderborg_aften");
    ///<summary>TGTG SushiArt - Skanderborg (Frokost)</summary>
    public NumericSensorEntity TgtgSushimaniaSkanderborgFrokost => new(_haContext, "sensor.tgtg_sushimania_skanderborg_frokost");
    ///<summary>Toilet Heating</summary>
    public NumericSensorEntity ToiletHeating => new(_haContext, "sensor.toilet_heating");
    ///<summary>Toilet Humidity</summary>
    public NumericSensorEntity ToiletHumidity => new(_haContext, "sensor.toilet_humidity");
    ///<summary>Toilet-kontakt Battery</summary>
    public NumericSensorEntity ToiletKontaktBattery => new(_haContext, "sensor.toilet_kontakt_battery");
    ///<summary>Toilet Temperature</summary>
    public NumericSensorEntity ToiletTemperature => new(_haContext, "sensor.toilet_temperature");
    ///<summary>Tørretumbler Energy</summary>
    public NumericSensorEntity TorretumblerEnergy => new(_haContext, "sensor.torretumbler_energy");
    ///<summary>Tørretumbler Power</summary>
    public NumericSensorEntity TorretumblerPower => new(_haContext, "sensor.torretumbler_power");
    ///<summary>Underskabsbelysning-kontakt Battery</summary>
    public NumericSensorEntity UnderskabsbelysningKontaktBattery => new(_haContext, "sensor.underskabsbelysning_kontakt_battery");
    ///<summary>Vaskemaskine Energy</summary>
    public NumericSensorEntity VaskemaskineEnergy => new(_haContext, "sensor.vaskemaskine_energy");
    ///<summary>Vaskemaskine Power</summary>
    public NumericSensorEntity VaskemaskinePower => new(_haContext, "sensor.vaskemaskine_power");
    ///<summary>Vindue: Bryggers Battery</summary>
    public NumericSensorEntity VindueBryggersBattery => new(_haContext, "sensor.vindue_bryggers_battery");
    ///<summary>Vindue: Bryggers Temperature</summary>
    public NumericSensorEntity VindueBryggersDeviceTemperature => new(_haContext, "sensor.vindue_bryggers_device_temperature");
    ///<summary>Vindue: Ebbe Battery</summary>
    public NumericSensorEntity VindueEbbeBattery => new(_haContext, "sensor.vindue_ebbe_battery");
    ///<summary>Vindue: Ebbe Temperature</summary>
    public NumericSensorEntity VindueEbbeDeviceTemperature => new(_haContext, "sensor.vindue_ebbe_device_temperature");
    ///<summary>Vindue: Roar Battery</summary>
    public NumericSensorEntity VindueRoarBattery => new(_haContext, "sensor.vindue_roar_battery");
    ///<summary>Vindue: Roar Temperature</summary>
    public NumericSensorEntity VindueRoarDeviceTemperature => new(_haContext, "sensor.vindue_roar_device_temperature");
    ///<summary>Walk-in-closet-gardin Battery</summary>
    public NumericSensorEntity WalkInClosetGardinBattery => new(_haContext, "sensor.walk_in_closet_gardin_battery");
    ///<summary>Walk-in-closet-gardin Temperature</summary>
    public NumericSensorEntity WalkInClosetGardinDeviceTemperature => new(_haContext, "sensor.walk_in_closet_gardin_device_temperature");
    ///<summary>Walk-in-closet-kontakt Battery</summary>
    public NumericSensorEntity WalkInClosetKontaktBattery => new(_haContext, "sensor.walk_in_closet_kontakt_battery");
    ///<summary>Walk-in-closet-shortcut Battery</summary>
    public NumericSensorEntity WalkInClosetShortcutBattery => new(_haContext, "sensor.walk_in_closet_shortcut_battery");
    ///<summary>Wallbox PulsarPlus SN 268384 Added energy</summary>
    public NumericSensorEntity WallboxPortalAddedEnergy => new(_haContext, "sensor.wallbox_portal_added_energy");
    ///<summary>Wallbox PulsarPlus SN 268384 Added range</summary>
    public NumericSensorEntity WallboxPortalAddedRange => new(_haContext, "sensor.wallbox_portal_added_range");
    ///<summary>Wallbox PulsarPlus SN 268384 Charging power</summary>
    public NumericSensorEntity WallboxPortalChargingPower => new(_haContext, "sensor.wallbox_portal_charging_power");
    ///<summary>Wallbox PulsarPlus SN 268384 Depot price</summary>
    public NumericSensorEntity WallboxPortalDepotPrice => new(_haContext, "sensor.wallbox_portal_depot_price");
    ///<summary>Wallbox PulsarPlus SN 268384 Discharged energy</summary>
    public NumericSensorEntity WallboxPortalDischargedEnergy => new(_haContext, "sensor.wallbox_portal_discharged_energy");
    ///<summary>Wallbox PulsarPlus SN 268384 Energy price</summary>
    public NumericSensorEntity WallboxPortalEnergyPrice => new(_haContext, "sensor.wallbox_portal_energy_price");
    ///<summary>Wallbox PulsarPlus SN 268384 Max available power</summary>
    public NumericSensorEntity WallboxPortalMaxAvailablePower => new(_haContext, "sensor.wallbox_portal_max_available_power");
    ///<summary>Wallbox PulsarPlus SN 268384 Max charging current</summary>
    public NumericSensorEntity WallboxPortalMaxChargingCurrent => new(_haContext, "sensor.wallbox_portal_max_charging_current");
    ///<summary>Wallbox PulsarPlus SN 268384 State of charge</summary>
    public NumericSensorEntity WallboxPortalStateOfCharge => new(_haContext, "sensor.wallbox_portal_state_of_charge");
    ///<summary>XR500 (Gateway) Download speed</summary>
    public NumericSensorEntity Xr500GatewayDownloadSpeed => new(_haContext, "sensor.xr500_gateway_download_speed");
    ///<summary>XR500 (Gateway) Upload speed</summary>
    public NumericSensorEntity Xr500GatewayUploadSpeed => new(_haContext, "sensor.xr500_gateway_upload_speed");
    ///<summary>Zigbee2MQTT Bridge Permit join timeout</summary>
    public NumericSensorEntity Zigbee2mqttBridgePermitJoinTimeout => new(_haContext, "sensor.zigbee2mqtt_bridge_permit_join_timeout");
    ///<summary>Renault Zoe Battery autonomy</summary>
    public NumericSensorEntity ZoeBatteryAutonomy => new(_haContext, "sensor.zoe_battery_autonomy");
    ///<summary>Renault Zoe Battery available energy</summary>
    public NumericSensorEntity ZoeBatteryAvailableEnergy => new(_haContext, "sensor.zoe_battery_available_energy");
    ///<summary>Zoe EV Battery Level</summary>
    public NumericSensorEntity ZoeBatteryLevel => new(_haContext, "sensor.zoe_battery_level");
    ///<summary>Renault Zoe Battery temperature</summary>
    public NumericSensorEntity ZoeBatteryTemperature => new(_haContext, "sensor.zoe_battery_temperature");
    ///<summary>Renault Zoe Charging power</summary>
    public NumericSensorEntity ZoeChargingPower => new(_haContext, "sensor.zoe_charging_power");
    ///<summary>Renault Zoe Charging remaining time</summary>
    public NumericSensorEntity ZoeChargingRemainingTime => new(_haContext, "sensor.zoe_charging_remaining_time");
    ///<summary>Renault Zoe HVAC SoC threshold</summary>
    public NumericSensorEntity ZoeHvacSocThreshold => new(_haContext, "sensor.zoe_hvac_soc_threshold");
    ///<summary>Renault Zoe Mileage</summary>
    public NumericSensorEntity ZoeMileage => new(_haContext, "sensor.zoe_mileage");
    ///<summary>Renault Zoe Outside temperature</summary>
    public NumericSensorEntity ZoeOutsideTemperature => new(_haContext, "sensor.zoe_outside_temperature");
}

public partial class SunEntities
{
    private readonly IHaContext _haContext;
    public SunEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sun</summary>
    public SunEntity Sun => new(_haContext, "sun.sun");
}

public partial class SwitchEntities
{
    private readonly IHaContext _haContext;
    public SwitchEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Ceed: Force update</summary>
    public SwitchEntity CeedForceUpdate => new(_haContext, "switch.ceed_force_update");
    ///<summary>C&apos;eed: Charge</summary>
    public SwitchEntity CeedToggleCharging => new(_haContext, "switch.ceed_toggle_charging");
    ///<summary>Garagedør</summary>
    public SwitchEntity GaragedorStateIcons => new(_haContext, "switch.garagedor_state_icons");
    ///<summary>Garageport</summary>
    public SwitchEntity Garageport => new(_haContext, "switch.garageport");
    ///<summary>Locked</summary>
    public SwitchEntity GrasputinLockedDead => new(_haContext, "switch.grasputin_locked_dead");
    ///<summary>Grasputin Party Mode</summary>
    public SwitchEntity GrasputinPartyMode => new(_haContext, "switch.grasputin_party_mode");
    ///<summary>Havelamper</summary>
    public SwitchEntity Havelamper => new(_haContext, "switch.havelamper");
    ///<summary>Hjørneterrasse</summary>
    public SwitchEntity Hjorneterrasse => new(_haContext, "switch.hjorneterrasse");
    ///<summary>Email on event</summary>
    public SwitchEntity IndkorselEmailOnEvent => new(_haContext, "switch.indkorsel_email_on_event");
    ///<summary>FTP upload</summary>
    public SwitchEntity IndkorselFtpUpload => new(_haContext, "switch.indkorsel_ftp_upload");
    ///<summary>Infra red lights in night mode</summary>
    public SwitchEntity IndkorselInfraRedLightsInNightMode => new(_haContext, "switch.indkorsel_infra_red_lights_in_night_mode");
    ///<summary>Push notifications</summary>
    public SwitchEntity IndkorselPushNotifications => new(_haContext, "switch.indkorsel_push_notifications");
    ///<summary>Record</summary>
    public SwitchEntity IndkorselRecord => new(_haContext, "switch.indkorsel_record");
    ///<summary>Record audio</summary>
    public SwitchEntity IndkorselRecordAudio => new(_haContext, "switch.indkorsel_record_audio");
    ///<summary>Julelys</summary>
    public SwitchEntity Julelys => new(_haContext, "switch.julelys");
    ///<summary>Kummefryser</summary>
    public SwitchEntity Kummefryser => new(_haContext, "switch.kummefryser");
    ///<summary>Legeværelse Crossfade</summary>
    public SwitchEntity LegevaerelseCrossfade => new(_haContext, "switch.legevaerelse_crossfade");
    ///<summary>Legeværelse Loudness</summary>
    public SwitchEntity LegevaerelseLoudness => new(_haContext, "switch.legevaerelse_loudness");
    ///<summary>Lys i indkørslen</summary>
    public SwitchEntity LysIIndkorslen => new(_haContext, "switch.lys_i_indkorslen");
    ///<summary>Lys på loftet</summary>
    public SwitchEntity LysPaaLoftet => new(_haContext, "switch.lys_paa_loftet");
    ///<summary>netdaemon_campenauktioner</summary>
    public SwitchEntity NetdaemonCampenauktioner => new(_haContext, "switch.netdaemon_campenauktioner");
    ///<summary>netdaemon_car_not_charging_alarm_app</summary>
    public SwitchEntity NetdaemonCarNotChargingAlarmApp => new(_haContext, "switch.netdaemon_car_not_charging_alarm_app");
    ///<summary>netdaemon_carnotchargingalarmapp</summary>
    public SwitchEntity NetdaemonCarnotchargingalarmapp => new(_haContext, "switch.netdaemon_carnotchargingalarmapp");
    ///<summary>netdaemon_garbage_collection_alarm_app</summary>
    public SwitchEntity NetdaemonGarbageCollectionAlarmApp => new(_haContext, "switch.netdaemon_garbage_collection_alarm_app");
    ///<summary>netdaemon_garbagecollectionalarmapp</summary>
    public SwitchEntity NetdaemonGarbagecollectionalarmapp => new(_haContext, "switch.netdaemon_garbagecollectionalarmapp");
    ///<summary>netdaemon_generatedappbase</summary>
    public SwitchEntity NetdaemonGeneratedappbase => new(_haContext, "switch.netdaemon_generatedappbase");
    ///<summary>netdaemon_hello_world_app</summary>
    public SwitchEntity NetdaemonHelloWorldApp => new(_haContext, "switch.netdaemon_hello_world_app");
    ///<summary>netdaemon_helloappcontext</summary>
    public SwitchEntity NetdaemonHelloappcontext => new(_haContext, "switch.netdaemon_helloappcontext");
    ///<summary>netdaemon_helloworldapp</summary>
    public SwitchEntity NetdaemonHelloworldapp => new(_haContext, "switch.netdaemon_helloworldapp");
    ///<summary>netdaemon_lightonmovement</summary>
    public SwitchEntity NetdaemonLightonmovement => new(_haContext, "switch.netdaemon_lightonmovement");
    ///<summary>netdaemon_nordlux_integration</summary>
    public SwitchEntity NetdaemonNordluxIntegration => new(_haContext, "switch.netdaemon_nordlux_integration");
    ///<summary>netdaemon_reset_lights_app</summary>
    public SwitchEntity NetdaemonResetLightsApp => new(_haContext, "switch.netdaemon_reset_lights_app");
    ///<summary>netdaemon_schedulingapp</summary>
    public SwitchEntity NetdaemonSchedulingapp => new(_haContext, "switch.netdaemon_schedulingapp");
    ///<summary>netdaemon_voice_alarm_app</summary>
    public SwitchEntity NetdaemonVoiceAlarmApp => new(_haContext, "switch.netdaemon_voice_alarm_app");
    ///<summary>netdaemon_voicealarmapp</summary>
    public SwitchEntity NetdaemonVoicealarmapp => new(_haContext, "switch.netdaemon_voicealarmapp");
    ///<summary>netdaemon_yaml_config_app</summary>
    public SwitchEntity NetdaemonYamlConfigApp => new(_haContext, "switch.netdaemon_yaml_config_app");
    public SwitchEntity OricoHddDockingStation => new(_haContext, "switch.orico_hdd_docking_station");
    ///<summary>Partial: Garageport (højre) Do not disturb</summary>
    public SwitchEntity PartialGarageportHojreDoNotDisturb => new(_haContext, "switch.partial_garageport_hojre_do_not_disturb");
    ///<summary>Partial: Garageport (venstre) Do not disturb</summary>
    public SwitchEntity PartialGarageportVenstreDoNotDisturb => new(_haContext, "switch.partial_garageport_venstre_do_not_disturb");
    ///<summary>Partial: Indkørsel 1 Do not disturb</summary>
    public SwitchEntity PartialIndkorsel1DoNotDisturb => new(_haContext, "switch.partial_indkorsel_1_do_not_disturb");
    ///<summary>Partial: Indkørsel 2 Do not disturb</summary>
    public SwitchEntity PartialIndkorsel2DoNotDisturb => new(_haContext, "switch.partial_indkorsel_2_do_not_disturb");
    ///<summary>Partial: Indkørsel 3 Do not disturb</summary>
    public SwitchEntity PartialIndkorsel3DoNotDisturb => new(_haContext, "switch.partial_indkorsel_3_do_not_disturb");
    ///<summary>Partial: Indkørsel 4 Do not disturb</summary>
    public SwitchEntity PartialIndkorsel4DoNotDisturb => new(_haContext, "switch.partial_indkorsel_4_do_not_disturb");
    ///<summary>Partial: Indkørsel 5 Do not disturb</summary>
    public SwitchEntity PartialIndkorsel5DoNotDisturb => new(_haContext, "switch.partial_indkorsel_5_do_not_disturb");
    ///<summary>Røgalarm: Køkken Alarm</summary>
    public SwitchEntity RogalarmKokkenAlarm => new(_haContext, "switch.rogalarm_kokken_alarm");
    ///<summary>Røgalarm: Køkken Silence siren</summary>
    public SwitchEntity RogalarmKokkenSilenceSiren => new(_haContext, "switch.rogalarm_kokken_silence_siren");
    ///<summary>Røgalarm: Køkken Test alarm</summary>
    public SwitchEntity RogalarmKokkenTestAlarm => new(_haContext, "switch.rogalarm_kokken_test_alarm");
    ///<summary>Seedbox</summary>
    public SwitchEntity Seedbox => new(_haContext, "switch.seedbox");
    ///<summary>Garagedør</summary>
    public SwitchEntity SonoffGaragedor => new(_haContext, "switch.sonoff_garagedor");
    ///<summary>Sonoff switch</summary>
    public SwitchEntity SonoffSwitch => new(_haContext, "switch.sonoff_switch");
    ///<summary>Spejllys Do not disturb</summary>
    public SwitchEntity SpejllysDoNotDisturb => new(_haContext, "switch.spejllys_do_not_disturb");
    ///<summary>Tørretumbler</summary>
    public SwitchEntity Torretumbler => new(_haContext, "switch.torretumbler");
    ///<summary>Vaskemaskine</summary>
    public SwitchEntity Vaskemaskine => new(_haContext, "switch.vaskemaskine");
    ///<summary>Wallbox PulsarPlus SN 268384 Pause/resume</summary>
    public SwitchEntity WallboxPortalPauseResume => new(_haContext, "switch.wallbox_portal_pause_resume");
    ///<summary>Zigbee2MQTT Bridge Permit join</summary>
    public SwitchEntity Zigbee2mqttBridgePermitJoin => new(_haContext, "switch.zigbee2mqtt_bridge_permit_join");
    ///<summary>zigbee2mqtt: Permit join</summary>
    public SwitchEntity Zigbee2mqttPermitJoin => new(_haContext, "switch.zigbee2mqtt_permit_join");
}

public partial class TtsEntities
{
    private readonly IHaContext _haContext;
    public TtsEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Google da dk</summary>
    public TtsEntity GoogleDaDk => new(_haContext, "tts.google_da_dk");
    ///<summary>Google en com</summary>
    public TtsEntity GoogleEnCom => new(_haContext, "tts.google_en_com");
}

public partial class UpdateEntities
{
    private readonly IHaContext _haContext;
    public UpdateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>AirCast Update</summary>
    public UpdateEntity AircastUpdate => new(_haContext, "update.aircast_update");
    ///<summary>AppDaemon Update</summary>
    public UpdateEntity AppdaemonUpdate => new(_haContext, "update.appdaemon_update");
    ///<summary>Ballon</summary>
    public UpdateEntity Ballon => new(_haContext, "update.ballon");
    ///<summary>Bryggers</summary>
    public UpdateEntity Bryggers => new(_haContext, "update.bryggers");
    ///<summary>Duck DNS Update</summary>
    public UpdateEntity DuckDnsUpdate => new(_haContext, "update.duck_dns_update");
    ///<summary>Ebbe-kontakt</summary>
    public UpdateEntity EbbeKontakt => new(_haContext, "update.ebbe_kontakt");
    ///<summary>ESPHome Update</summary>
    public UpdateEntity EsphomeUpdate => new(_haContext, "update.esphome_update");
    ///<summary>eWeLink Smart Home Update</summary>
    public UpdateEntity EwelinkSmartHomeUpdate => new(_haContext, "update.ewelink_smart_home_update");
    ///<summary>Flowerpot VP1</summary>
    public UpdateEntity FlowerpotVp1 => new(_haContext, "update.flowerpot_vp1");
    ///<summary>Frigate (Full Access) Update</summary>
    public UpdateEntity FrigateFullAccessUpdate => new(_haContext, "update.frigate_full_access_update");
    ///<summary>Garage-lanterne</summary>
    public UpdateEntity GarageLanterne => new(_haContext, "update.garage_lanterne");
    ///<summary>Garageport-knap, bil</summary>
    public UpdateEntity GarageportKnapBil => new(_haContext, "update.garageport_knap_bil");
    ///<summary>Git pull Update</summary>
    public UpdateEntity GitPullUpdate => new(_haContext, "update.git_pull_update");
    ///<summary>Havelamper</summary>
    public UpdateEntity Havelamper => new(_haContext, "update.havelamper");
    ///<summary>Hjørneterrasse</summary>
    public UpdateEntity Hjorneterrasse => new(_haContext, "update.hjorneterrasse");
    ///<summary>Home Assistant Core Update</summary>
    public UpdateEntity HomeAssistantCoreUpdate => new(_haContext, "update.home_assistant_core_update");
    ///<summary>Home Assistant Operating System Update</summary>
    public UpdateEntity HomeAssistantOperatingSystemUpdate => new(_haContext, "update.home_assistant_operating_system_update");
    ///<summary>Home Assistant Supervisor Update</summary>
    public UpdateEntity HomeAssistantSupervisorUpdate => new(_haContext, "update.home_assistant_supervisor_update");
    ///<summary>Firmware</summary>
    public UpdateEntity IndkorselFirmware => new(_haContext, "update.indkorsel_firmware");
    ///<summary>Julelys</summary>
    public UpdateEntity Julelys => new(_haContext, "update.julelys");
    ///<summary>Kanin-astronaut</summary>
    public UpdateEntity KaninAstronaut => new(_haContext, "update.kanin_astronaut");
    ///<summary>Køkkenvask-kontakt</summary>
    public UpdateEntity KokkenvaskKontakt => new(_haContext, "update.kokkenvask_kontakt");
    ///<summary>Kummefryser</summary>
    public UpdateEntity Kummefryser => new(_haContext, "update.kummefryser");
    ///<summary>Lys i indkørslen</summary>
    public UpdateEntity LysIIndkorslen => new(_haContext, "update.lys_i_indkorslen");
    ///<summary>Lys på loftet</summary>
    public UpdateEntity LysPaaLoftet => new(_haContext, "update.lys_paa_loftet");
    ///<summary>Mosquitto broker Update</summary>
    public UpdateEntity MosquittoBrokerUpdate => new(_haContext, "update.mosquitto_broker_update");
    ///<summary>Måne</summary>
    public UpdateEntity Maane => new(_haContext, "update.maane");
    ///<summary>NetDaemon V3.1 (.NET 7) Update</summary>
    public UpdateEntity NetdaemonV31Net7Update => new(_haContext, "update.netdaemon_v3_1_net_7_update");
    ///<summary>NetDaemon V3 - beta Update</summary>
    public UpdateEntity NetdaemonV3BetaUpdate => new(_haContext, "update.netdaemon_v3_beta_update");
    ///<summary>NetDaemon V4 (.NET 8) Update</summary>
    public UpdateEntity NetdaemonV4Net8Update => new(_haContext, "update.netdaemon_v4_net_8_update");
    ///<summary>Node-RED Update</summary>
    public UpdateEntity NodeRedUpdate => new(_haContext, "update.node_red_update");
    ///<summary>Partial: Aläng 1</summary>
    public UpdateEntity PartialAlang1 => new(_haContext, "update.partial_alang_1");
    ///<summary>Partial: Aläng 2</summary>
    public UpdateEntity PartialAlang2 => new(_haContext, "update.partial_alang_2");
    ///<summary>Partial: Aläng 3</summary>
    public UpdateEntity PartialAlang3 => new(_haContext, "update.partial_alang_3");
    ///<summary>Partial: Badeværelse GU5.3 Bad</summary>
    public UpdateEntity PartialBadevaerelseGu53Bad => new(_haContext, "update.partial_badevaerelse_gu5_3_bad");
    ///<summary>Partial: Badeværelse GU5.3 Midt</summary>
    public UpdateEntity PartialBadevaerelseGu53Midt => new(_haContext, "update.partial_badevaerelse_gu5_3_midt");
    ///<summary>Partial: Badeværelse GU5.3 Toilet</summary>
    public UpdateEntity PartialBadevaerelseGu53Toilet => new(_haContext, "update.partial_badevaerelse_gu5_3_toilet");
    ///<summary>Partial: Entré (dør)</summary>
    public UpdateEntity PartialEntreDor => new(_haContext, "update.partial_entre_dor");
    ///<summary>Partial: Entré (midt)</summary>
    public UpdateEntity PartialEntreMidt => new(_haContext, "update.partial_entre_midt");
    ///<summary>Partial: Entré (stue)</summary>
    public UpdateEntity PartialEntreStue => new(_haContext, "update.partial_entre_stue");
    ///<summary>Partial: Felena Tassel RGBW 1</summary>
    public UpdateEntity PartialFelenaTasselRgbw1 => new(_haContext, "update.partial_felena_tassel_rgbw_1");
    ///<summary>Partial: Felena Tassel RGBW 2</summary>
    public UpdateEntity PartialFelenaTasselRgbw2 => new(_haContext, "update.partial_felena_tassel_rgbw_2");
    ///<summary>Partial: Felena Tassel RGBW 3</summary>
    public UpdateEntity PartialFelenaTasselRgbw3 => new(_haContext, "update.partial_felena_tassel_rgbw_3");
    ///<summary>Partial: Fordelingsgang (køkken)</summary>
    public UpdateEntity PartialFordelingsgangKokken => new(_haContext, "update.partial_fordelingsgang_kokken");
    ///<summary>Partial: Fordelingsgang (midt)</summary>
    public UpdateEntity PartialFordelingsgangMidt => new(_haContext, "update.partial_fordelingsgang_midt");
    ///<summary>Partial: Fordelingsgang (værelser)</summary>
    public UpdateEntity PartialFordelingsgangVaerelser => new(_haContext, "update.partial_fordelingsgang_vaerelser");
    ///<summary>Partial: Køkkenvask 1</summary>
    public UpdateEntity PartialKokkenvask1 => new(_haContext, "update.partial_kokkenvask_1");
    ///<summary>Partial: Køkkenvask 2</summary>
    public UpdateEntity PartialKokkenvask2 => new(_haContext, "update.partial_kokkenvask_2");
    ///<summary>Partial: Køkkenvask 3</summary>
    public UpdateEntity PartialKokkenvask3 => new(_haContext, "update.partial_kokkenvask_3");
    ///<summary>Partial: Toilet (dør)</summary>
    public UpdateEntity PartialToiletDor => new(_haContext, "update.partial_toilet_dor");
    ///<summary>Partial: Toilet (vindue)</summary>
    public UpdateEntity PartialToiletVindue => new(_haContext, "update.partial_toilet_vindue");
    ///<summary>Plex Media Server (Seedbox)</summary>
    public UpdateEntity PlexMediaServerSeedbox => new(_haContext, "update.plex_media_server_seedbox");
    ///<summary>Roar-kontakt</summary>
    public UpdateEntity RoarKontakt => new(_haContext, "update.roar_kontakt");
    ///<summary>Samba share Update</summary>
    public UpdateEntity SambaShareUpdate => new(_haContext, "update.samba_share_update");
    ///<summary>Seedbox</summary>
    public UpdateEntity Seedbox => new(_haContext, "update.seedbox");
    ///<summary>SQLite Web Update</summary>
    public UpdateEntity SqliteWebUpdate => new(_haContext, "update.sqlite_web_update");
    ///<summary>Advanced SSH &amp; Web Terminal Update</summary>
    public UpdateEntity SshWebTerminalUpdate => new(_haContext, "update.ssh_web_terminal_update");
    ///<summary>Studio Code Server Update</summary>
    public UpdateEntity StudioCodeServerUpdate => new(_haContext, "update.studio_code_server_update");
    ///<summary>Terminal &amp; SSH Update</summary>
    public UpdateEntity TerminalSshUpdate => new(_haContext, "update.terminal_ssh_update");
    ///<summary>Toilet-kontakt</summary>
    public UpdateEntity ToiletKontakt => new(_haContext, "update.toilet_kontakt");
    ///<summary>Tørretumbler</summary>
    public UpdateEntity Torretumbler => new(_haContext, "update.torretumbler");
    ///<summary>Underskabsbelysning-kontakt</summary>
    public UpdateEntity UnderskabsbelysningKontakt => new(_haContext, "update.underskabsbelysning_kontakt");
    ///<summary>Valder</summary>
    public UpdateEntity Valder => new(_haContext, "update.valder");
    ///<summary>Vaskemaskine</summary>
    public UpdateEntity Vaskemaskine => new(_haContext, "update.vaskemaskine");
    ///<summary>Vinke-astronaut</summary>
    public UpdateEntity VinkeAstronaut => new(_haContext, "update.vinke_astronaut");
    ///<summary>Walk-in-closet</summary>
    public UpdateEntity WalkInCloset => new(_haContext, "update.walk_in_closet");
    ///<summary>Walk-in-closet-gardin</summary>
    public UpdateEntity WalkInClosetGardin => new(_haContext, "update.walk_in_closet_gardin");
    ///<summary>Walk-in-closet-kontakt</summary>
    public UpdateEntity WalkInClosetKontakt => new(_haContext, "update.walk_in_closet_kontakt");
    ///<summary>Walk-in-closet-shortcut</summary>
    public UpdateEntity WalkInClosetShortcut => new(_haContext, "update.walk_in_closet_shortcut");
    ///<summary>XR500 Firmware</summary>
    public UpdateEntity Xr500Update => new(_haContext, "update.xr500_update");
    ///<summary>Zigbee2MQTT Update</summary>
    public UpdateEntity Zigbee2mqttUpdate => new(_haContext, "update.zigbee2mqtt_update");
}

public partial class VacuumEntities
{
    private readonly IHaContext _haContext;
    public VacuumEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public VacuumEntity RoborockS5Max => new(_haContext, "vacuum.roborock_s5_max");
}

public partial class VarEntities
{
    private readonly IHaContext _haContext;
    public VarEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Watchlist matches for Campen auktioner</summary>
    public VarEntity CampenMatchesMarkdown => new(_haContext, "var.campen_matches_markdown");
    ///<summary>Watchlist for Campen Auktioner</summary>
    public VarEntity CampenWatchlist => new(_haContext, "var.campen_watchlist");
}

public partial class WeatherEntities
{
    private readonly IHaContext _haContext;
    public WeatherEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Forecast Hjem</summary>
    public WeatherEntity Hjem => new(_haContext, "weather.hjem");
    ///<summary>Forecast Kærvej 32</summary>
    public WeatherEntity Kaervej32 => new(_haContext, "weather.kaervej_32");
    ///<summary>OpenWeatherMap</summary>
    public WeatherEntity Openweathermap => new(_haContext, "weather.openweathermap");
}

public partial class ZoneEntities
{
    private readonly IHaContext _haContext;
    public ZoneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Danske Bank Edwin Rahrs Vej</summary>
    public ZoneEntity DanskeBankEdwinRahrsVej => new(_haContext, "zone.danske_bank_edwin_rahrs_vej");
    ///<summary>Hjem</summary>
    public ZoneEntity Home => new(_haContext, "zone.home");
    ///<summary>Inge &amp; Erik</summary>
    public ZoneEntity IngeErik => new(_haContext, "zone.inge_erik");
    ///<summary>Jannie &amp; Sebastian</summary>
    public ZoneEntity JannieSebastian => new(_haContext, "zone.jannie_sebastian");
    ///<summary>Kasper &amp; Linda</summary>
    public ZoneEntity KasperLinda => new(_haContext, "zone.kasper_linda");
    ///<summary>Louise</summary>
    public ZoneEntity LouiseTheo => new(_haContext, "zone.louise_theo");
    ///<summary>Per &amp; Jane</summary>
    public ZoneEntity PerJane => new(_haContext, "zone.per_jane");
    ///<summary>Plantorama Tilst</summary>
    public ZoneEntity PlantoramaTilst => new(_haContext, "zone.plantorama_tilst");
    ///<summary>SCU Højvangen</summary>
    public ZoneEntity ScuHojvangen => new(_haContext, "zone.scu_hojvangen");
}

public partial class CalendarEntities
{
    private readonly IHaContext _haContext;
    public CalendarEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Mealie Breakfast</summary>
    public CalendarEntity MealieBreakfast => new(_haContext, "calendar.mealie_breakfast");
    ///<summary>Mealie Dinner</summary>
    public CalendarEntity MealieDinner => new(_haContext, "calendar.mealie_dinner");
    ///<summary>Mealie Lunch</summary>
    public CalendarEntity MealieLunch => new(_haContext, "calendar.mealie_lunch");
    ///<summary>Mealie Side</summary>
    public CalendarEntity MealieSide => new(_haContext, "calendar.mealie_side");
}

public partial class TodoEntities
{
    private readonly IHaContext _haContext;
    public TodoEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shopping List</summary>
    public TodoEntity ShoppingList => new(_haContext, "todo.shopping_list");
}

public partial class LawnMowerEntities
{
    private readonly IHaContext _haContext;
    public LawnMowerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Grasputin</summary>
    public LawnMowerEntity Grasputin => new(_haContext, "lawn_mower.grasputin");
}

public partial class ConversationEntities
{
    private readonly IHaContext _haContext;
    public ConversationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Home Assistant</summary>
    public ConversationEntity HomeAssistant => new(_haContext, "conversation.home_assistant");
    ///<summary>OpenAI Conversation</summary>
    public ConversationEntity OpenaiConversation => new(_haContext, "conversation.openai_conversation");
}

public partial record AutomationEntity : Entity<AutomationEntity, EntityState<AutomationAttributes>, AutomationAttributes>
{
    public AutomationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AutomationEntity(Entity entity) : base(entity)
    {
    }
}

public partial record AutomationAttributes
{
    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }
}

public partial record BinarySensorEntity : Entity<BinarySensorEntity, EntityState<BinarySensorAttributes>, BinarySensorAttributes>
{
    public BinarySensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public BinarySensorEntity(Entity entity) : base(entity)
    {
    }
}

public partial record BinarySensorAttributes
{
    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("integration")]
    public string? Integration { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("elapsed")]
    public double? Elapsed { get; init; }

    [JsonPropertyName("level_config")]
    public object? LevelConfig { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("power_on_behavior")]
    public string? PowerOnBehavior { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public bool? UpdateAvailable { get; init; }

    [JsonPropertyName("battery")]
    public double? Battery { get; init; }

    [JsonPropertyName("battery_low")]
    public bool? BatteryLow { get; init; }

    [JsonPropertyName("occupancy")]
    public bool? Occupancy { get; init; }

    [JsonPropertyName("tamper")]
    public bool? Tamper { get; init; }

    [JsonPropertyName("voltage")]
    public double? Voltage { get; init; }

    [JsonPropertyName("action")]
    public object? Action { get; init; }

    [JsonPropertyName("color")]
    public object? Color { get; init; }

    [JsonPropertyName("click")]
    public object? Click { get; init; }

    [JsonPropertyName("color_temp_startup")]
    public double? ColorTempStartup { get; init; }

    [JsonPropertyName("contact")]
    public bool? Contact { get; init; }

    [JsonPropertyName("device_temperature")]
    public double? DeviceTemperature { get; init; }

    [JsonPropertyName("power_outage_count")]
    public double? PowerOutageCount { get; init; }

    [JsonPropertyName("charging_status")]
    public object? ChargingStatus { get; init; }

    [JsonPropertyName("motor_state")]
    public object? MotorState { get; init; }

    [JsonPropertyName("position")]
    public double? Position { get; init; }

    [JsonPropertyName("running")]
    public object? Running { get; init; }

    [JsonPropertyName("termination")]
    public string? Termination { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("angle")]
    public double? Angle { get; init; }

    [JsonPropertyName("angle_x")]
    public double? AngleX { get; init; }

    [JsonPropertyName("angle_x_absolute")]
    public double? AngleXAbsolute { get; init; }

    [JsonPropertyName("angle_y")]
    public double? AngleY { get; init; }

    [JsonPropertyName("angle_y_absolute")]
    public double? AngleYAbsolute { get; init; }

    [JsonPropertyName("angle_z")]
    public double? AngleZ { get; init; }

    [JsonPropertyName("sensitivity")]
    public object? Sensitivity { get; init; }

    [JsonPropertyName("strength")]
    public double? Strength { get; init; }

    [JsonPropertyName("vibration")]
    public bool? Vibration { get; init; }

    [JsonPropertyName("subject")]
    public string? Subject { get; init; }

    [JsonPropertyName("text")]
    public string? Text { get; init; }

    [JsonPropertyName("sender")]
    public string? Sender { get; init; }

    [JsonPropertyName("color_options")]
    public object? ColorOptions { get; init; }

    [JsonPropertyName("detectedTime")]
    public string? DetectedTime { get; init; }

    [JsonPropertyName("durationInSeconds")]
    public double? DurationInSeconds { get; init; }

    [JsonPropertyName("expiry")]
    public string? Expiry { get; init; }

    [JsonPropertyName("remainingTimeInSeconds")]
    public double? RemainingTimeInSeconds { get; init; }

    [JsonPropertyName("trigger_count")]
    public double? TriggerCount { get; init; }

    [JsonPropertyName("last_seen")]
    public string? LastSeen { get; init; }

    [JsonPropertyName("alarm")]
    public bool? Alarm { get; init; }

    [JsonPropertyName("battery_level")]
    public string? BatteryLevel { get; init; }

    [JsonPropertyName("fault_alarm")]
    public bool? FaultAlarm { get; init; }

    [JsonPropertyName("silence_siren")]
    public bool? SilenceSiren { get; init; }

    [JsonPropertyName("smoke")]
    public bool? Smoke { get; init; }

    [JsonPropertyName("test_alarm")]
    public bool? TestAlarm { get; init; }

    [JsonPropertyName("test_alarm_result")]
    public string? TestAlarmResult { get; init; }

    [JsonPropertyName("motor_speed")]
    public string? MotorSpeed { get; init; }
}

public partial record ButtonEntity : Entity<ButtonEntity, EntityState<ButtonAttributes>, ButtonAttributes>
{
    public ButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ButtonEntity(Entity entity) : base(entity)
    {
    }
}

public partial record ButtonAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("color_options")]
    public object? ColorOptions { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("color_temp_startup")]
    public double? ColorTempStartup { get; init; }

    [JsonPropertyName("last_seen")]
    public string? LastSeen { get; init; }

    [JsonPropertyName("level_config")]
    public object? LevelConfig { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("power_on_behavior")]
    public string? PowerOnBehavior { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public bool? UpdateAvailable { get; init; }

    [JsonPropertyName("action")]
    public object? Action { get; init; }

    [JsonPropertyName("battery")]
    public double? Battery { get; init; }

    [JsonPropertyName("color")]
    public object? Color { get; init; }

    [JsonPropertyName("click")]
    public object? Click { get; init; }

    [JsonPropertyName("elapsed")]
    public double? Elapsed { get; init; }
}

public partial record CameraEntity : Entity<CameraEntity, EntityState<CameraAttributes>, CameraAttributes>
{
    public CameraEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CameraEntity(Entity entity) : base(entity)
    {
    }
}

public partial record CameraAttributes
{
    [JsonPropertyName("access_token")]
    public string? AccessToken { get; init; }

    [JsonPropertyName("calibration_points")]
    public object? CalibrationPoints { get; init; }

    [JsonPropertyName("model")]
    public string? Model { get; init; }

    [JsonPropertyName("used_api")]
    public string? UsedApi { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("model_name")]
    public string? ModelName { get; init; }

    [JsonPropertyName("brand")]
    public string? Brand { get; init; }

    [JsonPropertyName("frontend_stream_type")]
    public string? FrontendStreamType { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record ClimateEntity : Entity<ClimateEntity, EntityState<ClimateAttributes>, ClimateAttributes>
{
    public ClimateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ClimateEntity(Entity entity) : base(entity)
    {
    }
}

public partial record ClimateAttributes
{
    [JsonPropertyName("hvac_modes")]
    public IReadOnlyList<string>? HvacModes { get; init; }

    [JsonPropertyName("min_temp")]
    public double? MinTemp { get; init; }

    [JsonPropertyName("max_temp")]
    public double? MaxTemp { get; init; }

    [JsonPropertyName("target_temp_step")]
    public double? TargetTempStep { get; init; }

    [JsonPropertyName("preset_modes")]
    public IReadOnlyList<string>? PresetModes { get; init; }

    [JsonPropertyName("current_temperature")]
    public double? CurrentTemperature { get; init; }

    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("current_humidity")]
    public double? CurrentHumidity { get; init; }

    [JsonPropertyName("hvac_action")]
    public string? HvacAction { get; init; }

    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }

    [JsonPropertyName("offset_celsius")]
    public double? OffsetCelsius { get; init; }

    [JsonPropertyName("offset_fahrenheit")]
    public double? OffsetFahrenheit { get; init; }

    [JsonPropertyName("default_overlay_type")]
    public string? DefaultOverlayType { get; init; }

    [JsonPropertyName("default_overlay_seconds")]
    public double? DefaultOverlaySeconds { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record CoverEntity : Entity<CoverEntity, EntityState<CoverAttributes>, CoverAttributes>
{
    public CoverEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CoverEntity(Entity entity) : base(entity)
    {
    }
}

public partial record CoverAttributes
{
    [JsonPropertyName("current_position")]
    public double? CurrentPosition { get; init; }

    [JsonPropertyName("battery")]
    public double? Battery { get; init; }

    [JsonPropertyName("charging_status")]
    public object? ChargingStatus { get; init; }

    [JsonPropertyName("device_temperature")]
    public object? DeviceTemperature { get; init; }

    [JsonPropertyName("elapsed")]
    public double? Elapsed { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("motor_state")]
    public object? MotorState { get; init; }

    [JsonPropertyName("position")]
    public double? Position { get; init; }

    [JsonPropertyName("running")]
    public object? Running { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public bool? UpdateAvailable { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("last_seen")]
    public string? LastSeen { get; init; }

    [JsonPropertyName("motor_speed")]
    public string? MotorSpeed { get; init; }
}

public partial record DeviceTrackerEntity : Entity<DeviceTrackerEntity, EntityState<DeviceTrackerAttributes>, DeviceTrackerAttributes>
{
    public DeviceTrackerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public DeviceTrackerEntity(Entity entity) : base(entity)
    {
    }
}

public partial record DeviceTrackerAttributes
{
    [JsonPropertyName("source_type")]
    public string? SourceType { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("altitude")]
    public double? Altitude { get; init; }

    [JsonPropertyName("course")]
    public double? Course { get; init; }

    [JsonPropertyName("speed")]
    public double? Speed { get; init; }

    [JsonPropertyName("vertical_accuracy")]
    public double? VerticalAccuracy { get; init; }

    [JsonPropertyName("ip")]
    public string? Ip { get; init; }

    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("uuid")]
    public string? Uuid { get; init; }

    [JsonPropertyName("major")]
    public double? Major { get; init; }

    [JsonPropertyName("minor")]
    public double? Minor { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("battery_level")]
    public double? BatteryLevel { get; init; }
}

public partial record GroupEntity : Entity<GroupEntity, EntityState<GroupAttributes>, GroupAttributes>
{
    public GroupEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public GroupEntity(Entity entity) : base(entity)
    {
    }
}

public partial record GroupAttributes
{
    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("order")]
    public double? Order { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }
}

public partial record InputBooleanEntity : Entity<InputBooleanEntity, EntityState<InputBooleanAttributes>, InputBooleanAttributes>
{
    public InputBooleanEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputBooleanEntity(Entity entity) : base(entity)
    {
    }
}

public partial record InputBooleanAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }
}

public partial record InputDatetimeEntity : Entity<InputDatetimeEntity, EntityState<InputDatetimeAttributes>, InputDatetimeAttributes>
{
    public InputDatetimeEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputDatetimeEntity(Entity entity) : base(entity)
    {
    }
}

public partial record InputDatetimeAttributes
{
    [JsonPropertyName("has_date")]
    public bool? HasDate { get; init; }

    [JsonPropertyName("has_time")]
    public bool? HasTime { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("hour")]
    public double? Hour { get; init; }

    [JsonPropertyName("minute")]
    public double? Minute { get; init; }

    [JsonPropertyName("second")]
    public double? Second { get; init; }

    [JsonPropertyName("timestamp")]
    public double? Timestamp { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("year")]
    public double? Year { get; init; }

    [JsonPropertyName("month")]
    public double? Month { get; init; }

    [JsonPropertyName("day")]
    public double? Day { get; init; }
}

public partial record InputNumberEntity : NumericEntity<InputNumberEntity, NumericEntityState<InputNumberAttributes>, InputNumberAttributes>
{
    public InputNumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputNumberEntity(Entity entity) : base(entity)
    {
    }
}

public partial record InputNumberAttributes
{
    [JsonPropertyName("initial")]
    public double? Initial { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }
}

public partial record InputTextEntity : Entity<InputTextEntity, EntityState<InputTextAttributes>, InputTextAttributes>
{
    public InputTextEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputTextEntity(Entity entity) : base(entity)
    {
    }
}

public partial record InputTextAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("pattern")]
    public object? Pattern { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record LightEntity : Entity<LightEntity, EntityState<LightAttributes>, LightAttributes>
{
    public LightEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LightEntity(Entity entity) : base(entity)
    {
    }
}

public partial record LightAttributes
{
    [JsonPropertyName("min_color_temp_kelvin")]
    public double? MinColorTempKelvin { get; init; }

    [JsonPropertyName("max_color_temp_kelvin")]
    public double? MaxColorTempKelvin { get; init; }

    [JsonPropertyName("min_mireds")]
    public double? MinMireds { get; init; }

    [JsonPropertyName("max_mireds")]
    public double? MaxMireds { get; init; }

    [JsonPropertyName("supported_color_modes")]
    public IReadOnlyList<string>? SupportedColorModes { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("effect_list")]
    public IReadOnlyList<string>? EffectList { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("hs_color")]
    public IReadOnlyList<double>? HsColor { get; init; }

    [JsonPropertyName("rgb_color")]
    public IReadOnlyList<double>? RgbColor { get; init; }

    [JsonPropertyName("xy_color")]
    public IReadOnlyList<double>? XyColor { get; init; }

    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("raw_state")]
    public bool? RawState { get; init; }

    [JsonPropertyName("color_temp_kelvin")]
    public double? ColorTempKelvin { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("elapsed")]
    public double? Elapsed { get; init; }

    [JsonPropertyName("level_config")]
    public object? LevelConfig { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("power_on_behavior")]
    public string? PowerOnBehavior { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public bool? UpdateAvailable { get; init; }

    [JsonPropertyName("color")]
    public object? Color { get; init; }

    [JsonPropertyName("do_not_disturb")]
    public object? DoNotDisturb { get; init; }

    [JsonPropertyName("color_temp_startup")]
    public double? ColorTempStartup { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("color_options")]
    public object? ColorOptions { get; init; }

    [JsonPropertyName("action")]
    public string? Action { get; init; }

    [JsonPropertyName("effect")]
    public object? Effect { get; init; }

    [JsonPropertyName("color_power_on_behavior")]
    public object? ColorPowerOnBehavior { get; init; }

    [JsonPropertyName("last_seen")]
    public string? LastSeen { get; init; }
}

public partial record LockEntity : Entity<LockEntity, EntityState<LockAttributes>, LockAttributes>
{
    public LockEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LockEntity(Entity entity) : base(entity)
    {
    }
}

public partial record LockAttributes
{
    [JsonPropertyName("child_lock")]
    public string? ChildLock { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("elapsed")]
    public double? Elapsed { get; init; }

    [JsonPropertyName("energy")]
    public double? Energy { get; init; }

    [JsonPropertyName("indicator_mode")]
    public object? IndicatorMode { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("power")]
    public double? Power { get; init; }

    [JsonPropertyName("power_outage_memory")]
    public string? PowerOutageMemory { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public object? UpdateAvailable { get; init; }

    [JsonPropertyName("voltage")]
    public double? Voltage { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("last_seen")]
    public string? LastSeen { get; init; }
}

public partial record MediaPlayerEntity : Entity<MediaPlayerEntity, EntityState<MediaPlayerAttributes>, MediaPlayerAttributes>
{
    public MediaPlayerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public MediaPlayerEntity(Entity entity) : base(entity)
    {
    }
}

public partial record MediaPlayerAttributes
{
    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("source_list")]
    public IReadOnlyList<string>? SourceList { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("group_members")]
    public IReadOnlyList<string>? GroupMembers { get; init; }

    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }

    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    [JsonPropertyName("media_position")]
    public double? MediaPosition { get; init; }

    [JsonPropertyName("media_position_updated_at")]
    public string? MediaPositionUpdatedAt { get; init; }

    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }

    [JsonPropertyName("repeat")]
    public string? Repeat { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("media_content_id")]
    public object? MediaContentId { get; init; }

    [JsonPropertyName("media_duration")]
    public double? MediaDuration { get; init; }

    [JsonPropertyName("media_title")]
    public string? MediaTitle { get; init; }

    [JsonPropertyName("media_series_title")]
    public string? MediaSeriesTitle { get; init; }

    [JsonPropertyName("media_season")]
    public double? MediaSeason { get; init; }

    [JsonPropertyName("media_episode")]
    public double? MediaEpisode { get; init; }

    [JsonPropertyName("media_content_rating")]
    public string? MediaContentRating { get; init; }

    [JsonPropertyName("media_library_title")]
    public string? MediaLibraryTitle { get; init; }

    [JsonPropertyName("player_source")]
    public string? PlayerSource { get; init; }

    [JsonPropertyName("media_summary")]
    public string? MediaSummary { get; init; }

    [JsonPropertyName("username")]
    public string? Username { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("media_album_name")]
    public string? MediaAlbumName { get; init; }

    [JsonPropertyName("queue_position")]
    public double? QueuePosition { get; init; }

    [JsonPropertyName("queue_size")]
    public double? QueueSize { get; init; }

    [JsonPropertyName("sound_mode_list")]
    public IReadOnlyList<string>? SoundModeList { get; init; }

    [JsonPropertyName("media_track")]
    public double? MediaTrack { get; init; }

    [JsonPropertyName("media_artist")]
    public string? MediaArtist { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("dynamic_range")]
    public string? DynamicRange { get; init; }
}

public partial record NumberEntity : NumericEntity<NumberEntity, NumericEntityState<NumberAttributes>, NumberAttributes>
{
    public NumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumberEntity(Entity entity) : base(entity)
    {
    }
}

public partial record NumberAttributes
{
    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record PersonEntity : Entity<PersonEntity, EntityState<PersonAttributes>, PersonAttributes>
{
    public PersonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public PersonEntity(Entity entity) : base(entity)
    {
    }
}

public partial record PersonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("user_id")]
    public string? UserId { get; init; }

    [JsonPropertyName("device_trackers")]
    public IReadOnlyList<string>? DeviceTrackers { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record RemoteEntity : Entity<RemoteEntity, EntityState<RemoteAttributes>, RemoteAttributes>
{
    public RemoteEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public RemoteEntity(Entity entity) : base(entity)
    {
    }
}

public partial record RemoteAttributes
{
    [JsonPropertyName("activity_list")]
    public object? ActivityList { get; init; }

    [JsonPropertyName("current_activity")]
    public string? CurrentActivity { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record SceneEntity : Entity<SceneEntity, EntityState<SceneAttributes>, SceneAttributes>
{
    public SceneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SceneEntity(Entity entity) : base(entity)
    {
    }
}

public partial record SceneAttributes
{
    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }
}

public partial record ScriptEntity : Entity<ScriptEntity, EntityState<ScriptAttributes>, ScriptAttributes>
{
    public ScriptEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ScriptEntity(Entity entity) : base(entity)
    {
    }
}

public partial record ScriptAttributes
{
    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }
}

public partial record SelectEntity : Entity<SelectEntity, EntityState<SelectAttributes>, SelectAttributes>
{
    public SelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SelectEntity(Entity entity) : base(entity)
    {
    }
}

public partial record SelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("elapsed")]
    public double? Elapsed { get; init; }

    [JsonPropertyName("level_config")]
    public object? LevelConfig { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("power_on_behavior")]
    public string? PowerOnBehavior { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public bool? UpdateAvailable { get; init; }

    [JsonPropertyName("color")]
    public object? Color { get; init; }

    [JsonPropertyName("color_temp_startup")]
    public double? ColorTempStartup { get; init; }

    [JsonPropertyName("child_lock")]
    public string? ChildLock { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("energy")]
    public double? Energy { get; init; }

    [JsonPropertyName("indicator_mode")]
    public object? IndicatorMode { get; init; }

    [JsonPropertyName("power")]
    public double? Power { get; init; }

    [JsonPropertyName("power_outage_memory")]
    public string? PowerOutageMemory { get; init; }

    [JsonPropertyName("voltage")]
    public double? Voltage { get; init; }

    [JsonPropertyName("action")]
    public object? Action { get; init; }

    [JsonPropertyName("angle")]
    public double? Angle { get; init; }

    [JsonPropertyName("angle_x")]
    public double? AngleX { get; init; }

    [JsonPropertyName("angle_x_absolute")]
    public double? AngleXAbsolute { get; init; }

    [JsonPropertyName("angle_y")]
    public double? AngleY { get; init; }

    [JsonPropertyName("angle_y_absolute")]
    public double? AngleYAbsolute { get; init; }

    [JsonPropertyName("angle_z")]
    public double? AngleZ { get; init; }

    [JsonPropertyName("battery")]
    public double? Battery { get; init; }

    [JsonPropertyName("device_temperature")]
    public object? DeviceTemperature { get; init; }

    [JsonPropertyName("power_outage_count")]
    public double? PowerOutageCount { get; init; }

    [JsonPropertyName("sensitivity")]
    public object? Sensitivity { get; init; }

    [JsonPropertyName("strength")]
    public double? Strength { get; init; }

    [JsonPropertyName("vibration")]
    public bool? Vibration { get; init; }

    [JsonPropertyName("color_options")]
    public object? ColorOptions { get; init; }

    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }

    [JsonPropertyName("color_power_on_behavior")]
    public object? ColorPowerOnBehavior { get; init; }

    [JsonPropertyName("do_not_disturb")]
    public object? DoNotDisturb { get; init; }

    [JsonPropertyName("last_seen")]
    public string? LastSeen { get; init; }

    [JsonPropertyName("charging_status")]
    public bool? ChargingStatus { get; init; }

    [JsonPropertyName("motor_speed")]
    public string? MotorSpeed { get; init; }

    [JsonPropertyName("motor_state")]
    public object? MotorState { get; init; }

    [JsonPropertyName("position")]
    public double? Position { get; init; }

    [JsonPropertyName("running")]
    public object? Running { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SensorEntity : Entity<SensorEntity, EntityState<SensorAttributes>, SensorAttributes>
{
    public SensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SensorEntity(Entity entity) : base(entity)
    {
    }
}

public partial record SensorAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("integration")]
    public string? Integration { get; init; }

    [JsonPropertyName("number_of_loaded_apps")]
    public double? NumberOfLoadedApps { get; init; }

    [JsonPropertyName("number_of_running_apps")]
    public double? NumberOfRunningApps { get; init; }

    [JsonPropertyName("version")]
    public string? Version { get; init; }

    [JsonPropertyName("markdown")]
    public string? Markdown { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("action")]
    public object? Action { get; init; }

    [JsonPropertyName("battery")]
    public double? Battery { get; init; }

    [JsonPropertyName("elapsed")]
    public double? Elapsed { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("voltage")]
    public double? Voltage { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public bool? UpdateAvailable { get; init; }

    [JsonPropertyName("click")]
    public object? Click { get; init; }

    [JsonPropertyName("contact")]
    public bool? Contact { get; init; }

    [JsonPropertyName("device_temperature")]
    public double? DeviceTemperature { get; init; }

    [JsonPropertyName("power_outage_count")]
    public double? PowerOutageCount { get; init; }

    [JsonPropertyName("charging_status")]
    public object? ChargingStatus { get; init; }

    [JsonPropertyName("motor_state")]
    public object? MotorState { get; init; }

    [JsonPropertyName("position")]
    public double? Position { get; init; }

    [JsonPropertyName("running")]
    public object? Running { get; init; }

    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("time")]
    public string? Time { get; init; }

    [JsonPropertyName("administrative_area")]
    public string? AdministrativeArea_0 { get; init; }

    [JsonPropertyName("Administrative Area")]
    public string? AdministrativeArea_1 { get; init; }

    [JsonPropertyName("country")]
    public string? Country_0 { get; init; }

    [JsonPropertyName("Country")]
    public string? Country_1 { get; init; }

    [JsonPropertyName("iso_country_code")]
    public string? IsoCountryCode { get; init; }

    [JsonPropertyName("locality")]
    public string? Locality_0 { get; init; }

    [JsonPropertyName("Locality")]
    public string? Locality_1 { get; init; }

    [JsonPropertyName("location")]
    public object? Location_0 { get; init; }

    [JsonPropertyName("Location")]
    public IReadOnlyList<double>? Location_1 { get; init; }

    [JsonPropertyName("name")]
    public string? Name_0 { get; init; }

    [JsonPropertyName("Name")]
    public string? Name_1 { get; init; }

    [JsonPropertyName("phone")]
    public string? Phone { get; init; }

    [JsonPropertyName("postal_code")]
    public string? PostalCode_0 { get; init; }

    [JsonPropertyName("Postal Code")]
    public string? PostalCode_1 { get; init; }

    [JsonPropertyName("premises")]
    public string? Premises { get; init; }

    [JsonPropertyName("sub_administrative_area")]
    public string? SubAdministrativeArea_0 { get; init; }

    [JsonPropertyName("Sub Administrative Area")]
    public string? SubAdministrativeArea_1 { get; init; }

    [JsonPropertyName("sub_locality")]
    public string? SubLocality_0 { get; init; }

    [JsonPropertyName("Sub Locality")]
    public string? SubLocality_1 { get; init; }

    [JsonPropertyName("sub_thoroughfare")]
    public string? SubThoroughfare_0 { get; init; }

    [JsonPropertyName("Sub Thoroughfare")]
    public string? SubThoroughfare_1 { get; init; }

    [JsonPropertyName("thoroughfare")]
    public string? Thoroughfare_0 { get; init; }

    [JsonPropertyName("Thoroughfare")]
    public string? Thoroughfare_1 { get; init; }

    [JsonPropertyName("url")]
    public string? Url { get; init; }

    [JsonPropertyName("is_hidden")]
    public bool? IsHidden { get; init; }

    [JsonPropertyName("metered")]
    public bool? Metered { get; init; }

    [JsonPropertyName("Local Time")]
    public string? LocalTime { get; init; }

    [JsonPropertyName("Time in Milliseconds")]
    public double? TimeinMilliseconds { get; init; }

    [JsonPropertyName("Low Power Mode")]
    public bool? LowPowerMode { get; init; }

    [JsonPropertyName("Allows VoIP")]
    public bool? AllowsVoIP { get; init; }

    [JsonPropertyName("Carrier ID")]
    public string? CarrierID { get; init; }

    [JsonPropertyName("Carrier Name")]
    public string? CarrierName { get; init; }

    [JsonPropertyName("ISO Country Code")]
    public string? ISOCountryCode { get; init; }

    [JsonPropertyName("Mobile Country Code")]
    public string? MobileCountryCode { get; init; }

    [JsonPropertyName("Mobile Network Code")]
    public string? MobileNetworkCode { get; init; }

    [JsonPropertyName("Current Radio Technology")]
    public string? CurrentRadioTechnology { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("vehicle_data")]
    public object? VehicleData { get; init; }

    [JsonPropertyName("vehicle_name")]
    public string? VehicleName { get; init; }

    [JsonPropertyName("Areas Of Interest")]
    public string? AreasOfInterest { get; init; }

    [JsonPropertyName("Inland Water")]
    public string? InlandWater { get; init; }

    [JsonPropertyName("Ocean")]
    public string? Ocean { get; init; }

    [JsonPropertyName("Time Zone")]
    public string? TimeZone { get; init; }

    [JsonPropertyName("Zones")]
    public IReadOnlyList<string>? Zones { get; init; }

    [JsonPropertyName("angle")]
    public double? Angle { get; init; }

    [JsonPropertyName("angle_x")]
    public double? AngleX { get; init; }

    [JsonPropertyName("angle_x_absolute")]
    public double? AngleXAbsolute { get; init; }

    [JsonPropertyName("angle_y")]
    public double? AngleY { get; init; }

    [JsonPropertyName("angle_y_absolute")]
    public double? AngleYAbsolute { get; init; }

    [JsonPropertyName("angle_z")]
    public double? AngleZ { get; init; }

    [JsonPropertyName("sensitivity")]
    public object? Sensitivity { get; init; }

    [JsonPropertyName("strength")]
    public double? Strength { get; init; }

    [JsonPropertyName("vibration")]
    public bool? Vibration { get; init; }

    [JsonPropertyName("Confidence")]
    public string? Confidence { get; init; }

    [JsonPropertyName("Types")]
    public IReadOnlyList<string>? Types { get; init; }

    [JsonPropertyName("ugeplan")]
    public string? Ugeplan { get; init; }

    [JsonPropertyName("ugeplan_next")]
    public string? UgeplanNext { get; init; }

    [JsonPropertyName("sleepIntervals")]
    public IReadOnlyList<object>? SleepIntervals { get; init; }

    [JsonPropertyName("checkInTime")]
    public object? CheckInTime { get; init; }

    [JsonPropertyName("checkOutTime")]
    public object? CheckOutTime { get; init; }

    [JsonPropertyName("activityType")]
    public double? ActivityType { get; init; }

    [JsonPropertyName("entryTime")]
    public string? EntryTime { get; init; }

    [JsonPropertyName("exitTime")]
    public object? ExitTime { get; init; }

    [JsonPropertyName("exitWith")]
    public object? ExitWith { get; init; }

    [JsonPropertyName("comment")]
    public object? Comment { get; init; }

    [JsonPropertyName("spareTimeActivity")]
    public object? SpareTimeActivity { get; init; }

    [JsonPropertyName("selfDeciderStartTime")]
    public object? SelfDeciderStartTime { get; init; }

    [JsonPropertyName("selfDeciderEndTime")]
    public object? SelfDeciderEndTime { get; init; }

    [JsonPropertyName("profilePicture")]
    public string? ProfilePicture { get; init; }

    [JsonPropertyName("Cellular Technology")]
    public string? CellularTechnology { get; init; }

    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("color_options")]
    public object? ColorOptions { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("color_temp_startup")]
    public double? ColorTempStartup { get; init; }

    [JsonPropertyName("level_config")]
    public object? LevelConfig { get; init; }

    [JsonPropertyName("power_on_behavior")]
    public string? PowerOnBehavior { get; init; }

    [JsonPropertyName("color")]
    public object? Color { get; init; }

    [JsonPropertyName("info")]
    public string? Info { get; init; }

    [JsonPropertyName("serial")]
    public object? Serial { get; init; }

    [JsonPropertyName("state_message")]
    public object? StateMessage { get; init; }

    [JsonPropertyName("state_reason")]
    public object? StateReason { get; init; }

    [JsonPropertyName("command_set")]
    public string? CommandSet { get; init; }

    [JsonPropertyName("uri_supported")]
    public string? UriSupported { get; init; }

    [JsonPropertyName("trigger_count")]
    public double? TriggerCount { get; init; }

    [JsonPropertyName("planlagtetømninger")]
    public IReadOnlyList<object>? Planlagtetmninger { get; init; }

    [JsonPropertyName("address")]
    public object? Address { get; init; }

    [JsonPropertyName("last_seen")]
    public string? LastSeen { get; init; }

    [JsonPropertyName("alarm")]
    public bool? Alarm { get; init; }

    [JsonPropertyName("battery_level")]
    public string? BatteryLevel { get; init; }

    [JsonPropertyName("battery_low")]
    public bool? BatteryLow { get; init; }

    [JsonPropertyName("fault_alarm")]
    public bool? FaultAlarm { get; init; }

    [JsonPropertyName("silence_siren")]
    public bool? SilenceSiren { get; init; }

    [JsonPropertyName("smoke")]
    public bool? Smoke { get; init; }

    [JsonPropertyName("test_alarm")]
    public bool? TestAlarm { get; init; }

    [JsonPropertyName("test_alarm_result")]
    public string? TestAlarmResult { get; init; }

    [JsonPropertyName("institutionProfileId")]
    public double? InstitutionProfileId { get; init; }

    [JsonPropertyName("id")]
    public double? Id { get; init; }

    [JsonPropertyName("motor_speed")]
    public string? MotorSpeed { get; init; }
}

public partial record NumericSensorEntity : NumericEntity<NumericSensorEntity, NumericEntityState<NumericSensorAttributes>, NumericSensorAttributes>
{
    public NumericSensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumericSensorEntity(Entity entity) : base(entity)
    {
    }
}

public partial record NumericSensorAttributes
{
    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("item_id")]
    public string? ItemId { get; init; }

    [JsonPropertyName("item_url")]
    public string? ItemUrl { get; init; }

    [JsonPropertyName("item_price")]
    public string? ItemPrice { get; init; }

    [JsonPropertyName("original_value")]
    public string? OriginalValue { get; init; }

    [JsonPropertyName("pickup_start")]
    public string? PickupStart { get; init; }

    [JsonPropertyName("pickup_end")]
    public string? PickupEnd { get; init; }

    [JsonPropertyName("soldout_timestamp")]
    public string? SoldoutTimestamp { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("last_reset")]
    public string? LastReset { get; init; }

    [JsonPropertyName("average")]
    public double? Average { get; init; }

    [JsonPropertyName("off_peak_1")]
    public double? OffPeak1 { get; init; }

    [JsonPropertyName("off_peak_2")]
    public double? OffPeak2 { get; init; }

    [JsonPropertyName("peak")]
    public double? Peak { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("mean")]
    public double? Mean { get; init; }

    [JsonPropertyName("unit")]
    public string? Unit { get; init; }

    [JsonPropertyName("currency")]
    public string? Currency { get; init; }

    [JsonPropertyName("country")]
    public string? Country { get; init; }

    [JsonPropertyName("region")]
    public string? Region { get; init; }

    [JsonPropertyName("low_price")]
    public bool? LowPrice { get; init; }

    [JsonPropertyName("price_percent_to_average")]
    public double? PricePercentToAverage { get; init; }

    [JsonPropertyName("today")]
    public IReadOnlyList<double>? Today { get; init; }

    [JsonPropertyName("tomorrow")]
    public object? Tomorrow { get; init; }

    [JsonPropertyName("tomorrow_valid")]
    public bool? TomorrowValid { get; init; }

    [JsonPropertyName("raw_today")]
    public IReadOnlyList<object>? RawToday { get; init; }

    [JsonPropertyName("raw_tomorrow")]
    public IReadOnlyList<object>? RawTomorrow { get; init; }

    [JsonPropertyName("current_price")]
    public double? CurrentPrice { get; init; }

    [JsonPropertyName("additional_costs_current_hour")]
    public double? AdditionalCostsCurrentHour { get; init; }

    [JsonPropertyName("price_in_cents")]
    public bool? PriceInCents { get; init; }

    [JsonPropertyName("data")]
    public object? Data { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("action")]
    public object? Action { get; init; }

    [JsonPropertyName("battery")]
    public double? Battery { get; init; }

    [JsonPropertyName("elapsed")]
    public double? Elapsed { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("voltage")]
    public double? Voltage { get; init; }

    [JsonPropertyName("battery_low")]
    public bool? BatteryLow { get; init; }

    [JsonPropertyName("occupancy")]
    public bool? Occupancy { get; init; }

    [JsonPropertyName("tamper")]
    public bool? Tamper { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public bool? UpdateAvailable { get; init; }

    [JsonPropertyName("click")]
    public object? Click { get; init; }

    [JsonPropertyName("contact")]
    public bool? Contact { get; init; }

    [JsonPropertyName("device_temperature")]
    public double? DeviceTemperature { get; init; }

    [JsonPropertyName("power_outage_count")]
    public double? PowerOutageCount { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("charging_status")]
    public object? ChargingStatus { get; init; }

    [JsonPropertyName("motor_state")]
    public object? MotorState { get; init; }

    [JsonPropertyName("position")]
    public double? Position { get; init; }

    [JsonPropertyName("running")]
    public object? Running { get; init; }

    [JsonPropertyName("child_lock")]
    public string? ChildLock { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("energy")]
    public double? Energy { get; init; }

    [JsonPropertyName("indicator_mode")]
    public object? IndicatorMode { get; init; }

    [JsonPropertyName("power")]
    public double? Power { get; init; }

    [JsonPropertyName("power_outage_memory")]
    public string? PowerOutageMemory { get; init; }

    [JsonPropertyName("region_code")]
    public string? RegionCode { get; init; }

    [JsonPropertyName("next_data_update")]
    public string? NextDataUpdate { get; init; }

    [JsonPropertyName("today_min")]
    public object? TodayMin { get; init; }

    [JsonPropertyName("today_max")]
    public object? TodayMax { get; init; }

    [JsonPropertyName("today_mean")]
    public double? TodayMean { get; init; }

    [JsonPropertyName("tomorrow_min")]
    public object? TomorrowMin { get; init; }

    [JsonPropertyName("tomorrow_max")]
    public object? TomorrowMax { get; init; }

    [JsonPropertyName("tomorrow_mean")]
    public object? TomorrowMean { get; init; }

    [JsonPropertyName("forecast")]
    public IReadOnlyList<object>? Forecast { get; init; }

    [JsonPropertyName("net_operator")]
    public string? NetOperator { get; init; }

    [JsonPropertyName("tariffs")]
    public object? Tariffs { get; init; }

    [JsonPropertyName("time")]
    public string? Time { get; init; }

    [JsonPropertyName("setting")]
    public double? Setting { get; init; }

    [JsonPropertyName("connected_not_paired_devices")]
    public object? ConnectedNotPairedDevices { get; init; }

    [JsonPropertyName("connected_paired_devices")]
    public object? ConnectedPairedDevices { get; init; }

    [JsonPropertyName("paired_devices")]
    public IReadOnlyList<string>? PairedDevices { get; init; }

    [JsonPropertyName("accuracy")]
    public string? Accuracy { get; init; }

    [JsonPropertyName("Available")]
    public string? Available { get; init; }

    [JsonPropertyName("Available (Important)")]
    public string? AvailableImportant { get; init; }

    [JsonPropertyName("Available (Opportunistic)")]
    public string? AvailableOpportunistic { get; init; }

    [JsonPropertyName("Total")]
    public string? Total { get; init; }

    [JsonPropertyName("last_run_success")]
    public object? LastRunSuccess { get; init; }

    [JsonPropertyName("repositories")]
    public IReadOnlyList<object>? Repositories { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("Lerbæk - Plex for Kodi")]
    public string? LerbkPlexforKodi { get; init; }

    [JsonPropertyName("angle")]
    public double? Angle { get; init; }

    [JsonPropertyName("angle_x")]
    public double? AngleX { get; init; }

    [JsonPropertyName("angle_x_absolute")]
    public double? AngleXAbsolute { get; init; }

    [JsonPropertyName("angle_y")]
    public double? AngleY { get; init; }

    [JsonPropertyName("angle_y_absolute")]
    public double? AngleYAbsolute { get; init; }

    [JsonPropertyName("angle_z")]
    public double? AngleZ { get; init; }

    [JsonPropertyName("sensitivity")]
    public object? Sensitivity { get; init; }

    [JsonPropertyName("strength")]
    public double? Strength { get; init; }

    [JsonPropertyName("vibration")]
    public bool? Vibration { get; init; }

    [JsonPropertyName("Lerbæk - Plex for Samsung")]
    public string? LerbkPlexforSamsung { get; init; }

    [JsonPropertyName("use_cent")]
    public bool? UseCent { get; init; }

    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }

    [JsonPropertyName("marker_high_level")]
    public double? MarkerHighLevel { get; init; }

    [JsonPropertyName("marker_low_level")]
    public double? MarkerLowLevel { get; init; }

    [JsonPropertyName("marker_type")]
    public string? MarkerType { get; init; }

    [JsonPropertyName("Lerbæk - Plex for Android (Mobile)")]
    public string? LerbkPlexforAndroidMobile { get; init; }

    [JsonPropertyName("next_refresh")]
    public string? NextRefresh { get; init; }

    [JsonPropertyName("emissions")]
    public object? Emissions { get; init; }

    [JsonPropertyName("trigger_count")]
    public double? TriggerCount { get; init; }

    [JsonPropertyName("end")]
    public double? End { get; init; }

    [JsonPropertyName("start")]
    public double? Start { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("last_seen")]
    public string? LastSeen { get; init; }

    [JsonPropertyName("charging")]
    public bool? Charging { get; init; }

    [JsonPropertyName("minutes")]
    public double? Minutes { get; init; }

    [JsonPropertyName("meters")]
    public double? Meters { get; init; }

    [JsonPropertyName("motor_speed")]
    public string? MotorSpeed { get; init; }
}

public partial record SunEntity : Entity<SunEntity, EntityState<SunAttributes>, SunAttributes>
{
    public SunEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SunEntity(Entity entity) : base(entity)
    {
    }
}

public partial record SunAttributes
{
    [JsonPropertyName("next_dawn")]
    public string? NextDawn { get; init; }

    [JsonPropertyName("next_dusk")]
    public string? NextDusk { get; init; }

    [JsonPropertyName("next_midnight")]
    public string? NextMidnight { get; init; }

    [JsonPropertyName("next_noon")]
    public string? NextNoon { get; init; }

    [JsonPropertyName("next_rising")]
    public string? NextRising { get; init; }

    [JsonPropertyName("next_setting")]
    public string? NextSetting { get; init; }

    [JsonPropertyName("elevation")]
    public double? Elevation { get; init; }

    [JsonPropertyName("azimuth")]
    public double? Azimuth { get; init; }

    [JsonPropertyName("rising")]
    public bool? Rising { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SwitchEntity : Entity<SwitchEntity, EntityState<SwitchAttributes>, SwitchAttributes>
{
    public SwitchEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SwitchEntity(Entity entity) : base(entity)
    {
    }
}

public partial record SwitchAttributes
{
    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("integration")]
    public string? Integration { get; init; }

    [JsonPropertyName("runtime_info")]
    public object? RuntimeInfo { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("do_not_disturb")]
    public object? DoNotDisturb { get; init; }

    [JsonPropertyName("elapsed")]
    public double? Elapsed { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("child_lock")]
    public string? ChildLock { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("energy")]
    public double? Energy { get; init; }

    [JsonPropertyName("indicator_mode")]
    public object? IndicatorMode { get; init; }

    [JsonPropertyName("power")]
    public double? Power { get; init; }

    [JsonPropertyName("power_outage_memory")]
    public string? PowerOutageMemory { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public object? UpdateAvailable { get; init; }

    [JsonPropertyName("voltage")]
    public double? Voltage { get; init; }

    [JsonPropertyName("last_run_success")]
    public bool? LastRunSuccess { get; init; }

    [JsonPropertyName("switch_mode")]
    public bool? SwitchMode { get; init; }

    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("action")]
    public string? Action { get; init; }

    [JsonPropertyName("color")]
    public object? Color { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("color_power_on_behavior")]
    public object? ColorPowerOnBehavior { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("last_seen")]
    public string? LastSeen { get; init; }

    [JsonPropertyName("alarm")]
    public bool? Alarm { get; init; }

    [JsonPropertyName("battery_level")]
    public string? BatteryLevel { get; init; }

    [JsonPropertyName("battery_low")]
    public bool? BatteryLow { get; init; }

    [JsonPropertyName("fault_alarm")]
    public bool? FaultAlarm { get; init; }

    [JsonPropertyName("silence_siren")]
    public bool? SilenceSiren { get; init; }

    [JsonPropertyName("smoke")]
    public bool? Smoke { get; init; }

    [JsonPropertyName("test_alarm")]
    public bool? TestAlarm { get; init; }

    [JsonPropertyName("test_alarm_result")]
    public string? TestAlarmResult { get; init; }
}

public partial record TtsEntity : Entity<TtsEntity, EntityState<TtsAttributes>, TtsAttributes>
{
    public TtsEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TtsEntity(Entity entity) : base(entity)
    {
    }
}

public partial record TtsAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record UpdateEntity : Entity<UpdateEntity, EntityState<UpdateAttributes>, UpdateAttributes>
{
    public UpdateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public UpdateEntity(Entity entity) : base(entity)
    {
    }
}

public partial record UpdateAttributes
{
    [JsonPropertyName("auto_update")]
    public bool? AutoUpdate { get; init; }

    [JsonPropertyName("installed_version")]
    public string? InstalledVersion { get; init; }

    [JsonPropertyName("in_progress")]
    public object? InProgress { get; init; }

    [JsonPropertyName("latest_version")]
    public string? LatestVersion { get; init; }

    [JsonPropertyName("release_summary")]
    public string? ReleaseSummary { get; init; }

    [JsonPropertyName("release_url")]
    public string? ReleaseUrl { get; init; }

    [JsonPropertyName("skipped_version")]
    public object? SkippedVersion { get; init; }

    [JsonPropertyName("title")]
    public string? Title { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("elapsed")]
    public double? Elapsed { get; init; }

    [JsonPropertyName("level_config")]
    public object? LevelConfig { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("power_on_behavior")]
    public string? PowerOnBehavior { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public bool? UpdateAvailable { get; init; }

    [JsonPropertyName("action")]
    public object? Action { get; init; }

    [JsonPropertyName("battery")]
    public double? Battery { get; init; }

    [JsonPropertyName("color")]
    public object? Color { get; init; }

    [JsonPropertyName("click")]
    public object? Click { get; init; }

    [JsonPropertyName("color_temp_startup")]
    public double? ColorTempStartup { get; init; }

    [JsonPropertyName("charging_status")]
    public object? ChargingStatus { get; init; }

    [JsonPropertyName("device_temperature")]
    public object? DeviceTemperature { get; init; }

    [JsonPropertyName("motor_state")]
    public object? MotorState { get; init; }

    [JsonPropertyName("position")]
    public double? Position { get; init; }

    [JsonPropertyName("running")]
    public object? Running { get; init; }

    [JsonPropertyName("child_lock")]
    public string? ChildLock { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("energy")]
    public double? Energy { get; init; }

    [JsonPropertyName("indicator_mode")]
    public object? IndicatorMode { get; init; }

    [JsonPropertyName("power")]
    public double? Power { get; init; }

    [JsonPropertyName("power_outage_memory")]
    public string? PowerOutageMemory { get; init; }

    [JsonPropertyName("voltage")]
    public double? Voltage { get; init; }

    [JsonPropertyName("color_options")]
    public object? ColorOptions { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record VacuumEntity : Entity<VacuumEntity, EntityState<VacuumAttributes>, VacuumAttributes>
{
    public VacuumEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public VacuumEntity(Entity entity) : base(entity)
    {
    }
}

public partial record VacuumAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("fan_speed_list")]
    public IReadOnlyList<string>? FanSpeedList { get; init; }

    [JsonPropertyName("battery_level")]
    public double? BatteryLevel { get; init; }

    [JsonPropertyName("battery_icon")]
    public string? BatteryIcon { get; init; }

    [JsonPropertyName("fan_speed")]
    public string? FanSpeed { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("accessories")]
    public object? Accessories { get; init; }

    [JsonPropertyName("battery")]
    public object? Battery { get; init; }

    [JsonPropertyName("blades")]
    public object? Blades { get; init; }

    [JsonPropertyName("error")]
    public object? Error { get; init; }

    [JsonPropertyName("firmware")]
    public object? Firmware { get; init; }

    [JsonPropertyName("locked")]
    public bool? Locked { get; init; }

    [JsonPropertyName("mac_address")]
    public string? MacAddress { get; init; }

    [JsonPropertyName("model")]
    public string? Model { get; init; }

    [JsonPropertyName("online")]
    public bool? Online { get; init; }

    [JsonPropertyName("orientation")]
    public object? Orientation { get; init; }

    [JsonPropertyName("party_mode_enabled")]
    public bool? PartyModeEnabled { get; init; }

    [JsonPropertyName("rain_sensor")]
    public object? RainSensor { get; init; }

    [JsonPropertyName("rssi")]
    public double? Rssi { get; init; }

    [JsonPropertyName("schedule")]
    public object? Schedule { get; init; }

    [JsonPropertyName("serial_number")]
    public string? SerialNumber { get; init; }

    [JsonPropertyName("statistics")]
    public object? Statistics { get; init; }

    [JsonPropertyName("status_info")]
    public object? StatusInfo { get; init; }

    [JsonPropertyName("time_zone")]
    public string? TimeZone { get; init; }

    [JsonPropertyName("torque")]
    public double? Torque { get; init; }

    [JsonPropertyName("state_updated_at")]
    public string? StateUpdatedAt { get; init; }

    [JsonPropertyName("zone")]
    public object? Zone { get; init; }

    [JsonPropertyName("capabilities")]
    public IReadOnlyList<string>? Capabilities { get; init; }

    [JsonPropertyName("supported_landroid_features")]
    public double? SupportedLandroidFeatures { get; init; }

    [JsonPropertyName("api connected")]
    public bool? Apiconnected { get; init; }

    [JsonPropertyName("daily_progress")]
    public double? DailyProgress { get; init; }

    [JsonPropertyName("next_scheduled_start")]
    public string? NextScheduledStart { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record VarEntity : Entity<VarEntity, EntityState<VarAttributes>, VarAttributes>
{
    public VarEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public VarEntity(Entity entity) : base(entity)
    {
    }
}

public partial record VarAttributes
{
    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record WeatherEntity : Entity<WeatherEntity, EntityState<WeatherAttributes>, WeatherAttributes>
{
    public WeatherEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public WeatherEntity(Entity entity) : base(entity)
    {
    }
}

public partial record WeatherAttributes
{
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("temperature_unit")]
    public string? TemperatureUnit { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("cloud_coverage")]
    public double? CloudCoverage { get; init; }

    [JsonPropertyName("pressure")]
    public double? Pressure { get; init; }

    [JsonPropertyName("pressure_unit")]
    public string? PressureUnit { get; init; }

    [JsonPropertyName("wind_bearing")]
    public double? WindBearing { get; init; }

    [JsonPropertyName("wind_gust_speed")]
    public double? WindGustSpeed { get; init; }

    [JsonPropertyName("wind_speed")]
    public double? WindSpeed { get; init; }

    [JsonPropertyName("wind_speed_unit")]
    public string? WindSpeedUnit { get; init; }

    [JsonPropertyName("visibility_unit")]
    public string? VisibilityUnit { get; init; }

    [JsonPropertyName("precipitation_unit")]
    public string? PrecipitationUnit { get; init; }

    [JsonPropertyName("forecast")]
    public IReadOnlyList<object>? Forecast { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("apparent_temperature")]
    public double? ApparentTemperature { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("dew_point")]
    public double? DewPoint { get; init; }
}

public partial record ZoneEntity : Entity<ZoneEntity, EntityState<ZoneAttributes>, ZoneAttributes>
{
    public ZoneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ZoneEntity(Entity entity) : base(entity)
    {
    }
}

public partial record ZoneAttributes
{
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("radius")]
    public double? Radius { get; init; }

    [JsonPropertyName("passive")]
    public bool? Passive { get; init; }

    [JsonPropertyName("persons")]
    public IReadOnlyList<string>? Persons { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record CalendarEntity : Entity<CalendarEntity, EntityState<CalendarAttributes>, CalendarAttributes>
{
    public CalendarEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CalendarEntity(Entity entity) : base(entity)
    {
    }
}

public partial record CalendarAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("all_day")]
    public bool? AllDay { get; init; }

    [JsonPropertyName("start_time")]
    public string? StartTime { get; init; }

    [JsonPropertyName("end_time")]
    public string? EndTime { get; init; }

    [JsonPropertyName("location")]
    public string? Location { get; init; }

    [JsonPropertyName("description")]
    public string? Description { get; init; }
}

public partial record TodoEntity : Entity<TodoEntity, EntityState<TodoAttributes>, TodoAttributes>
{
    public TodoEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TodoEntity(Entity entity) : base(entity)
    {
    }
}

public partial record TodoAttributes
{
    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record LawnMowerEntity : Entity<LawnMowerEntity, EntityState<LawnMowerAttributes>, LawnMowerAttributes>
{
    public LawnMowerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LawnMowerEntity(Entity entity) : base(entity)
    {
    }
}

public partial record LawnMowerAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("accessories")]
    public object? Accessories { get; init; }

    [JsonPropertyName("supported_landroid_features")]
    public double? SupportedLandroidFeatures { get; init; }

    [JsonPropertyName("api connected")]
    public bool? Apiconnected { get; init; }

    [JsonPropertyName("protocol")]
    public double? Protocol { get; init; }
}

public partial record ConversationEntity : Entity<ConversationEntity, EntityState<ConversationAttributes>, ConversationAttributes>
{
    public ConversationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ConversationEntity(Entity entity) : base(entity)
    {
    }
}

public partial record ConversationAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public interface IServices
{
    AutomationServices Automation { get; }

    BrowserModServices BrowserMod { get; }

    ButtonServices Button { get; }

    CalendarServices Calendar { get; }

    CameraServices Camera { get; }

    CastServices Cast { get; }

    ClimateServices Climate { get; }

    CloudServices Cloud { get; }

    ConversationServices Conversation { get; }

    CounterServices Counter { get; }

    CoverServices Cover { get; }

    DeviceTrackerServices DeviceTracker { get; }

    DuckdnsServices Duckdns { get; }

    FanServices Fan { get; }

    FfmpegServices Ffmpeg { get; }

    FrontendServices Frontend { get; }

    GoogleAssistantServices GoogleAssistant { get; }

    GroupServices Group { get; }

    HassioServices Hassio { get; }

    InputBooleanServices InputBoolean { get; }

    InputButtonServices InputButton { get; }

    InputDatetimeServices InputDatetime { get; }

    InputNumberServices InputNumber { get; }

    InputSelectServices InputSelect { get; }

    InputTextServices InputText { get; }

    KiaUvoServices KiaUvo { get; }

    KodiServices Kodi { get; }

    LandroidCloudServices LandroidCloud { get; }

    LawnMowerServices LawnMower { get; }

    LightServices Light { get; }

    LocaltuyaServices Localtuya { get; }

    LockServices Lock { get; }

    LogbookServices Logbook { get; }

    LoggerServices Logger { get; }

    MediaPlayerServices MediaPlayer { get; }

    MqttServices Mqtt { get; }

    NetdaemonServices Netdaemon { get; }

    NotifyServices Notify { get; }

    NumberServices Number { get; }

    OpenaiConversationServices OpenaiConversation { get; }

    PersistentNotificationServices PersistentNotification { get; }

    PersonServices Person { get; }

    PlexServices Plex { get; }

    ProfilerServices Profiler { get; }

    RecorderServices Recorder { get; }

    RemoteServices Remote { get; }

    RenaultServices Renault { get; }

    RestServices Rest { get; }

    RestCommandServices RestCommand { get; }

    SceneServices Scene { get; }

    ScheduleServices Schedule { get; }

    ScriptServices Script { get; }

    SelectServices Select { get; }

    ShoppingListServices ShoppingList { get; }

    SonoffServices Sonoff { get; }

    SonosServices Sonos { get; }

    SwitchServices Switch { get; }

    SystemLogServices SystemLog { get; }

    TadoServices Tado { get; }

    TemplateServices Template { get; }

    TimerServices Timer { get; }

    TodoServices Todo { get; }

    TtsServices Tts { get; }

    UpdateServices Update { get; }

    VarServices Var { get; }

    WaterHeaterServices WaterHeater { get; }

    WeatherServices Weather { get; }

    XiaomiCloudMapExtractorServices XiaomiCloudMapExtractor { get; }

    ZoneServices Zone { get; }
}

public partial class Services : IServices
{
    private readonly IHaContext _haContext;
    public Services(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AutomationServices Automation => new(_haContext);
    public BrowserModServices BrowserMod => new(_haContext);
    public ButtonServices Button => new(_haContext);
    public CalendarServices Calendar => new(_haContext);
    public CameraServices Camera => new(_haContext);
    public CastServices Cast => new(_haContext);
    public ClimateServices Climate => new(_haContext);
    public CloudServices Cloud => new(_haContext);
    public ConversationServices Conversation => new(_haContext);
    public CounterServices Counter => new(_haContext);
    public CoverServices Cover => new(_haContext);
    public DeviceTrackerServices DeviceTracker => new(_haContext);
    public DuckdnsServices Duckdns => new(_haContext);
    public FanServices Fan => new(_haContext);
    public FfmpegServices Ffmpeg => new(_haContext);
    public FrontendServices Frontend => new(_haContext);
    public GoogleAssistantServices GoogleAssistant => new(_haContext);
    public GroupServices Group => new(_haContext);
    public HassioServices Hassio => new(_haContext);
    public InputBooleanServices InputBoolean => new(_haContext);
    public InputButtonServices InputButton => new(_haContext);
    public InputDatetimeServices InputDatetime => new(_haContext);
    public InputNumberServices InputNumber => new(_haContext);
    public InputSelectServices InputSelect => new(_haContext);
    public InputTextServices InputText => new(_haContext);
    public KiaUvoServices KiaUvo => new(_haContext);
    public KodiServices Kodi => new(_haContext);
    public LandroidCloudServices LandroidCloud => new(_haContext);
    public LawnMowerServices LawnMower => new(_haContext);
    public LightServices Light => new(_haContext);
    public LocaltuyaServices Localtuya => new(_haContext);
    public LockServices Lock => new(_haContext);
    public LogbookServices Logbook => new(_haContext);
    public LoggerServices Logger => new(_haContext);
    public MediaPlayerServices MediaPlayer => new(_haContext);
    public MqttServices Mqtt => new(_haContext);
    public NetdaemonServices Netdaemon => new(_haContext);
    public NotifyServices Notify => new(_haContext);
    public NumberServices Number => new(_haContext);
    public OpenaiConversationServices OpenaiConversation => new(_haContext);
    public PersistentNotificationServices PersistentNotification => new(_haContext);
    public PersonServices Person => new(_haContext);
    public PlexServices Plex => new(_haContext);
    public ProfilerServices Profiler => new(_haContext);
    public RecorderServices Recorder => new(_haContext);
    public RemoteServices Remote => new(_haContext);
    public RenaultServices Renault => new(_haContext);
    public RestServices Rest => new(_haContext);
    public RestCommandServices RestCommand => new(_haContext);
    public SceneServices Scene => new(_haContext);
    public ScheduleServices Schedule => new(_haContext);
    public ScriptServices Script => new(_haContext);
    public SelectServices Select => new(_haContext);
    public ShoppingListServices ShoppingList => new(_haContext);
    public SonoffServices Sonoff => new(_haContext);
    public SonosServices Sonos => new(_haContext);
    public SwitchServices Switch => new(_haContext);
    public SystemLogServices SystemLog => new(_haContext);
    public TadoServices Tado => new(_haContext);
    public TemplateServices Template => new(_haContext);
    public TimerServices Timer => new(_haContext);
    public TodoServices Todo => new(_haContext);
    public TtsServices Tts => new(_haContext);
    public UpdateServices Update => new(_haContext);
    public VarServices Var => new(_haContext);
    public WaterHeaterServices WaterHeater => new(_haContext);
    public WeatherServices Weather => new(_haContext);
    public XiaomiCloudMapExtractorServices XiaomiCloudMapExtractor => new(_haContext);
    public ZoneServices Zone => new(_haContext);
}

public partial class AutomationServices
{
    private readonly IHaContext _haContext;
    public AutomationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads the automation configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("automation", "reload", null);
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("automation", "toggle", target);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Trigger(ServiceTarget target, AutomationTriggerParameters data)
    {
        _haContext.CallService("automation", "trigger", target, data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public void Trigger(ServiceTarget target, bool? skipCondition = null)
    {
        _haContext.CallService("automation", "trigger", target, new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, AutomationTurnOffParameters data)
    {
        _haContext.CallService("automation", "turn_off", target, data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public void TurnOff(ServiceTarget target, bool? stopActions = null)
    {
        _haContext.CallService("automation", "turn_off", target, new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("automation", "turn_on", target);
    }
}

public partial record AutomationTriggerParameters
{
    ///<summary>Defines whether or not the conditions will be skipped.</summary>
    [JsonPropertyName("skip_condition")]
    public bool? SkipCondition { get; init; }
}

public partial record AutomationTurnOffParameters
{
    ///<summary>Stops currently running actions.</summary>
    [JsonPropertyName("stop_actions")]
    public bool? StopActions { get; init; }
}

public partial class BrowserModServices
{
    private readonly IHaContext _haContext;
    public BrowserModServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Close a popup</summary>
    ///<param name="target">The target for this service call</param>
    public void ClosePopup(ServiceTarget target)
    {
        _haContext.CallService("browser_mod", "close_popup", target);
    }

    ///<summary>Print text to browser console</summary>
    ///<param name="target">The target for this service call</param>
    public void Console(ServiceTarget target, BrowserModConsoleParameters data)
    {
        _haContext.CallService("browser_mod", "console", target, data);
    }

    ///<summary>Print text to browser console</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="message">Text to print</param>
    public void Console(ServiceTarget target, string? message = null)
    {
        _haContext.CallService("browser_mod", "console", target, new BrowserModConsoleParameters { Message = message });
    }

    ///<summary>Wait for a time</summary>
    ///<param name="target">The target for this service call</param>
    public void Delay(ServiceTarget target, BrowserModDelayParameters data)
    {
        _haContext.CallService("browser_mod", "delay", target, data);
    }

    ///<summary>Wait for a time</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="time">Time to wait (ms)</param>
    public void Delay(ServiceTarget target, long? time = null)
    {
        _haContext.CallService("browser_mod", "delay", target, new BrowserModDelayParameters { Time = time });
    }

    ///<summary>Run arbitrary JavaScript code</summary>
    ///<param name="target">The target for this service call</param>
    public void Javascript(ServiceTarget target, BrowserModJavascriptParameters data)
    {
        _haContext.CallService("browser_mod", "javascript", target, data);
    }

    ///<summary>Run arbitrary JavaScript code</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">JavaScript code to run</param>
    public void Javascript(ServiceTarget target, object? code = null)
    {
        _haContext.CallService("browser_mod", "javascript", target, new BrowserModJavascriptParameters { Code = code });
    }

    ///<summary>Show more-info dialog</summary>
    ///<param name="target">The target for this service call</param>
    public void MoreInfo(ServiceTarget target, BrowserModMoreInfoParameters data)
    {
        _haContext.CallService("browser_mod", "more_info", target, data);
    }

    ///<summary>Show more-info dialog</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="entity"></param>
    ///<param name="large"></param>
    ///<param name="ignorePopupCard"></param>
    public void MoreInfo(ServiceTarget target, string entity, bool? large = null, bool? ignorePopupCard = null)
    {
        _haContext.CallService("browser_mod", "more_info", target, new BrowserModMoreInfoParameters { Entity = entity, Large = large, IgnorePopupCard = ignorePopupCard });
    }

    ///<summary>Navigate browser to a different page</summary>
    ///<param name="target">The target for this service call</param>
    public void Navigate(ServiceTarget target, BrowserModNavigateParameters data)
    {
        _haContext.CallService("browser_mod", "navigate", target, data);
    }

    ///<summary>Navigate browser to a different page</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="path">Target path</param>
    public void Navigate(ServiceTarget target, string? path = null)
    {
        _haContext.CallService("browser_mod", "navigate", target, new BrowserModNavigateParameters { Path = path });
    }

    ///<summary>Display a short notification</summary>
    ///<param name="target">The target for this service call</param>
    public void Notification(ServiceTarget target, BrowserModNotificationParameters data)
    {
        _haContext.CallService("browser_mod", "notification", target, data);
    }

    ///<summary>Display a short notification</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="message">Message to display</param>
    ///<param name="duration">Time before closing (ms)</param>
    ///<param name="actionText">Text of optional action button</param>
    ///<param name="action">Action to perform when the action button is pressed</param>
    public void Notification(ServiceTarget target, string message, long? duration = null, string? actionText = null, object? action = null)
    {
        _haContext.CallService("browser_mod", "notification", target, new BrowserModNotificationParameters { Message = message, Duration = duration, ActionText = actionText, Action = action });
    }

    ///<summary>Display a popup</summary>
    ///<param name="target">The target for this service call</param>
    public void Popup(ServiceTarget target, BrowserModPopupParameters data)
    {
        _haContext.CallService("browser_mod", "popup", target, data);
    }

    ///<summary>Display a popup</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="title">Popup title</param>
    ///<param name="content">Popup content (Test or lovelace card configuration)</param>
    ///<param name="size"></param>
    ///<param name="rightButton">Text of the right button</param>
    ///<param name="rightButtonAction">Action to perform when the right button is pressed</param>
    ///<param name="leftButton">Text of the left button</param>
    ///<param name="leftButtonAction">Action to perform when left button is pressed</param>
    ///<param name="dismissable">Whether the popup can be closed by the user without action</param>
    ///<param name="dismissAction">Action to perform when popup is dismissed</param>
    ///<param name="autoclose">Close the popup automatically on mouse, pointer or keyboard activity</param>
    ///<param name="timeout">Time before closing (ms)</param>
    ///<param name="timeoutAction">Action to perform when popup is closed by timeout</param>
    ///<param name="style">CSS code to apply to the popup window</param>
    public void Popup(ServiceTarget target, object content, string? title = null, object? size = null, string? rightButton = null, object? rightButtonAction = null, string? leftButton = null, object? leftButtonAction = null, bool? dismissable = null, object? dismissAction = null, bool? autoclose = null, long? timeout = null, object? timeoutAction = null, string? style = null)
    {
        _haContext.CallService("browser_mod", "popup", target, new BrowserModPopupParameters { Title = title, Content = content, Size = size, RightButton = rightButton, RightButtonAction = rightButtonAction, LeftButton = leftButton, LeftButtonAction = leftButtonAction, Dismissable = dismissable, DismissAction = dismissAction, Autoclose = autoclose, Timeout = timeout, TimeoutAction = timeoutAction, Style = style });
    }

    ///<summary>Refresh page</summary>
    ///<param name="target">The target for this service call</param>
    public void Refresh(ServiceTarget target)
    {
        _haContext.CallService("browser_mod", "refresh", target);
    }

    ///<summary>Run a sequence of services</summary>
    ///<param name="target">The target for this service call</param>
    public void Sequence(ServiceTarget target, BrowserModSequenceParameters data)
    {
        _haContext.CallService("browser_mod", "sequence", target, data);
    }

    ///<summary>Run a sequence of services</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="sequence">List of services to run</param>
    public void Sequence(ServiceTarget target, object? sequence = null)
    {
        _haContext.CallService("browser_mod", "sequence", target, new BrowserModSequenceParameters { Sequence = sequence });
    }

    ///<summary>Change the current theme</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTheme(ServiceTarget target, BrowserModSetThemeParameters data)
    {
        _haContext.CallService("browser_mod", "set_theme", target, data);
    }

    ///<summary>Change the current theme</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="theme">Name of theme or &apos;auto&apos;</param>
    ///<param name="dark">Dark/light mode</param>
    ///<param name="primaryColor">Primary theme color</param>
    ///<param name="accentColor">Accent theme color</param>
    public void SetTheme(ServiceTarget target, string? theme = null, object? dark = null, object? primaryColor = null, object? accentColor = null)
    {
        _haContext.CallService("browser_mod", "set_theme", target, new BrowserModSetThemeParameters { Theme = theme, Dark = dark, PrimaryColor = primaryColor, AccentColor = accentColor });
    }
}

public partial record BrowserModConsoleParameters
{
    ///<summary>Text to print</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }
}

public partial record BrowserModDelayParameters
{
    ///<summary>Time to wait (ms)</summary>
    [JsonPropertyName("time")]
    public long? Time { get; init; }
}

public partial record BrowserModJavascriptParameters
{
    ///<summary>JavaScript code to run</summary>
    [JsonPropertyName("code")]
    public object? Code { get; init; }
}

public partial record BrowserModMoreInfoParameters
{
    [JsonPropertyName("entity")]
    public string? Entity { get; init; }

    [JsonPropertyName("large")]
    public bool? Large { get; init; }

    [JsonPropertyName("ignore_popup_card")]
    public bool? IgnorePopupCard { get; init; }
}

public partial record BrowserModNavigateParameters
{
    ///<summary>Target path</summary>
    [JsonPropertyName("path")]
    public string? Path { get; init; }
}

public partial record BrowserModNotificationParameters
{
    ///<summary>Message to display</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Time before closing (ms)</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>Text of optional action button</summary>
    [JsonPropertyName("action_text")]
    public string? ActionText { get; init; }

    ///<summary>Action to perform when the action button is pressed</summary>
    [JsonPropertyName("action")]
    public object? Action { get; init; }
}

public partial record BrowserModPopupParameters
{
    ///<summary>Popup title</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Popup content (Test or lovelace card configuration)</summary>
    [JsonPropertyName("content")]
    public object? Content { get; init; }

    [JsonPropertyName("size")]
    public object? Size { get; init; }

    ///<summary>Text of the right button</summary>
    [JsonPropertyName("right_button")]
    public string? RightButton { get; init; }

    ///<summary>Action to perform when the right button is pressed</summary>
    [JsonPropertyName("right_button_action")]
    public object? RightButtonAction { get; init; }

    ///<summary>Text of the left button</summary>
    [JsonPropertyName("left_button")]
    public string? LeftButton { get; init; }

    ///<summary>Action to perform when left button is pressed</summary>
    [JsonPropertyName("left_button_action")]
    public object? LeftButtonAction { get; init; }

    ///<summary>Whether the popup can be closed by the user without action</summary>
    [JsonPropertyName("dismissable")]
    public bool? Dismissable { get; init; }

    ///<summary>Action to perform when popup is dismissed</summary>
    [JsonPropertyName("dismiss_action")]
    public object? DismissAction { get; init; }

    ///<summary>Close the popup automatically on mouse, pointer or keyboard activity</summary>
    [JsonPropertyName("autoclose")]
    public bool? Autoclose { get; init; }

    ///<summary>Time before closing (ms)</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }

    ///<summary>Action to perform when popup is closed by timeout</summary>
    [JsonPropertyName("timeout_action")]
    public object? TimeoutAction { get; init; }

    ///<summary>CSS code to apply to the popup window</summary>
    [JsonPropertyName("style")]
    public string? Style { get; init; }
}

public partial record BrowserModSequenceParameters
{
    ///<summary>List of services to run</summary>
    [JsonPropertyName("sequence")]
    public object? Sequence { get; init; }
}

public partial record BrowserModSetThemeParameters
{
    ///<summary>Name of theme or &apos;auto&apos;</summary>
    [JsonPropertyName("theme")]
    public string? Theme { get; init; }

    ///<summary>Dark/light mode</summary>
    [JsonPropertyName("dark")]
    public object? Dark { get; init; }

    ///<summary>Primary theme color</summary>
    [JsonPropertyName("primaryColor")]
    public object? PrimaryColor { get; init; }

    ///<summary>Accent theme color</summary>
    [JsonPropertyName("accentColor")]
    public object? AccentColor { get; init; }
}

public partial class ButtonServices
{
    private readonly IHaContext _haContext;
    public ButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Press the button entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target)
    {
        _haContext.CallService("button", "press", target);
    }
}

public partial class CalendarServices
{
    private readonly IHaContext _haContext;
    public CalendarServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    public void CreateEvent(ServiceTarget target, CalendarCreateEventParameters data)
    {
        _haContext.CallService("calendar", "create_event", target, data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public void CreateEvent(ServiceTarget target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        _haContext.CallService("calendar", "create_event", target, new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetEvents(ServiceTarget target, CalendarGetEventsParameters data)
    {
        _haContext.CallService("calendar", "get_events", target, data);
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public void GetEvents(ServiceTarget target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        _haContext.CallService("calendar", "get_events", target, new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }
}

public partial record CalendarCreateEventParameters
{
    ///<summary>Defines the short summary or subject for the event. eg: Department Party</summary>
    [JsonPropertyName("summary")]
    public string? Summary { get; init; }

    ///<summary>A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>The date and time the event should start. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public object? StartDateTime { get; init; }

    ///<summary>The date and time the event should end. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public object? EndDateTime { get; init; }

    ///<summary>The date the all-day event should start. eg: 2022-03-22</summary>
    [JsonPropertyName("start_date")]
    public object? StartDate { get; init; }

    ///<summary>The date the all-day event should end (exclusive). eg: 2022-03-23</summary>
    [JsonPropertyName("end_date")]
    public object? EndDate { get; init; }

    ///<summary>Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</summary>
    [JsonPropertyName("in")]
    public object? In { get; init; }

    ///<summary>The location of the event. eg: Conference Room - F123, Bldg. 002</summary>
    [JsonPropertyName("location")]
    public string? Location { get; init; }
}

public partial record CalendarGetEventsParameters
{
    ///<summary>Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public object? StartDateTime { get; init; }

    ///<summary>Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public object? EndDateTime { get; init; }

    ///<summary>Returns active events from start_date_time until the specified duration.</summary>
    [JsonPropertyName("duration")]
    public object? Duration { get; init; }
}

public partial class CameraServices
{
    private readonly IHaContext _haContext;
    public CameraServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Disables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableMotionDetection(ServiceTarget target)
    {
        _haContext.CallService("camera", "disable_motion_detection", target);
    }

    ///<summary>Enables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableMotionDetection(ServiceTarget target)
    {
        _haContext.CallService("camera", "enable_motion_detection", target);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayStream(ServiceTarget target, CameraPlayStreamParameters data)
    {
        _haContext.CallService("camera", "play_stream", target, data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public void PlayStream(ServiceTarget target, string mediaPlayer, object? format = null)
    {
        _haContext.CallService("camera", "play_stream", target, new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Record(ServiceTarget target, CameraRecordParameters data)
    {
        _haContext.CallService("camera", "record", target, data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public void Record(ServiceTarget target, string filename, long? duration = null, long? lookback = null)
    {
        _haContext.CallService("camera", "record", target, new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void Snapshot(ServiceTarget target, CameraSnapshotParameters data)
    {
        _haContext.CallService("camera", "snapshot", target, data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public void Snapshot(ServiceTarget target, string filename)
    {
        _haContext.CallService("camera", "snapshot", target, new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("camera", "turn_off", target);
    }

    ///<summary>Turns on the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("camera", "turn_on", target);
    }
}

public partial record CameraPlayStreamParameters
{
    ///<summary>Media players to stream to.</summary>
    [JsonPropertyName("media_player")]
    public string? MediaPlayer { get; init; }

    ///<summary>Stream format supported by the media player.</summary>
    [JsonPropertyName("format")]
    public object? Format { get; init; }
}

public partial record CameraRecordParameters
{
    ///<summary>Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }

    ///<summary>Planned duration of the recording. The actual duration may vary.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</summary>
    [JsonPropertyName("lookback")]
    public long? Lookback { get; init; }
}

public partial record CameraSnapshotParameters
{
    ///<summary>Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial class CastServices
{
    private readonly IHaContext _haContext;
    public CastServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shows a dashboard view on a Chromecast device.</summary>
    public void ShowLovelaceView(CastShowLovelaceViewParameters data)
    {
        _haContext.CallService("cast", "show_lovelace_view", null, data);
    }

    ///<summary>Shows a dashboard view on a Chromecast device.</summary>
    ///<param name="entityId">Media player entity to show the dashboard view on.</param>
    ///<param name="dashboardPath">The URL path of the dashboard to show. eg: lovelace-cast</param>
    ///<param name="viewPath">The path of the dashboard view to show. eg: downstairs</param>
    public void ShowLovelaceView(string entityId, string dashboardPath, string? viewPath = null)
    {
        _haContext.CallService("cast", "show_lovelace_view", null, new CastShowLovelaceViewParameters { EntityId = entityId, DashboardPath = dashboardPath, ViewPath = viewPath });
    }
}

public partial record CastShowLovelaceViewParameters
{
    ///<summary>Media player entity to show the dashboard view on.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>The URL path of the dashboard to show. eg: lovelace-cast</summary>
    [JsonPropertyName("dashboard_path")]
    public string? DashboardPath { get; init; }

    ///<summary>The path of the dashboard view to show. eg: downstairs</summary>
    [JsonPropertyName("view_path")]
    public string? ViewPath { get; init; }
}

public partial class ClimateServices
{
    private readonly IHaContext _haContext;
    public ClimateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAuxHeat(ServiceTarget target, ClimateSetAuxHeatParameters data)
    {
        _haContext.CallService("climate", "set_aux_heat", target, data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public void SetAuxHeat(ServiceTarget target, bool auxHeat)
    {
        _haContext.CallService("climate", "set_aux_heat", target, new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanMode(ServiceTarget target, ClimateSetFanModeParameters data)
    {
        _haContext.CallService("climate", "set_fan_mode", target, data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public void SetFanMode(ServiceTarget target, string fanMode)
    {
        _haContext.CallService("climate", "set_fan_mode", target, new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, ClimateSetHumidityParameters data)
    {
        _haContext.CallService("climate", "set_humidity", target, data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, long humidity)
    {
        _haContext.CallService("climate", "set_humidity", target, new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHvacMode(ServiceTarget target, ClimateSetHvacModeParameters data)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetHvacMode(ServiceTarget target, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, ClimateSetPresetModeParameters data)
    {
        _haContext.CallService("climate", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("climate", "set_preset_mode", target, new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingMode(ServiceTarget target, ClimateSetSwingModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_mode", target, data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="swingMode">Swing operation mode. eg: horizontal</param>
    public void SetSwingMode(ServiceTarget target, string swingMode)
    {
        _haContext.CallService("climate", "set_swing_mode", target, new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, ClimateSetTemperatureParameters data)
    {
        _haContext.CallService("climate", "set_temperature", target, data);
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="temperature">Target temperature.</param>
    ///<param name="targetTempHigh">High target temperature.</param>
    ///<param name="targetTempLow">Low target temperature.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetTemperature(ServiceTarget target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_temperature", target, new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("climate", "toggle", target);
    }

    ///<summary>Turns climate device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("climate", "turn_off", target);
    }

    ///<summary>Turns climate device on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("climate", "turn_on", target);
    }
}

public partial record ClimateSetAuxHeatParameters
{
    ///<summary>New value of auxiliary heater.</summary>
    [JsonPropertyName("aux_heat")]
    public bool? AuxHeat { get; init; }
}

public partial record ClimateSetFanModeParameters
{
    ///<summary>Fan operation mode. eg: low</summary>
    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }
}

public partial record ClimateSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public long? Humidity { get; init; }
}

public partial record ClimateSetHvacModeParameters
{
    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial record ClimateSetPresetModeParameters
{
    ///<summary>Preset mode. eg: away</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record ClimateSetSwingModeParameters
{
    ///<summary>Swing operation mode. eg: horizontal</summary>
    [JsonPropertyName("swing_mode")]
    public string? SwingMode { get; init; }
}

public partial record ClimateSetTemperatureParameters
{
    ///<summary>Target temperature.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>High target temperature.</summary>
    [JsonPropertyName("target_temp_high")]
    public double? TargetTempHigh { get; init; }

    ///<summary>Low target temperature.</summary>
    [JsonPropertyName("target_temp_low")]
    public double? TargetTempLow { get; init; }

    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial class CloudServices
{
    private readonly IHaContext _haContext;
    public CloudServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Makes the instance UI accessible from outside of the local network by using Home Assistant Cloud.</summary>
    public void RemoteConnect()
    {
        _haContext.CallService("cloud", "remote_connect", null);
    }

    ///<summary>Disconnects the Home Assistant UI from the Home Assistant Cloud. You will no longer be able to access your Home Assistant instance from outside your local network.</summary>
    public void RemoteDisconnect()
    {
        _haContext.CallService("cloud", "remote_disconnect", null);
    }
}

public partial class ConversationServices
{
    private readonly IHaContext _haContext;
    public ConversationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    public void Process(ConversationProcessParameters data)
    {
        _haContext.CallService("conversation", "process", null, data);
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text input. eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</param>
    ///<param name="conversationId">ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</param>
    public void Process(string text, string? language = null, object? agentId = null, string? conversationId = null)
    {
        _haContext.CallService("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId, ConversationId = conversationId });
    }

    ///<summary>Reloads the intent configuration.</summary>
    public void Reload(ConversationReloadParameters data)
    {
        _haContext.CallService("conversation", "reload", null, data);
    }

    ///<summary>Reloads the intent configuration.</summary>
    ///<param name="language">Language to clear cached intents for. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to reload. eg: homeassistant</param>
    public void Reload(string? language = null, object? agentId = null)
    {
        _haContext.CallService("conversation", "reload", null, new ConversationReloadParameters { Language = language, AgentId = agentId });
    }
}

public partial record ConversationProcessParameters
{
    ///<summary>Transcribed text input. eg: Turn all lights on</summary>
    [JsonPropertyName("text")]
    public string? Text { get; init; }

    ///<summary>Language of text. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }

    ///<summary>ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</summary>
    [JsonPropertyName("conversation_id")]
    public string? ConversationId { get; init; }
}

public partial record ConversationReloadParameters
{
    ///<summary>Language to clear cached intents for. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to reload. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }
}

public partial class CounterServices
{
    private readonly IHaContext _haContext;
    public CounterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrements a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target)
    {
        _haContext.CallService("counter", "decrement", target);
    }

    ///<summary>Increments a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target)
    {
        _haContext.CallService("counter", "increment", target);
    }

    ///<summary>Resets a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Reset(ServiceTarget target)
    {
        _haContext.CallService("counter", "reset", target);
    }

    ///<summary>Sets the counter value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, CounterSetValueParameters data)
    {
        _haContext.CallService("counter", "set_value", target, data);
    }

    ///<summary>Sets the counter value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The new counter value the entity should be set to.</param>
    public void SetValue(ServiceTarget target, long value)
    {
        _haContext.CallService("counter", "set_value", target, new CounterSetValueParameters { Value = value });
    }
}

public partial record CounterSetValueParameters
{
    ///<summary>The new counter value the entity should be set to.</summary>
    [JsonPropertyName("value")]
    public long? Value { get; init; }
}

public partial class CoverServices
{
    private readonly IHaContext _haContext;
    public CoverServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Closes a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "close_cover", target);
    }

    ///<summary>Tilts a cover to close.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "close_cover_tilt", target);
    }

    ///<summary>Opens a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "open_cover", target);
    }

    ///<summary>Tilts a cover open.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "open_cover_tilt", target);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverPosition(ServiceTarget target, CoverSetCoverPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_position", target, data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="position">Target position.</param>
    public void SetCoverPosition(ServiceTarget target, long position)
    {
        _haContext.CallService("cover", "set_cover_position", target, new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverTiltPosition(ServiceTarget target, CoverSetCoverTiltPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public void SetCoverTiltPosition(ServiceTarget target, long tiltPosition)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Stops the cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "stop_cover", target);
    }

    ///<summary>Stops a tilting cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "stop_cover_tilt", target);
    }

    ///<summary>Toggles a cover open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("cover", "toggle", target);
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void ToggleCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "toggle_cover_tilt", target);
    }
}

public partial record CoverSetCoverPositionParameters
{
    ///<summary>Target position.</summary>
    [JsonPropertyName("position")]
    public long? Position { get; init; }
}

public partial record CoverSetCoverTiltPositionParameters
{
    ///<summary>Target tilt positition.</summary>
    [JsonPropertyName("tilt_position")]
    public long? TiltPosition { get; init; }
}

public partial class DeviceTrackerServices
{
    private readonly IHaContext _haContext;
    public DeviceTrackerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Records a seen tracked device.</summary>
    public void See(DeviceTrackerSeeParameters data)
    {
        _haContext.CallService("device_tracker", "see", null, data);
    }

    ///<summary>Records a seen tracked device.</summary>
    ///<param name="mac">MAC address of the device. eg: FF:FF:FF:FF:FF:FF</param>
    ///<param name="devId">ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</param>
    ///<param name="hostName">Hostname of the device. eg: Dave</param>
    ///<param name="locationName">Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</param>
    ///<param name="gps">GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</param>
    ///<param name="gpsAccuracy">Accuracy of the GPS coordinates.</param>
    ///<param name="battery">Battery level of the device.</param>
    public void See(string? mac = null, string? devId = null, string? hostName = null, string? locationName = null, object? gps = null, long? gpsAccuracy = null, long? battery = null)
    {
        _haContext.CallService("device_tracker", "see", null, new DeviceTrackerSeeParameters { Mac = mac, DevId = devId, HostName = hostName, LocationName = locationName, Gps = gps, GpsAccuracy = gpsAccuracy, Battery = battery });
    }
}

public partial record DeviceTrackerSeeParameters
{
    ///<summary>MAC address of the device. eg: FF:FF:FF:FF:FF:FF</summary>
    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    ///<summary>ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</summary>
    [JsonPropertyName("dev_id")]
    public string? DevId { get; init; }

    ///<summary>Hostname of the device. eg: Dave</summary>
    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    ///<summary>Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</summary>
    [JsonPropertyName("location_name")]
    public string? LocationName { get; init; }

    ///<summary>GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</summary>
    [JsonPropertyName("gps")]
    public object? Gps { get; init; }

    ///<summary>Accuracy of the GPS coordinates.</summary>
    [JsonPropertyName("gps_accuracy")]
    public long? GpsAccuracy { get; init; }

    ///<summary>Battery level of the device.</summary>
    [JsonPropertyName("battery")]
    public long? Battery { get; init; }
}

public partial class DuckdnsServices
{
    private readonly IHaContext _haContext;
    public DuckdnsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the TXT record of your DuckDNS subdomain.</summary>
    public void SetTxt(DuckdnsSetTxtParameters data)
    {
        _haContext.CallService("duckdns", "set_txt", null, data);
    }

    ///<summary>Sets the TXT record of your DuckDNS subdomain.</summary>
    ///<param name="txt">Payload for the TXT record. eg: This domain name is reserved for use in documentation</param>
    public void SetTxt(string txt)
    {
        _haContext.CallService("duckdns", "set_txt", null, new DuckdnsSetTxtParameters { Txt = txt });
    }
}

public partial record DuckdnsSetTxtParameters
{
    ///<summary>Payload for the TXT record. eg: This domain name is reserved for use in documentation</summary>
    [JsonPropertyName("txt")]
    public string? Txt { get; init; }
}

public partial class FanServices
{
    private readonly IHaContext _haContext;
    public FanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decreases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void DecreaseSpeed(ServiceTarget target, FanDecreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "decrease_speed", target, data);
    }

    ///<summary>Decreases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentageStep">Decreases the speed by a percentage step.</param>
    public void DecreaseSpeed(ServiceTarget target, long? percentageStep = null)
    {
        _haContext.CallService("fan", "decrease_speed", target, new FanDecreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Increases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void IncreaseSpeed(ServiceTarget target, FanIncreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "increase_speed", target, data);
    }

    ///<summary>Increases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentageStep">Increases the speed by a percentage step.</param>
    public void IncreaseSpeed(ServiceTarget target, long? percentageStep = null)
    {
        _haContext.CallService("fan", "increase_speed", target, new FanIncreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Controls oscillatation of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void Oscillate(ServiceTarget target, FanOscillateParameters data)
    {
        _haContext.CallService("fan", "oscillate", target, data);
    }

    ///<summary>Controls oscillatation of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="oscillating">Turn on/off oscillation.</param>
    public void Oscillate(ServiceTarget target, bool oscillating)
    {
        _haContext.CallService("fan", "oscillate", target, new FanOscillateParameters { Oscillating = oscillating });
    }

    ///<summary>Sets the fan rotation direction.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDirection(ServiceTarget target, FanSetDirectionParameters data)
    {
        _haContext.CallService("fan", "set_direction", target, data);
    }

    ///<summary>Sets the fan rotation direction.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="direction">Direction to rotate.</param>
    public void SetDirection(ServiceTarget target, object direction)
    {
        _haContext.CallService("fan", "set_direction", target, new FanSetDirectionParameters { Direction = direction });
    }

    ///<summary>Sets the fan speed.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPercentage(ServiceTarget target, FanSetPercentageParameters data)
    {
        _haContext.CallService("fan", "set_percentage", target, data);
    }

    ///<summary>Sets the fan speed.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentage">Speed of the fan.</param>
    public void SetPercentage(ServiceTarget target, long percentage)
    {
        _haContext.CallService("fan", "set_percentage", target, new FanSetPercentageParameters { Percentage = percentage });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, FanSetPresetModeParameters data)
    {
        _haContext.CallService("fan", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="presetMode">Preset mode. eg: auto</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("fan", "set_preset_mode", target, new FanSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Toggles the fan on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("fan", "toggle", target);
    }

    ///<summary>Turns fan off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("fan", "turn_off", target);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, FanTurnOnParameters data)
    {
        _haContext.CallService("fan", "turn_on", target, data);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentage">Speed of the fan.</param>
    ///<param name="presetMode">Preset mode. eg: auto</param>
    public void TurnOn(ServiceTarget target, long? percentage = null, string? presetMode = null)
    {
        _haContext.CallService("fan", "turn_on", target, new FanTurnOnParameters { Percentage = percentage, PresetMode = presetMode });
    }
}

public partial record FanDecreaseSpeedParameters
{
    ///<summary>Decreases the speed by a percentage step.</summary>
    [JsonPropertyName("percentage_step")]
    public long? PercentageStep { get; init; }
}

public partial record FanIncreaseSpeedParameters
{
    ///<summary>Increases the speed by a percentage step.</summary>
    [JsonPropertyName("percentage_step")]
    public long? PercentageStep { get; init; }
}

public partial record FanOscillateParameters
{
    ///<summary>Turn on/off oscillation.</summary>
    [JsonPropertyName("oscillating")]
    public bool? Oscillating { get; init; }
}

public partial record FanSetDirectionParameters
{
    ///<summary>Direction to rotate.</summary>
    [JsonPropertyName("direction")]
    public object? Direction { get; init; }
}

public partial record FanSetPercentageParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public long? Percentage { get; init; }
}

public partial record FanSetPresetModeParameters
{
    ///<summary>Preset mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record FanTurnOnParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public long? Percentage { get; init; }

    ///<summary>Preset mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial class FfmpegServices
{
    private readonly IHaContext _haContext;
    public FfmpegServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a restart command to a ffmpeg based sensor.</summary>
    public void Restart(FfmpegRestartParameters data)
    {
        _haContext.CallService("ffmpeg", "restart", null, data);
    }

    ///<summary>Sends a restart command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will restart. Platform dependent.</param>
    public void Restart(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "restart", null, new FfmpegRestartParameters { EntityId = entityId });
    }

    ///<summary>Sends a start command to a ffmpeg based sensor.</summary>
    public void Start(FfmpegStartParameters data)
    {
        _haContext.CallService("ffmpeg", "start", null, data);
    }

    ///<summary>Sends a start command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will start. Platform dependent.</param>
    public void Start(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "start", null, new FfmpegStartParameters { EntityId = entityId });
    }

    ///<summary>Sends a stop command to a ffmpeg based sensor.</summary>
    public void Stop(FfmpegStopParameters data)
    {
        _haContext.CallService("ffmpeg", "stop", null, data);
    }

    ///<summary>Sends a stop command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will stop. Platform dependent.</param>
    public void Stop(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "stop", null, new FfmpegStopParameters { EntityId = entityId });
    }
}

public partial record FfmpegRestartParameters
{
    ///<summary>Name of entity that will restart. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStartParameters
{
    ///<summary>Name of entity that will start. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStopParameters
{
    ///<summary>Name of entity that will stop. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial class FrontendServices
{
    private readonly IHaContext _haContext;
    public FrontendServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads themes from the YAML-configuration.</summary>
    public void ReloadThemes()
    {
        _haContext.CallService("frontend", "reload_themes", null);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    public void SetTheme(FrontendSetThemeParameters data)
    {
        _haContext.CallService("frontend", "set_theme", null, data);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    ///<param name="name">Name of a theme. eg: default</param>
    ///<param name="mode">Theme mode.</param>
    public void SetTheme(object name, object? mode = null)
    {
        _haContext.CallService("frontend", "set_theme", null, new FrontendSetThemeParameters { Name = name, Mode = mode });
    }
}

public partial record FrontendSetThemeParameters
{
    ///<summary>Name of a theme. eg: default</summary>
    [JsonPropertyName("name")]
    public object? Name { get; init; }

    ///<summary>Theme mode.</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }
}

public partial class GoogleAssistantServices
{
    private readonly IHaContext _haContext;
    public GoogleAssistantServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a request_sync command to Google.</summary>
    public void RequestSync(GoogleAssistantRequestSyncParameters data)
    {
        _haContext.CallService("google_assistant", "request_sync", null, data);
    }

    ///<summary>Sends a request_sync command to Google.</summary>
    ///<param name="agentUserId">Only needed for automations. Specific Home Assistant user id (not username, ID in configuration &gt; users &gt; under username) to sync with Google Assistant. Do not need when you call this service through Home Assistant front end or API. Used in automation script or other place where context.user_id is missing.</param>
    public void RequestSync(string? agentUserId = null)
    {
        _haContext.CallService("google_assistant", "request_sync", null, new GoogleAssistantRequestSyncParameters { AgentUserId = agentUserId });
    }
}

public partial record GoogleAssistantRequestSyncParameters
{
    ///<summary>Only needed for automations. Specific Home Assistant user id (not username, ID in configuration &gt; users &gt; under username) to sync with Google Assistant. Do not need when you call this service through Home Assistant front end or API. Used in automation script or other place where context.user_id is missing.</summary>
    [JsonPropertyName("agent_user_id")]
    public string? AgentUserId { get; init; }
}

public partial class GroupServices
{
    private readonly IHaContext _haContext;
    public GroupServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads group configuration, entities, and notify services from YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("group", "reload", null);
    }

    ///<summary>Removes a group.</summary>
    public void Remove(GroupRemoveParameters data)
    {
        _haContext.CallService("group", "remove", null, data);
    }

    ///<summary>Removes a group.</summary>
    ///<param name="objectId">Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</param>
    public void Remove(object objectId)
    {
        _haContext.CallService("group", "remove", null, new GroupRemoveParameters { ObjectId = objectId });
    }

    ///<summary>Creates/Updates a user group.</summary>
    public void Set(GroupSetParameters data)
    {
        _haContext.CallService("group", "set", null, data);
    }

    ///<summary>Creates/Updates a user group.</summary>
    ///<param name="objectId">Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</param>
    ///<param name="name">Name of the group. eg: My test group</param>
    ///<param name="icon">Name of the icon for the group. eg: mdi:camera</param>
    ///<param name="entities">List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="addEntities">List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="removeEntities">List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="all">Enable this option if the group should only be used when all entities are in state `on`.</param>
    public void Set(string objectId, string? name = null, object? icon = null, string? entities = null, string? addEntities = null, string? removeEntities = null, bool? all = null)
    {
        _haContext.CallService("group", "set", null, new GroupSetParameters { ObjectId = objectId, Name = name, Icon = icon, Entities = entities, AddEntities = addEntities, RemoveEntities = removeEntities, All = all });
    }
}

public partial record GroupRemoveParameters
{
    ///<summary>Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public object? ObjectId { get; init; }
}

public partial record GroupSetParameters
{
    ///<summary>Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public string? ObjectId { get; init; }

    ///<summary>Name of the group. eg: My test group</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Name of the icon for the group. eg: mdi:camera</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("entities")]
    public string? Entities { get; init; }

    ///<summary>List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("add_entities")]
    public string? AddEntities { get; init; }

    ///<summary>List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("remove_entities")]
    public string? RemoveEntities { get; init; }

    ///<summary>Enable this option if the group should only be used when all entities are in state `on`.</summary>
    [JsonPropertyName("all")]
    public bool? All { get; init; }
}

public partial class HassioServices
{
    private readonly IHaContext _haContext;
    public HassioServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Restarts an add-on.</summary>
    public void AddonRestart(HassioAddonRestartParameters data)
    {
        _haContext.CallService("hassio", "addon_restart", null, data);
    }

    ///<summary>Restarts an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonRestart(object addon)
    {
        _haContext.CallService("hassio", "addon_restart", null, new HassioAddonRestartParameters { Addon = addon });
    }

    ///<summary>Starts an add-on.</summary>
    public void AddonStart(HassioAddonStartParameters data)
    {
        _haContext.CallService("hassio", "addon_start", null, data);
    }

    ///<summary>Starts an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonStart(object addon)
    {
        _haContext.CallService("hassio", "addon_start", null, new HassioAddonStartParameters { Addon = addon });
    }

    ///<summary>Writes data to add-on stdin.</summary>
    public void AddonStdin(HassioAddonStdinParameters data)
    {
        _haContext.CallService("hassio", "addon_stdin", null, data);
    }

    ///<summary>Writes data to add-on stdin.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonStdin(object addon)
    {
        _haContext.CallService("hassio", "addon_stdin", null, new HassioAddonStdinParameters { Addon = addon });
    }

    ///<summary>Stops an add-on.</summary>
    public void AddonStop(HassioAddonStopParameters data)
    {
        _haContext.CallService("hassio", "addon_stop", null, data);
    }

    ///<summary>Stops an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonStop(object addon)
    {
        _haContext.CallService("hassio", "addon_stop", null, new HassioAddonStopParameters { Addon = addon });
    }

    ///<summary>Updates an add-on. This service should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.</summary>
    public void AddonUpdate(HassioAddonUpdateParameters data)
    {
        _haContext.CallService("hassio", "addon_update", null, data);
    }

    ///<summary>Updates an add-on. This service should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonUpdate(object addon)
    {
        _haContext.CallService("hassio", "addon_update", null, new HassioAddonUpdateParameters { Addon = addon });
    }

    ///<summary>Creates a full backup.</summary>
    public void BackupFull(HassioBackupFullParameters data)
    {
        _haContext.CallService("hassio", "backup_full", null, data);
    }

    ///<summary>Creates a full backup.</summary>
    ///<param name="name">Optional (default = current date and time). eg: Backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    ///<param name="homeassistantExcludeDatabase">Exclude the Home Assistant database file from backup</param>
    public void BackupFull(string? name = null, string? password = null, bool? compressed = null, object? location = null, bool? homeassistantExcludeDatabase = null)
    {
        _haContext.CallService("hassio", "backup_full", null, new HassioBackupFullParameters { Name = name, Password = password, Compressed = compressed, Location = location, HomeassistantExcludeDatabase = homeassistantExcludeDatabase });
    }

    ///<summary>Creates a partial backup.</summary>
    public void BackupPartial(HassioBackupPartialParameters data)
    {
        _haContext.CallService("hassio", "backup_partial", null, data);
    }

    ///<summary>Creates a partial backup.</summary>
    ///<param name="homeassistant">Includes Home Assistant settings in the backup.</param>
    ///<param name="homeassistantExcludeDatabase">Exclude the Home Assistant database file from backup</param>
    ///<param name="addons">List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="folders">List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="name">Optional (default = current date and time). eg: Partial backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    public void BackupPartial(bool? homeassistant = null, bool? homeassistantExcludeDatabase = null, object? addons = null, object? folders = null, string? name = null, string? password = null, bool? compressed = null, object? location = null)
    {
        _haContext.CallService("hassio", "backup_partial", null, new HassioBackupPartialParameters { Homeassistant = homeassistant, HomeassistantExcludeDatabase = homeassistantExcludeDatabase, Addons = addons, Folders = folders, Name = name, Password = password, Compressed = compressed, Location = location });
    }

    ///<summary>Reboots the host system.</summary>
    public void HostReboot()
    {
        _haContext.CallService("hassio", "host_reboot", null);
    }

    ///<summary>Powers off the host system.</summary>
    public void HostShutdown()
    {
        _haContext.CallService("hassio", "host_shutdown", null);
    }

    ///<summary>Restores from full backup.</summary>
    public void RestoreFull(HassioRestoreFullParameters data)
    {
        _haContext.CallService("hassio", "restore_full", null, data);
    }

    ///<summary>Restores from full backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestoreFull(string slug, string? password = null)
    {
        _haContext.CallService("hassio", "restore_full", null, new HassioRestoreFullParameters { Slug = slug, Password = password });
    }

    ///<summary>Restores from a partial backup.</summary>
    public void RestorePartial(HassioRestorePartialParameters data)
    {
        _haContext.CallService("hassio", "restore_partial", null, data);
    }

    ///<summary>Restores from a partial backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="homeassistant">Restores Home Assistant.</param>
    ///<param name="folders">List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="addons">List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestorePartial(string slug, bool? homeassistant = null, object? folders = null, object? addons = null, string? password = null)
    {
        _haContext.CallService("hassio", "restore_partial", null, new HassioRestorePartialParameters { Slug = slug, Homeassistant = homeassistant, Folders = folders, Addons = addons, Password = password });
    }
}

public partial record HassioAddonRestartParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStartParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStdinParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStopParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonUpdateParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioBackupFullParameters
{
    ///<summary>Optional (default = current date and time). eg: Backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }

    ///<summary>Exclude the Home Assistant database file from backup</summary>
    [JsonPropertyName("homeassistant_exclude_database")]
    public bool? HomeassistantExcludeDatabase { get; init; }
}

public partial record HassioBackupPartialParameters
{
    ///<summary>Includes Home Assistant settings in the backup.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>Exclude the Home Assistant database file from backup</summary>
    [JsonPropertyName("homeassistant_exclude_database")]
    public bool? HomeassistantExcludeDatabase { get; init; }

    ///<summary>List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>Optional (default = current date and time). eg: Partial backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }
}

public partial record HassioRestoreFullParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial record HassioRestorePartialParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Restores Home Assistant.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial class InputBooleanServices
{
    private readonly IHaContext _haContext;
    public InputBooleanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_boolean", "reload", null);
    }

    ///<summary>Toggles the helper on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "toggle", target);
    }

    ///<summary>Turns off the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "turn_off", target);
    }

    ///<summary>Turns on the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "turn_on", target);
    }
}

public partial class InputButtonServices
{
    private readonly IHaContext _haContext;
    public InputButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Mimics the physical button press on the device.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target)
    {
        _haContext.CallService("input_button", "press", target);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_button", "reload", null);
    }
}

public partial class InputDatetimeServices
{
    private readonly IHaContext _haContext;
    public InputDatetimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_datetime", "reload", null);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDatetime(ServiceTarget target, InputDatetimeSetDatetimeParameters data)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public void SetDatetime(ServiceTarget target, string? date = null, DateTime? time = null, string? datetime = null, long? timestamp = null)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public partial record InputDatetimeSetDatetimeParameters
{
    ///<summary>The target date. eg: &quot;2019-04-20&quot;</summary>
    [JsonPropertyName("date")]
    public string? Date { get; init; }

    ///<summary>The target time. eg: &quot;05:04:20&quot;</summary>
    [JsonPropertyName("time")]
    public DateTime? Time { get; init; }

    ///<summary>The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</summary>
    [JsonPropertyName("datetime")]
    public string? Datetime { get; init; }

    ///<summary>The target date &amp; time, expressed by a UNIX timestamp.</summary>
    [JsonPropertyName("timestamp")]
    public long? Timestamp { get; init; }
}

public partial class InputNumberServices
{
    private readonly IHaContext _haContext;
    public InputNumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrements the current value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target)
    {
        _haContext.CallService("input_number", "decrement", target);
    }

    ///<summary>Increments the value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target)
    {
        _haContext.CallService("input_number", "increment", target);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_number", "reload", null);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputNumberSetValueParameters data)
    {
        _haContext.CallService("input_number", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("input_number", "set_value", target, new InputNumberSetValueParameters { Value = value });
    }
}

public partial record InputNumberSetValueParameters
{
    ///<summary>The target value.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class InputSelectServices
{
    private readonly IHaContext _haContext;
    public InputSelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_select", "reload", null);
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target)
    {
        _haContext.CallService("input_select", "select_first", target);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target)
    {
        _haContext.CallService("input_select", "select_last", target);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, InputSelectSelectNextParameters data)
    {
        _haContext.CallService("input_select", "select_next", target, data);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_next", target, new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, InputSelectSelectOptionParameters data)
    {
        _haContext.CallService("input_select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("input_select", "select_option", target, new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, InputSelectSelectPreviousParameters data)
    {
        _haContext.CallService("input_select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_previous", target, new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOptions(ServiceTarget target, InputSelectSetOptionsParameters data)
    {
        _haContext.CallService("input_select", "set_options", target, data);
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public void SetOptions(ServiceTarget target, object options)
    {
        _haContext.CallService("input_select", "set_options", target, new InputSelectSetOptionsParameters { Options = options });
    }
}

public partial record InputSelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record InputSelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSetOptionsParameters
{
    ///<summary>List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class InputTextServices
{
    private readonly IHaContext _haContext;
    public InputTextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_text", "reload", null);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputTextSetValueParameters data)
    {
        _haContext.CallService("input_text", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("input_text", "set_value", target, new InputTextSetValueParameters { Value = value });
    }
}

public partial record InputTextSetValueParameters
{
    ///<summary>The target value. eg: This is an example text</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class KiaUvoServices
{
    private readonly IHaContext _haContext;
    public KiaUvoServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Close Charging Port</summary>
    public void CloseChargePort(KiaUvoCloseChargePortParameters data)
    {
        _haContext.CallService("kia_uvo", "close_charge_port", null, data);
    }

    ///<summary>Close Charging Port</summary>
    ///<param name="deviceId">Target vehicle</param>
    public void CloseChargePort(string? deviceId = null)
    {
        _haContext.CallService("kia_uvo", "close_charge_port", null, new KiaUvoCloseChargePortParameters { DeviceId = deviceId });
    }

    ///<summary>Force your vehicle to update its data. All vehicles on the same account as the vehicle selected will be updated.</summary>
    public void ForceUpdate(KiaUvoForceUpdateParameters data)
    {
        _haContext.CallService("kia_uvo", "force_update", null, data);
    }

    ///<summary>Force your vehicle to update its data. All vehicles on the same account as the vehicle selected will be updated.</summary>
    ///<param name="deviceId">Target vehicle</param>
    public void ForceUpdate(string? deviceId = null)
    {
        _haContext.CallService("kia_uvo", "force_update", null, new KiaUvoForceUpdateParameters { DeviceId = deviceId });
    }

    ///<summary>Lock the vehicle</summary>
    public void Lock(KiaUvoLockParameters data)
    {
        _haContext.CallService("kia_uvo", "lock", null, data);
    }

    ///<summary>Lock the vehicle</summary>
    ///<param name="deviceId">Target vehicle</param>
    public void Lock(string? deviceId = null)
    {
        _haContext.CallService("kia_uvo", "lock", null, new KiaUvoLockParameters { DeviceId = deviceId });
    }

    ///<summary>Open Charge Port</summary>
    public void OpenChargePort(KiaUvoOpenChargePortParameters data)
    {
        _haContext.CallService("kia_uvo", "open_charge_port", null, data);
    }

    ///<summary>Open Charge Port</summary>
    ///<param name="deviceId">Target vehicle</param>
    public void OpenChargePort(string? deviceId = null)
    {
        _haContext.CallService("kia_uvo", "open_charge_port", null, new KiaUvoOpenChargePortParameters { DeviceId = deviceId });
    }

    ///<summary>sets ac and dc charge capacity limits</summary>
    public void SetChargeLimits(KiaUvoSetChargeLimitsParameters data)
    {
        _haContext.CallService("kia_uvo", "set_charge_limits", null, data);
    }

    ///<summary>sets ac and dc charge capacity limits</summary>
    ///<param name="deviceId">Target vehicle</param>
    ///<param name="dcLimit">max charge capacity using DC charger eg: 50</param>
    ///<param name="acLimit">max charge capacity using AC charger eg: 50</param>
    public void SetChargeLimits(string? deviceId = null, long? dcLimit = null, long? acLimit = null)
    {
        _haContext.CallService("kia_uvo", "set_charge_limits", null, new KiaUvoSetChargeLimitsParameters { DeviceId = deviceId, DcLimit = dcLimit, AcLimit = acLimit });
    }

    ///<summary>Sets the AC charging current capacity</summary>
    public void SetChargingCurrent(KiaUvoSetChargingCurrentParameters data)
    {
        _haContext.CallService("kia_uvo", "set_charging_current", null, data);
    }

    ///<summary>Sets the AC charging current capacity</summary>
    ///<param name="deviceId">Target vehicle</param>
    ///<param name="level">Charging current capacity percentage</param>
    public void SetChargingCurrent(object level, string? deviceId = null)
    {
        _haContext.CallService("kia_uvo", "set_charging_current", null, new KiaUvoSetChargingCurrentParameters { DeviceId = deviceId, Level = level });
    }

    ///<summary>Start charging</summary>
    public void StartCharge(KiaUvoStartChargeParameters data)
    {
        _haContext.CallService("kia_uvo", "start_charge", null, data);
    }

    ///<summary>Start charging</summary>
    ///<param name="deviceId">Target vehicle</param>
    public void StartCharge(string? deviceId = null)
    {
        _haContext.CallService("kia_uvo", "start_charge", null, new KiaUvoStartChargeParameters { DeviceId = deviceId });
    }

    ///<summary>Please use cautiously - Starts climate and engine.  Not all options are available on all cars or regions.  Use your car&apos;s mobile app as a guide and match the options available in your car. </summary>
    public void StartClimate(KiaUvoStartClimateParameters data)
    {
        _haContext.CallService("kia_uvo", "start_climate", null, data);
    }

    ///<summary>Please use cautiously - Starts climate and engine.  Not all options are available on all cars or regions.  Use your car&apos;s mobile app as a guide and match the options available in your car. </summary>
    ///<param name="deviceId">Target vehicle</param>
    ///<param name="duration">On Duration eg: 5</param>
    ///<param name="climate">Enable the HVAC System</param>
    ///<param name="temperature">Set temperature of climate control. Unit is specific to region. eg: 21.5</param>
    ///<param name="defrost">Front Windshield Defrost</param>
    ///<param name="heating">Heated features like the steering wheel and rear window eg: False</param>
    ///<param name="flseat">Front Left Seat Heat Cool Setting</param>
    ///<param name="frseat">Front Right Seat Heat Cool Setting</param>
    ///<param name="rlseat">Rear Left Seat Heat Cool Setting</param>
    ///<param name="rrseat">Rear Right Seat Heat Cool Setting</param>
    public void StartClimate(bool climate, double temperature, object heating, string? deviceId = null, long? duration = null, bool? defrost = null, object? flseat = null, object? frseat = null, object? rlseat = null, object? rrseat = null)
    {
        _haContext.CallService("kia_uvo", "start_climate", null, new KiaUvoStartClimateParameters { DeviceId = deviceId, Duration = duration, Climate = climate, Temperature = temperature, Defrost = defrost, Heating = heating, Flseat = flseat, Frseat = frseat, Rlseat = rlseat, Rrseat = rrseat });
    }

    ///<summary>Stop charging</summary>
    public void StopCharge(KiaUvoStopChargeParameters data)
    {
        _haContext.CallService("kia_uvo", "stop_charge", null, data);
    }

    ///<summary>Stop charging</summary>
    ///<param name="deviceId">Target vehicle</param>
    public void StopCharge(string? deviceId = null)
    {
        _haContext.CallService("kia_uvo", "stop_charge", null, new KiaUvoStopChargeParameters { DeviceId = deviceId });
    }

    ///<summary>Please use cautiously - stop car and climate</summary>
    public void StopClimate(KiaUvoStopClimateParameters data)
    {
        _haContext.CallService("kia_uvo", "stop_climate", null, data);
    }

    ///<summary>Please use cautiously - stop car and climate</summary>
    ///<param name="deviceId">Target vehicle</param>
    public void StopClimate(string? deviceId = null)
    {
        _haContext.CallService("kia_uvo", "stop_climate", null, new KiaUvoStopClimateParameters { DeviceId = deviceId });
    }

    ///<summary>Unlock the vehicle</summary>
    public void Unlock(KiaUvoUnlockParameters data)
    {
        _haContext.CallService("kia_uvo", "unlock", null, data);
    }

    ///<summary>Unlock the vehicle</summary>
    ///<param name="deviceId">Target vehicle</param>
    public void Unlock(string? deviceId = null)
    {
        _haContext.CallService("kia_uvo", "unlock", null, new KiaUvoUnlockParameters { DeviceId = deviceId });
    }

    ///<summary>Update vehicle data from service cache</summary>
    public void Update(KiaUvoUpdateParameters data)
    {
        _haContext.CallService("kia_uvo", "update", null, data);
    }

    ///<summary>Update vehicle data from service cache</summary>
    ///<param name="deviceId">Target vehicle</param>
    public void Update(string? deviceId = null)
    {
        _haContext.CallService("kia_uvo", "update", null, new KiaUvoUpdateParameters { DeviceId = deviceId });
    }
}

public partial record KiaUvoCloseChargePortParameters
{
    ///<summary>Target vehicle</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }
}

public partial record KiaUvoForceUpdateParameters
{
    ///<summary>Target vehicle</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }
}

public partial record KiaUvoLockParameters
{
    ///<summary>Target vehicle</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }
}

public partial record KiaUvoOpenChargePortParameters
{
    ///<summary>Target vehicle</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }
}

public partial record KiaUvoSetChargeLimitsParameters
{
    ///<summary>Target vehicle</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>max charge capacity using DC charger eg: 50</summary>
    [JsonPropertyName("dc_limit")]
    public long? DcLimit { get; init; }

    ///<summary>max charge capacity using AC charger eg: 50</summary>
    [JsonPropertyName("ac_limit")]
    public long? AcLimit { get; init; }
}

public partial record KiaUvoSetChargingCurrentParameters
{
    ///<summary>Target vehicle</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>Charging current capacity percentage</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }
}

public partial record KiaUvoStartChargeParameters
{
    ///<summary>Target vehicle</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }
}

public partial record KiaUvoStartClimateParameters
{
    ///<summary>Target vehicle</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>On Duration eg: 5</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>Enable the HVAC System</summary>
    [JsonPropertyName("climate")]
    public bool? Climate { get; init; }

    ///<summary>Set temperature of climate control. Unit is specific to region. eg: 21.5</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>Front Windshield Defrost</summary>
    [JsonPropertyName("defrost")]
    public bool? Defrost { get; init; }

    ///<summary>Heated features like the steering wheel and rear window eg: False</summary>
    [JsonPropertyName("heating")]
    public object? Heating { get; init; }

    ///<summary>Front Left Seat Heat Cool Setting</summary>
    [JsonPropertyName("flseat")]
    public object? Flseat { get; init; }

    ///<summary>Front Right Seat Heat Cool Setting</summary>
    [JsonPropertyName("frseat")]
    public object? Frseat { get; init; }

    ///<summary>Rear Left Seat Heat Cool Setting</summary>
    [JsonPropertyName("rlseat")]
    public object? Rlseat { get; init; }

    ///<summary>Rear Right Seat Heat Cool Setting</summary>
    [JsonPropertyName("rrseat")]
    public object? Rrseat { get; init; }
}

public partial record KiaUvoStopChargeParameters
{
    ///<summary>Target vehicle</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }
}

public partial record KiaUvoStopClimateParameters
{
    ///<summary>Target vehicle</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }
}

public partial record KiaUvoUnlockParameters
{
    ///<summary>Target vehicle</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }
}

public partial record KiaUvoUpdateParameters
{
    ///<summary>Target vehicle</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }
}

public partial class KodiServices
{
    private readonly IHaContext _haContext;
    public KodiServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds music to the default playlist (i.e. playlistid=0).</summary>
    ///<param name="target">The target for this service call</param>
    public void AddToPlaylist(ServiceTarget target, KodiAddToPlaylistParameters data)
    {
        _haContext.CallService("kodi", "add_to_playlist", target, data);
    }

    ///<summary>Adds music to the default playlist (i.e. playlistid=0).</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaType">Media type identifier. It must be one of SONG or ALBUM. eg: ALBUM</param>
    ///<param name="mediaId">Unique Id of the media entry to add (`songid` or albumid`). If not defined, `media_name` and `artist_name` are needed to search the Kodi music library. eg: 123456</param>
    ///<param name="mediaName">Optional media name for filtering media. Can be &apos;ALL&apos; when `media_type` is &apos;ALBUM&apos; and `artist_name` is specified, to add all songs from one artist. eg: Highway to Hell</param>
    ///<param name="artistName">Optional artist name for filtering media. eg: AC/DC</param>
    public void AddToPlaylist(ServiceTarget target, string mediaType, string? mediaId = null, string? mediaName = null, string? artistName = null)
    {
        _haContext.CallService("kodi", "add_to_playlist", target, new KodiAddToPlaylistParameters { MediaType = mediaType, MediaId = mediaId, MediaName = mediaName, ArtistName = artistName });
    }

    ///<summary>Calls a Kodi JSONRPC API method with optional parameters. Results of the Kodi API call will be redirected in a Home Assistant event: `kodi_call_method_result`.</summary>
    ///<param name="target">The target for this service call</param>
    public void CallMethod(ServiceTarget target, KodiCallMethodParameters data)
    {
        _haContext.CallService("kodi", "call_method", target, data);
    }

    ///<summary>Calls a Kodi JSONRPC API method with optional parameters. Results of the Kodi API call will be redirected in a Home Assistant event: `kodi_call_method_result`.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="method">Name of the Kodi JSONRPC API method to be called. eg: VideoLibrary.GetRecentlyAddedEpisodes</param>
    public void CallMethod(ServiceTarget target, string @method)
    {
        _haContext.CallService("kodi", "call_method", target, new KodiCallMethodParameters { Method = @method });
    }
}

public partial record KodiAddToPlaylistParameters
{
    ///<summary>Media type identifier. It must be one of SONG or ALBUM. eg: ALBUM</summary>
    [JsonPropertyName("media_type")]
    public string? MediaType { get; init; }

    ///<summary>Unique Id of the media entry to add (`songid` or albumid`). If not defined, `media_name` and `artist_name` are needed to search the Kodi music library. eg: 123456</summary>
    [JsonPropertyName("media_id")]
    public string? MediaId { get; init; }

    ///<summary>Optional media name for filtering media. Can be &apos;ALL&apos; when `media_type` is &apos;ALBUM&apos; and `artist_name` is specified, to add all songs from one artist. eg: Highway to Hell</summary>
    [JsonPropertyName("media_name")]
    public string? MediaName { get; init; }

    ///<summary>Optional artist name for filtering media. eg: AC/DC</summary>
    [JsonPropertyName("artist_name")]
    public string? ArtistName { get; init; }
}

public partial record KodiCallMethodParameters
{
    ///<summary>Name of the Kodi JSONRPC API method to be called. eg: VideoLibrary.GetRecentlyAddedEpisodes</summary>
    [JsonPropertyName("method")]
    public string? Method { get; init; }
}

public partial class LandroidCloudServices
{
    private readonly IHaContext _haContext;
    public LandroidCloudServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Set device config parameters</summary>
    ///<param name="target">The target for this service call</param>
    public void Config(ServiceTarget target, LandroidCloudConfigParameters data)
    {
        _haContext.CallService("landroid_cloud", "config", target, data);
    }

    ///<summary>Set device config parameters</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="multizoneDistances">Set multizone distance array in meters. 0 = Disabled. Format: 15, 80, 120, 155 eg: 15, 80, 120, 155</param>
    ///<param name="multizoneProbabilities">Set multizone probabilities array. Format: 50, 10, 20, 20 eg: 50, 10, 20, 20</param>
    public void Config(ServiceTarget target, string? multizoneDistances = null, string? multizoneProbabilities = null)
    {
        _haContext.CallService("landroid_cloud", "config", target, new LandroidCloudConfigParameters { MultizoneDistances = multizoneDistances, MultizoneProbabilities = multizoneProbabilities });
    }

    ///<summary>Start One-Time-Schedule (if supported)</summary>
    ///<param name="target">The target for this service call</param>
    public void Ots(ServiceTarget target, LandroidCloudOtsParameters data)
    {
        _haContext.CallService("landroid_cloud", "ots", target, data);
    }

    ///<summary>Start One-Time-Schedule (if supported)</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="boundary">Do boundary (Edge/Border cut) eg: True</param>
    ///<param name="runtime">Run time in minutes before returning to charging station eg: 60</param>
    public void Ots(ServiceTarget target, bool boundary, long runtime)
    {
        _haContext.CallService("landroid_cloud", "ots", target, new LandroidCloudOtsParameters { Boundary = boundary, Runtime = runtime });
    }

    ///<summary>Set or change the schedule of the mower</summary>
    ///<param name="target">The target for this service call</param>
    public void Schedule(ServiceTarget target, LandroidCloudScheduleParameters data)
    {
        _haContext.CallService("landroid_cloud", "schedule", target, data);
    }

    ///<summary>Set or change the schedule of the mower</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="type">Change primary or secondary schedule? eg: primary</param>
    ///<param name="mondayStart">Starting time for mondays eg: 11:00</param>
    ///<param name="mondayEnd">When should the schedule stop on mondays? eg: 16:00</param>
    ///<param name="mondayBoundary">Should we start this schedule by cutting the boundary (edge/border cut)? eg: False</param>
    ///<param name="tuesdayStart">Starting time for tuesdays eg: 11:00</param>
    ///<param name="tuesdayEnd">When should the schedule stop on tuesdays? eg: 16:00</param>
    ///<param name="tuesdayBoundary">Should we start this schedule by cutting the boundary (edge/border cut)? eg: False</param>
    ///<param name="wednesdayStart">Starting time for wednesdays eg: 11:00</param>
    ///<param name="wednesdayEnd">When should the schedule stop on wednesdays? eg: 16:00</param>
    ///<param name="wednesdayBoundary">Should we start this schedule by cutting the boundary (edge/border cut)? eg: False</param>
    ///<param name="thursdayStart">Starting time for thursdays eg: 11:00</param>
    ///<param name="thursdayEnd">When should the schedule stop on thursdays? eg: 16:00</param>
    ///<param name="thursdayBoundary">Should we start this schedule by cutting the boundary (edge/border cut)? eg: False</param>
    ///<param name="fridayStart">Starting time for fridays eg: 11:00</param>
    ///<param name="fridayEnd">When should the schedule stop on fridays? eg: 16:00</param>
    ///<param name="fridayBoundary">Should we start this schedule by cutting the boundary (edge/border cut)? eg: False</param>
    ///<param name="saturdayStart">Starting time for saturdays eg: 11:00</param>
    ///<param name="saturdayEnd">When should the schedule stop on saturdays? eg: 16:00</param>
    ///<param name="saturdayBoundary">Should we start this schedule by cutting the boundary (edge/border cut)? eg: False</param>
    ///<param name="sundayStart">Starting time for sundays eg: 11:00</param>
    ///<param name="sundayEnd">When should the schedule stop on sundays? eg: 16:00</param>
    ///<param name="sundayBoundary">Should we start this schedule by cutting the boundary (edge/border cut)? eg: False</param>
    public void Schedule(ServiceTarget target, object @type, DateTime? mondayStart = null, DateTime? mondayEnd = null, bool? mondayBoundary = null, DateTime? tuesdayStart = null, DateTime? tuesdayEnd = null, bool? tuesdayBoundary = null, DateTime? wednesdayStart = null, DateTime? wednesdayEnd = null, bool? wednesdayBoundary = null, DateTime? thursdayStart = null, DateTime? thursdayEnd = null, bool? thursdayBoundary = null, DateTime? fridayStart = null, DateTime? fridayEnd = null, bool? fridayBoundary = null, DateTime? saturdayStart = null, DateTime? saturdayEnd = null, bool? saturdayBoundary = null, DateTime? sundayStart = null, DateTime? sundayEnd = null, bool? sundayBoundary = null)
    {
        _haContext.CallService("landroid_cloud", "schedule", target, new LandroidCloudScheduleParameters { Type = @type, MondayStart = mondayStart, MondayEnd = mondayEnd, MondayBoundary = mondayBoundary, TuesdayStart = tuesdayStart, TuesdayEnd = tuesdayEnd, TuesdayBoundary = tuesdayBoundary, WednesdayStart = wednesdayStart, WednesdayEnd = wednesdayEnd, WednesdayBoundary = wednesdayBoundary, ThursdayStart = thursdayStart, ThursdayEnd = thursdayEnd, ThursdayBoundary = thursdayBoundary, FridayStart = fridayStart, FridayEnd = fridayEnd, FridayBoundary = fridayBoundary, SaturdayStart = saturdayStart, SaturdayEnd = saturdayEnd, SaturdayBoundary = saturdayBoundary, SundayStart = sundayStart, SundayEnd = sundayEnd, SundayBoundary = sundayBoundary });
    }

    ///<summary> Send a raw JSON command to the device</summary>
    ///<param name="target">The target for this service call</param>
    public void SendRaw(ServiceTarget target, LandroidCloudSendRawParameters data)
    {
        _haContext.CallService("landroid_cloud", "send_raw", target, data);
    }

    ///<summary> Send a raw JSON command to the device</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="json">Data to send, formatted as valid JSON eg: {&apos;cmd&apos;: 1}</param>
    public void SendRaw(ServiceTarget target, string json)
    {
        _haContext.CallService("landroid_cloud", "send_raw", target, new LandroidCloudSendRawParameters { Json = json });
    }
}

public partial record LandroidCloudConfigParameters
{
    ///<summary>Set multizone distance array in meters. 0 = Disabled. Format: 15, 80, 120, 155 eg: 15, 80, 120, 155</summary>
    [JsonPropertyName("multizone_distances")]
    public string? MultizoneDistances { get; init; }

    ///<summary>Set multizone probabilities array. Format: 50, 10, 20, 20 eg: 50, 10, 20, 20</summary>
    [JsonPropertyName("multizone_probabilities")]
    public string? MultizoneProbabilities { get; init; }
}

public partial record LandroidCloudOtsParameters
{
    ///<summary>Do boundary (Edge/Border cut) eg: True</summary>
    [JsonPropertyName("boundary")]
    public bool? Boundary { get; init; }

    ///<summary>Run time in minutes before returning to charging station eg: 60</summary>
    [JsonPropertyName("runtime")]
    public long? Runtime { get; init; }
}

public partial record LandroidCloudScheduleParameters
{
    ///<summary>Change primary or secondary schedule? eg: primary</summary>
    [JsonPropertyName("type")]
    public object? Type { get; init; }

    ///<summary>Starting time for mondays eg: 11:00</summary>
    [JsonPropertyName("monday_start")]
    public DateTime? MondayStart { get; init; }

    ///<summary>When should the schedule stop on mondays? eg: 16:00</summary>
    [JsonPropertyName("monday_end")]
    public DateTime? MondayEnd { get; init; }

    ///<summary>Should we start this schedule by cutting the boundary (edge/border cut)? eg: False</summary>
    [JsonPropertyName("monday_boundary")]
    public bool? MondayBoundary { get; init; }

    ///<summary>Starting time for tuesdays eg: 11:00</summary>
    [JsonPropertyName("tuesday_start")]
    public DateTime? TuesdayStart { get; init; }

    ///<summary>When should the schedule stop on tuesdays? eg: 16:00</summary>
    [JsonPropertyName("tuesday_end")]
    public DateTime? TuesdayEnd { get; init; }

    ///<summary>Should we start this schedule by cutting the boundary (edge/border cut)? eg: False</summary>
    [JsonPropertyName("tuesday_boundary")]
    public bool? TuesdayBoundary { get; init; }

    ///<summary>Starting time for wednesdays eg: 11:00</summary>
    [JsonPropertyName("wednesday_start")]
    public DateTime? WednesdayStart { get; init; }

    ///<summary>When should the schedule stop on wednesdays? eg: 16:00</summary>
    [JsonPropertyName("wednesday_end")]
    public DateTime? WednesdayEnd { get; init; }

    ///<summary>Should we start this schedule by cutting the boundary (edge/border cut)? eg: False</summary>
    [JsonPropertyName("wednesday_boundary")]
    public bool? WednesdayBoundary { get; init; }

    ///<summary>Starting time for thursdays eg: 11:00</summary>
    [JsonPropertyName("thursday_start")]
    public DateTime? ThursdayStart { get; init; }

    ///<summary>When should the schedule stop on thursdays? eg: 16:00</summary>
    [JsonPropertyName("thursday_end")]
    public DateTime? ThursdayEnd { get; init; }

    ///<summary>Should we start this schedule by cutting the boundary (edge/border cut)? eg: False</summary>
    [JsonPropertyName("thursday_boundary")]
    public bool? ThursdayBoundary { get; init; }

    ///<summary>Starting time for fridays eg: 11:00</summary>
    [JsonPropertyName("friday_start")]
    public DateTime? FridayStart { get; init; }

    ///<summary>When should the schedule stop on fridays? eg: 16:00</summary>
    [JsonPropertyName("friday_end")]
    public DateTime? FridayEnd { get; init; }

    ///<summary>Should we start this schedule by cutting the boundary (edge/border cut)? eg: False</summary>
    [JsonPropertyName("friday_boundary")]
    public bool? FridayBoundary { get; init; }

    ///<summary>Starting time for saturdays eg: 11:00</summary>
    [JsonPropertyName("saturday_start")]
    public DateTime? SaturdayStart { get; init; }

    ///<summary>When should the schedule stop on saturdays? eg: 16:00</summary>
    [JsonPropertyName("saturday_end")]
    public DateTime? SaturdayEnd { get; init; }

    ///<summary>Should we start this schedule by cutting the boundary (edge/border cut)? eg: False</summary>
    [JsonPropertyName("saturday_boundary")]
    public bool? SaturdayBoundary { get; init; }

    ///<summary>Starting time for sundays eg: 11:00</summary>
    [JsonPropertyName("sunday_start")]
    public DateTime? SundayStart { get; init; }

    ///<summary>When should the schedule stop on sundays? eg: 16:00</summary>
    [JsonPropertyName("sunday_end")]
    public DateTime? SundayEnd { get; init; }

    ///<summary>Should we start this schedule by cutting the boundary (edge/border cut)? eg: False</summary>
    [JsonPropertyName("sunday_boundary")]
    public bool? SundayBoundary { get; init; }
}

public partial record LandroidCloudSendRawParameters
{
    ///<summary>Data to send, formatted as valid JSON eg: {&apos;cmd&apos;: 1}</summary>
    [JsonPropertyName("json")]
    public string? Json { get; init; }
}

public partial class LawnMowerServices
{
    private readonly IHaContext _haContext;
    public LawnMowerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Stops the mowing task and returns to the dock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Dock(ServiceTarget target)
    {
        _haContext.CallService("lawn_mower", "dock", target);
    }

    ///<summary>Pauses the mowing task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target)
    {
        _haContext.CallService("lawn_mower", "pause", target);
    }

    ///<summary>Starts the mowing task.</summary>
    ///<param name="target">The target for this service call</param>
    public void StartMowing(ServiceTarget target)
    {
        _haContext.CallService("lawn_mower", "start_mowing", target);
    }
}

public partial class LightServices
{
    private readonly IHaContext _haContext;
    public LightServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, LightToggleParameters data)
    {
        _haContext.CallService("light", "toggle", target, data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="advancedFields"></param>
    public void Toggle(ServiceTarget target, long? transition = null, object? rgbColor = null, object? kelvin = null, long? brightnessPct = null, string? effect = null, object? advancedFields = null)
    {
        _haContext.CallService("light", "toggle", target, new LightToggleParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, Effect = effect, AdvancedFields = advancedFields });
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, LightTurnOffParameters data)
    {
        _haContext.CallService("light", "turn_off", target, data);
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="advancedFields"></param>
    public void TurnOff(ServiceTarget target, long? transition = null, object? advancedFields = null)
    {
        _haContext.CallService("light", "turn_off", target, new LightTurnOffParameters { Transition = transition, AdvancedFields = advancedFields });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, LightTurnOnParameters data)
    {
        _haContext.CallService("light", "turn_on", target, data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="advancedFields"></param>
    public void TurnOn(ServiceTarget target, long? transition = null, object? rgbColor = null, object? kelvin = null, long? brightnessPct = null, long? brightnessStepPct = null, string? effect = null, object? advancedFields = null)
    {
        _haContext.CallService("light", "turn_on", target, new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, AdvancedFields = advancedFields });
    }
}

public partial record LightToggleParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public object? Kelvin { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public long? BrightnessPct { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }

    [JsonPropertyName("advanced_fields")]
    public object? AdvancedFields { get; init; }
}

public partial record LightTurnOffParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    [JsonPropertyName("advanced_fields")]
    public object? AdvancedFields { get; init; }
}

public partial record LightTurnOnParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public object? Kelvin { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public long? BrightnessPct { get; init; }

    ///<summary>Change brightness by a percentage.</summary>
    [JsonPropertyName("brightness_step_pct")]
    public long? BrightnessStepPct { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }

    [JsonPropertyName("advanced_fields")]
    public object? AdvancedFields { get; init; }
}

public partial class LocaltuyaServices
{
    private readonly IHaContext _haContext;
    public LocaltuyaServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload localtuya and reconnect to all devices.</summary>
    public void Reload()
    {
        _haContext.CallService("localtuya", "reload", null);
    }

    ///<summary>Change the value of a datapoint (DP)</summary>
    public void SetDp(LocaltuyaSetDpParameters data)
    {
        _haContext.CallService("localtuya", "set_dp", null, data);
    }

    ///<summary>Change the value of a datapoint (DP)</summary>
    ///<param name="deviceId">Device ID of device to change datapoint value for eg: 11100118278aab4de001</param>
    ///<param name="dp">Datapoint index eg: 1</param>
    ///<param name="value">New value to set eg: False</param>
    public void SetDp(object? deviceId = null, object? dp = null, object? value = null)
    {
        _haContext.CallService("localtuya", "set_dp", null, new LocaltuyaSetDpParameters { DeviceId = deviceId, Dp = dp, Value = value });
    }
}

public partial record LocaltuyaSetDpParameters
{
    ///<summary>Device ID of device to change datapoint value for eg: 11100118278aab4de001</summary>
    [JsonPropertyName("device_id")]
    public object? DeviceId { get; init; }

    ///<summary>Datapoint index eg: 1</summary>
    [JsonPropertyName("dp")]
    public object? Dp { get; init; }

    ///<summary>New value to set eg: False</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }
}

public partial class LockServices
{
    private readonly IHaContext _haContext;
    public LockServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Lock(ServiceTarget target, LockLockParameters data)
    {
        _haContext.CallService("lock", "lock", target, data);
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code used to lock the lock. eg: 1234</param>
    public void Lock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "lock", target, new LockLockParameters { Code = code });
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Open(ServiceTarget target, LockOpenParameters data)
    {
        _haContext.CallService("lock", "open", target, data);
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code used to open the lock. eg: 1234</param>
    public void Open(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "open", target, new LockOpenParameters { Code = code });
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unlock(ServiceTarget target, LockUnlockParameters data)
    {
        _haContext.CallService("lock", "unlock", target, data);
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code used to unlock the lock. eg: 1234</param>
    public void Unlock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "unlock", target, new LockUnlockParameters { Code = code });
    }
}

public partial record LockLockParameters
{
    ///<summary>Code used to lock the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockOpenParameters
{
    ///<summary>Code used to open the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockUnlockParameters
{
    ///<summary>Code used to unlock the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class LogbookServices
{
    private readonly IHaContext _haContext;
    public LogbookServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    public void Log(LogbookLogParameters data)
    {
        _haContext.CallService("logbook", "log", null, data);
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    ///<param name="name">Custom name for an entity, can be referenced using an `entity_id`. eg: Kitchen</param>
    ///<param name="message">Message of the logbook entry. eg: is being used</param>
    ///<param name="entityId">Entity to reference in the logbook entry.</param>
    ///<param name="domain">Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</param>
    public void Log(string name, string message, string? entityId = null, string? domain = null)
    {
        _haContext.CallService("logbook", "log", null, new LogbookLogParameters { Name = name, Message = message, EntityId = entityId, Domain = domain });
    }
}

public partial record LogbookLogParameters
{
    ///<summary>Custom name for an entity, can be referenced using an `entity_id`. eg: Kitchen</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Message of the logbook entry. eg: is being used</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Entity to reference in the logbook entry.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</summary>
    [JsonPropertyName("domain")]
    public string? Domain { get; init; }
}

public partial class LoggerServices
{
    private readonly IHaContext _haContext;
    public LoggerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the default log level for integrations.</summary>
    public void SetDefaultLevel(LoggerSetDefaultLevelParameters data)
    {
        _haContext.CallService("logger", "set_default_level", null, data);
    }

    ///<summary>Sets the default log level for integrations.</summary>
    ///<param name="level">Default severity level for all integrations.</param>
    public void SetDefaultLevel(object? level = null)
    {
        _haContext.CallService("logger", "set_default_level", null, new LoggerSetDefaultLevelParameters { Level = level });
    }

    ///<summary>Sets the log level for one or more integrations.</summary>
    public void SetLevel()
    {
        _haContext.CallService("logger", "set_level", null);
    }
}

public partial record LoggerSetDefaultLevelParameters
{
    ///<summary>Default severity level for all integrations.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }
}

public partial class MediaPlayerServices
{
    private readonly IHaContext _haContext;
    public MediaPlayerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears the playlist.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearPlaylist(ServiceTarget target)
    {
        _haContext.CallService("media_player", "clear_playlist", target);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The target for this service call</param>
    public void Join(ServiceTarget target, MediaPlayerJoinParameters data)
    {
        _haContext.CallService("media_player", "join", target, data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public void Join(ServiceTarget target, string groupMembers)
    {
        _haContext.CallService("media_player", "join", target, new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaNextTrack(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_next_track", target);
    }

    ///<summary>Pauses.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPause(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_pause", target);
    }

    ///<summary>Starts playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlay(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_play", target);
    }

    ///<summary>Toggles play/pause.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlayPause(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_play_pause", target);
    }

    ///<summary>Selects the previous track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPreviousTrack(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_previous_track", target);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaSeek(ServiceTarget target, MediaPlayerMediaSeekParameters data)
    {
        _haContext.CallService("media_player", "media_seek", target, data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public void MediaSeek(ServiceTarget target, double seekPosition)
    {
        _haContext.CallService("media_player", "media_seek", target, new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaStop(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_stop", target);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayMedia(ServiceTarget target, MediaPlayerPlayMediaParameters data)
    {
        _haContext.CallService("media_player", "play_media", target, data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public void PlayMedia(ServiceTarget target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        _haContext.CallService("media_player", "play_media", target, new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The target for this service call</param>
    public void RepeatSet(ServiceTarget target, MediaPlayerRepeatSetParameters data)
    {
        _haContext.CallService("media_player", "repeat_set", target, data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public void RepeatSet(ServiceTarget target, object repeat)
    {
        _haContext.CallService("media_player", "repeat_set", target, new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSoundMode(ServiceTarget target, MediaPlayerSelectSoundModeParameters data)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public void SelectSoundMode(ServiceTarget target, string? soundMode = null)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSource(ServiceTarget target, MediaPlayerSelectSourceParameters data)
    {
        _haContext.CallService("media_player", "select_source", target, data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public void SelectSource(ServiceTarget target, string source)
    {
        _haContext.CallService("media_player", "select_source", target, new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The target for this service call</param>
    public void ShuffleSet(ServiceTarget target, MediaPlayerShuffleSetParameters data)
    {
        _haContext.CallService("media_player", "shuffle_set", target, data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public void ShuffleSet(ServiceTarget target, bool shuffle)
    {
        _haContext.CallService("media_player", "shuffle_set", target, new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("media_player", "toggle", target);
    }

    ///<summary>Turns off the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("media_player", "turn_off", target);
    }

    ///<summary>Turns on the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("media_player", "turn_on", target);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unjoin(ServiceTarget target)
    {
        _haContext.CallService("media_player", "unjoin", target);
    }

    ///<summary>Turns down the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeDown(ServiceTarget target)
    {
        _haContext.CallService("media_player", "volume_down", target);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeMute(ServiceTarget target, MediaPlayerVolumeMuteParameters data)
    {
        _haContext.CallService("media_player", "volume_mute", target, data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public void VolumeMute(ServiceTarget target, bool isVolumeMuted)
    {
        _haContext.CallService("media_player", "volume_mute", target, new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeSet(ServiceTarget target, MediaPlayerVolumeSetParameters data)
    {
        _haContext.CallService("media_player", "volume_set", target, data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public void VolumeSet(ServiceTarget target, double volumeLevel)
    {
        _haContext.CallService("media_player", "volume_set", target, new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeUp(ServiceTarget target)
    {
        _haContext.CallService("media_player", "volume_up", target);
    }
}

public partial record MediaPlayerJoinParameters
{
    ///<summary>The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </summary>
    [JsonPropertyName("group_members")]
    public string? GroupMembers { get; init; }
}

public partial record MediaPlayerMediaSeekParameters
{
    ///<summary>Target position in the currently playing media. The format is platform dependent.</summary>
    [JsonPropertyName("seek_position")]
    public double? SeekPosition { get; init; }
}

public partial record MediaPlayerPlayMediaParameters
{
    ///<summary>The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</summary>
    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    ///<summary>The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</summary>
    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    ///<summary>If the content should be played now or be added to the queue.</summary>
    [JsonPropertyName("enqueue")]
    public object? Enqueue { get; init; }

    ///<summary>If the media should be played as an announcement. eg: true</summary>
    [JsonPropertyName("announce")]
    public bool? Announce { get; init; }
}

public partial record MediaPlayerRepeatSetParameters
{
    ///<summary>Repeat mode to set.</summary>
    [JsonPropertyName("repeat")]
    public object? Repeat { get; init; }
}

public partial record MediaPlayerSelectSoundModeParameters
{
    ///<summary>Name of the sound mode to switch to. eg: Music</summary>
    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }
}

public partial record MediaPlayerSelectSourceParameters
{
    ///<summary>Name of the source to switch to. Platform dependent. eg: video1</summary>
    [JsonPropertyName("source")]
    public string? Source { get; init; }
}

public partial record MediaPlayerShuffleSetParameters
{
    ///<summary>Whether or not shuffle mode is enabled.</summary>
    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }
}

public partial record MediaPlayerVolumeMuteParameters
{
    ///<summary>Defines whether or not it is muted.</summary>
    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }
}

public partial record MediaPlayerVolumeSetParameters
{
    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume.</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }
}

public partial class MqttServices
{
    private readonly IHaContext _haContext;
    public MqttServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    public void Dump(MqttDumpParameters data)
    {
        _haContext.CallService("mqtt", "dump", null, data);
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    ///<param name="topic">Topic to listen to. eg: OpenZWave/#</param>
    ///<param name="duration">How long we should listen for messages in seconds.</param>
    public void Dump(string? topic = null, long? duration = null)
    {
        _haContext.CallService("mqtt", "dump", null, new MqttDumpParameters { Topic = topic, Duration = duration });
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    public void Publish(MqttPublishParameters data)
    {
        _haContext.CallService("mqtt", "publish", null, data);
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    ///<param name="topic">Topic to publish to. eg: /homeassistant/hello</param>
    ///<param name="payload">The payload to publish. eg: This is great</param>
    ///<param name="payloadTemplate">Template to render as a payload value. If a payload is provided, the template is ignored. eg: {{ states(&apos;sensor.temperature&apos;) }}</param>
    ///<param name="qos">Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.</param>
    ///<param name="retain">If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</param>
    public void Publish(string topic, string? payload = null, object? payloadTemplate = null, object? qos = null, bool? retain = null)
    {
        _haContext.CallService("mqtt", "publish", null, new MqttPublishParameters { Topic = topic, Payload = payload, PayloadTemplate = payloadTemplate, Qos = qos, Retain = retain });
    }

    ///<summary>Reloads MQTT entities from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("mqtt", "reload", null);
    }
}

public partial record MqttDumpParameters
{
    ///<summary>Topic to listen to. eg: OpenZWave/#</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>How long we should listen for messages in seconds.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }
}

public partial record MqttPublishParameters
{
    ///<summary>Topic to publish to. eg: /homeassistant/hello</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>The payload to publish. eg: This is great</summary>
    [JsonPropertyName("payload")]
    public string? Payload { get; init; }

    ///<summary>Template to render as a payload value. If a payload is provided, the template is ignored. eg: {{ states(&apos;sensor.temperature&apos;) }}</summary>
    [JsonPropertyName("payload_template")]
    public object? PayloadTemplate { get; init; }

    ///<summary>Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.</summary>
    [JsonPropertyName("qos")]
    public object? Qos { get; init; }

    ///<summary>If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</summary>
    [JsonPropertyName("retain")]
    public bool? Retain { get; init; }
}

public partial class NetdaemonServices
{
    private readonly IHaContext _haContext;
    public NetdaemonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Create an entity</summary>
    public void EntityCreate(NetdaemonEntityCreateParameters data)
    {
        _haContext.CallService("netdaemon", "entity_create", null, data);
    }

    ///<summary>Create an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    ///<param name="state">The state of the entity eg: Lorem ipsum</param>
    ///<param name="icon">The icon for the entity eg: mdi:rocket-launch-outline</param>
    ///<param name="unit">The unit of measurement for the entity</param>
    ///<param name="options">List of options for a select entity</param>
    ///<param name="attributes">The attributes of the entity</param>
    public void EntityCreate(object? entityId = null, object? state = null, object? icon = null, object? unit = null, object? options = null, object? attributes = null)
    {
        _haContext.CallService("netdaemon", "entity_create", null, new NetdaemonEntityCreateParameters { EntityId = entityId, State = state, Icon = icon, Unit = unit, Options = options, Attributes = attributes });
    }

    ///<summary>Remove an entity</summary>
    public void EntityRemove(NetdaemonEntityRemoveParameters data)
    {
        _haContext.CallService("netdaemon", "entity_remove", null, data);
    }

    ///<summary>Remove an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    public void EntityRemove(object? entityId = null)
    {
        _haContext.CallService("netdaemon", "entity_remove", null, new NetdaemonEntityRemoveParameters { EntityId = entityId });
    }

    ///<summary>Update an entity</summary>
    public void EntityUpdate(NetdaemonEntityUpdateParameters data)
    {
        _haContext.CallService("netdaemon", "entity_update", null, data);
    }

    ///<summary>Update an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    ///<param name="state">The state of the entity eg: Lorem ipsum</param>
    ///<param name="icon">The icon for the entity eg: mdi:rocket-launch-outline</param>
    ///<param name="unit">The unit of measurement for the entity</param>
    ///<param name="options">List of options for a select entity</param>
    ///<param name="attributes">The attributes of the entity</param>
    public void EntityUpdate(object? entityId = null, object? state = null, object? icon = null, object? unit = null, object? options = null, object? attributes = null)
    {
        _haContext.CallService("netdaemon", "entity_update", null, new NetdaemonEntityUpdateParameters { EntityId = entityId, State = state, Icon = icon, Unit = unit, Options = options, Attributes = attributes });
    }

    public void OlivetreebranchGetstatus()
    {
        _haContext.CallService("netdaemon", "olivetreebranch_getstatus", null);
    }

    public void OlivetreebranchSetbrightness()
    {
        _haContext.CallService("netdaemon", "olivetreebranch_setbrightness", null);
    }

    public void OlivetreebranchSetcolortemperature()
    {
        _haContext.CallService("netdaemon", "olivetreebranch_setcolortemperature", null);
    }

    public void OlivetreebranchTurnoff()
    {
        _haContext.CallService("netdaemon", "olivetreebranch_turnoff", null);
    }

    public void OlivetreebranchTurnon()
    {
        _haContext.CallService("netdaemon", "olivetreebranch_turnon", null);
    }

    ///<summary>Register a new service for netdaemon, used by the daemon and not to be used by users</summary>
    public void RegisterService(NetdaemonRegisterServiceParameters data)
    {
        _haContext.CallService("netdaemon", "register_service", null, data);
    }

    ///<summary>Register a new service for netdaemon, used by the daemon and not to be used by users</summary>
    ///<param name="service">The name of the service to register</param>
    ///<param name="class">The class that implements the service call</param>
    ///<param name="method">The method to call</param>
    public void RegisterService(object? service = null, object? @class = null, object? @method = null)
    {
        _haContext.CallService("netdaemon", "register_service", null, new NetdaemonRegisterServiceParameters { Service = service, Class = @class, Method = @method });
    }

    public void ReloadApps()
    {
        _haContext.CallService("netdaemon", "reload_apps", null);
    }
}

public partial record NetdaemonEntityCreateParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    ///<summary>The state of the entity eg: Lorem ipsum</summary>
    [JsonPropertyName("state")]
    public object? State { get; init; }

    ///<summary>The icon for the entity eg: mdi:rocket-launch-outline</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>The unit of measurement for the entity</summary>
    [JsonPropertyName("unit")]
    public object? Unit { get; init; }

    ///<summary>List of options for a select entity</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }

    ///<summary>The attributes of the entity</summary>
    [JsonPropertyName("attributes")]
    public object? Attributes { get; init; }
}

public partial record NetdaemonEntityRemoveParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }
}

public partial record NetdaemonEntityUpdateParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    ///<summary>The state of the entity eg: Lorem ipsum</summary>
    [JsonPropertyName("state")]
    public object? State { get; init; }

    ///<summary>The icon for the entity eg: mdi:rocket-launch-outline</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>The unit of measurement for the entity</summary>
    [JsonPropertyName("unit")]
    public object? Unit { get; init; }

    ///<summary>List of options for a select entity</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }

    ///<summary>The attributes of the entity</summary>
    [JsonPropertyName("attributes")]
    public object? Attributes { get; init; }
}

public partial record NetdaemonRegisterServiceParameters
{
    ///<summary>The name of the service to register</summary>
    [JsonPropertyName("service")]
    public object? Service { get; init; }

    ///<summary>The class that implements the service call</summary>
    [JsonPropertyName("class")]
    public object? Class { get; init; }

    ///<summary>The method to call</summary>
    [JsonPropertyName("method")]
    public object? Method { get; init; }
}

public partial class NotifyServices
{
    private readonly IHaContext _haContext;
    public NotifyServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a notification message using the gros_telefon service.</summary>
    public void GrosTelefon(NotifyGrosTelefonParameters data)
    {
        _haContext.CallService("notify", "gros_telefon", null, data);
    }

    ///<summary>Sends a notification message using the gros_telefon service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void GrosTelefon(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "gros_telefon", null, new NotifyGrosTelefonParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the kristoffers_telefon service.</summary>
    public void KristoffersTelefon(NotifyKristoffersTelefonParameters data)
    {
        _haContext.CallService("notify", "kristoffers_telefon", null, data);
    }

    ///<summary>Sends a notification message using the kristoffers_telefon service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void KristoffersTelefon(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "kristoffers_telefon", null, new NotifyKristoffersTelefonParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_bornenes_telefon integration.</summary>
    public void MobileAppBornenesTelefon(NotifyMobileAppBornenesTelefonParameters data)
    {
        _haContext.CallService("notify", "mobile_app_bornenes_telefon", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_bornenes_telefon integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppBornenesTelefon(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_bornenes_telefon", null, new NotifyMobileAppBornenesTelefonParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_galaxy_watch4_wlsw integration.</summary>
    public void MobileAppGalaxyWatch4Wlsw(NotifyMobileAppGalaxyWatch4WlswParameters data)
    {
        _haContext.CallService("notify", "mobile_app_galaxy_watch4_wlsw", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_galaxy_watch4_wlsw integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppGalaxyWatch4Wlsw(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_galaxy_watch4_wlsw", null, new NotifyMobileAppGalaxyWatch4WlswParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_gros_backup_telefon integration.</summary>
    public void MobileAppGrosBackupTelefon(NotifyMobileAppGrosBackupTelefonParameters data)
    {
        _haContext.CallService("notify", "mobile_app_gros_backup_telefon", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_gros_backup_telefon integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppGrosBackupTelefon(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_gros_backup_telefon", null, new NotifyMobileAppGrosBackupTelefonParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_gros_galaxy_s20 integration.</summary>
    public void MobileAppGrosGalaxyS20(NotifyMobileAppGrosGalaxyS20Parameters data)
    {
        _haContext.CallService("notify", "mobile_app_gros_galaxy_s20", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_gros_galaxy_s20 integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppGrosGalaxyS20(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_gros_galaxy_s20", null, new NotifyMobileAppGrosGalaxyS20Parameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_kristoffer_iphone integration.</summary>
    public void MobileAppKristofferIphone(NotifyMobileAppKristofferIphoneParameters data)
    {
        _haContext.CallService("notify", "mobile_app_kristoffer_iphone", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_kristoffer_iphone integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppKristofferIphone(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_kristoffer_iphone", null, new NotifyMobileAppKristofferIphoneParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_kristoffers_galaxy_s20_ultra integration.</summary>
    public void MobileAppKristoffersGalaxyS20Ultra(NotifyMobileAppKristoffersGalaxyS20UltraParameters data)
    {
        _haContext.CallService("notify", "mobile_app_kristoffers_galaxy_s20_ultra", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_kristoffers_galaxy_s20_ultra integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppKristoffersGalaxyS20Ultra(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_kristoffers_galaxy_s20_ultra", null, new NotifyMobileAppKristoffersGalaxyS20UltraParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_oneplus_a3003 integration.</summary>
    public void MobileAppOneplusA3003(NotifyMobileAppOneplusA3003Parameters data)
    {
        _haContext.CallService("notify", "mobile_app_oneplus_a3003", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_oneplus_a3003 integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppOneplusA3003(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_oneplus_a3003", null, new NotifyMobileAppOneplusA3003Parameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_samsung_galaxy_s8 integration.</summary>
    public void MobileAppSamsungGalaxyS8(NotifyMobileAppSamsungGalaxyS8Parameters data)
    {
        _haContext.CallService("notify", "mobile_app_samsung_galaxy_s8", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_samsung_galaxy_s8 integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppSamsungGalaxyS8(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_samsung_galaxy_s8", null, new NotifyMobileAppSamsungGalaxyS8Parameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    public void Notify(NotifyNotifyParameters data)
    {
        _haContext.CallService("notify", "notify", null, data);
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Notify(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "notify", null, new NotifyNotifyParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification that is visible in the **Notifications** panel.</summary>
    public void PersistentNotification(NotifyPersistentNotificationParameters data)
    {
        _haContext.CallService("notify", "persistent_notification", null, data);
    }

    ///<summary>Sends a notification that is visible in the **Notifications** panel.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title of the notification. eg: Your Garage Door Friend</param>
    ///<param name="data">Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.. eg: platform specific</param>
    public void PersistentNotification(string message, string? title = null, object? data = null)
    {
        _haContext.CallService("notify", "persistent_notification", null, new NotifyPersistentNotificationParameters { Message = message, Title = title, Data = data });
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendMessage(ServiceTarget target, NotifySendMessageParameters data)
    {
        _haContext.CallService("notify", "send_message", target, data);
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="message">Your notification message.</param>
    ///<param name="title">Title for your notification message.</param>
    public void SendMessage(ServiceTarget target, string message, string? title = null)
    {
        _haContext.CallService("notify", "send_message", target, new NotifySendMessageParameters { Message = message, Title = title });
    }
}

public partial record NotifyGrosTelefonParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyKristoffersTelefonParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppBornenesTelefonParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppGalaxyWatch4WlswParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppGrosBackupTelefonParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppGrosGalaxyS20Parameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppKristofferIphoneParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppKristoffersGalaxyS20UltraParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppOneplusA3003Parameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppSamsungGalaxyS8Parameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyNotifyParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyPersistentNotificationParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title of the notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifySendMessageParameters
{
    ///<summary>Your notification message.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification message.</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }
}

public partial class NumberServices
{
    private readonly IHaContext _haContext;
    public NumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, NumberSetValueParameters data)
    {
        _haContext.CallService("number", "set_value", target, data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public void SetValue(ServiceTarget target, string? value = null)
    {
        _haContext.CallService("number", "set_value", target, new NumberSetValueParameters { Value = value });
    }
}

public partial record NumberSetValueParameters
{
    ///<summary>The target value to set. eg: 42</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class OpenaiConversationServices
{
    private readonly IHaContext _haContext;
    public OpenaiConversationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turn a prompt into an image</summary>
    public void GenerateImage(OpenaiConversationGenerateImageParameters data)
    {
        _haContext.CallService("openai_conversation", "generate_image", null, data);
    }

    ///<summary>Turn a prompt into an image</summary>
    ///<param name="configEntry">The config entry to use for this service</param>
    ///<param name="prompt">The text to turn into an image eg: A photo of a dog</param>
    ///<param name="size">The size of the image to generate eg: 1024x1024</param>
    ///<param name="quality">The quality of the image that will be generated eg: standard</param>
    ///<param name="style">The style of the generated image eg: vivid</param>
    public void GenerateImage(object configEntry, string prompt, object? size = null, object? quality = null, object? style = null)
    {
        _haContext.CallService("openai_conversation", "generate_image", null, new OpenaiConversationGenerateImageParameters { ConfigEntry = configEntry, Prompt = prompt, Size = size, Quality = quality, Style = style });
    }
}

public partial record OpenaiConversationGenerateImageParameters
{
    ///<summary>The config entry to use for this service</summary>
    [JsonPropertyName("config_entry")]
    public object? ConfigEntry { get; init; }

    ///<summary>The text to turn into an image eg: A photo of a dog</summary>
    [JsonPropertyName("prompt")]
    public string? Prompt { get; init; }

    ///<summary>The size of the image to generate eg: 1024x1024</summary>
    [JsonPropertyName("size")]
    public object? Size { get; init; }

    ///<summary>The quality of the image that will be generated eg: standard</summary>
    [JsonPropertyName("quality")]
    public object? Quality { get; init; }

    ///<summary>The style of the generated image eg: vivid</summary>
    [JsonPropertyName("style")]
    public object? Style { get; init; }
}

public partial class PersistentNotificationServices
{
    private readonly IHaContext _haContext;
    public PersistentNotificationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shows a notification on the **Notifications** panel.</summary>
    public void Create(PersistentNotificationCreateParameters data)
    {
        _haContext.CallService("persistent_notification", "create", null, data);
    }

    ///<summary>Shows a notification on the **Notifications** panel.</summary>
    ///<param name="message">Message body of the notification. eg: Please check your configuration.yaml.</param>
    ///<param name="title">Optional title of the notification. eg: Test notification</param>
    ///<param name="notificationId">ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</param>
    public void Create(string message, string? title = null, string? notificationId = null)
    {
        _haContext.CallService("persistent_notification", "create", null, new PersistentNotificationCreateParameters { Message = message, Title = title, NotificationId = notificationId });
    }

    ///<summary>Removes a notification from the **Notifications** panel.</summary>
    public void Dismiss(PersistentNotificationDismissParameters data)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, data);
    }

    ///<summary>Removes a notification from the **Notifications** panel.</summary>
    ///<param name="notificationId">ID of the notification to be removed. eg: 1234</param>
    public void Dismiss(string notificationId)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, new PersistentNotificationDismissParameters { NotificationId = notificationId });
    }

    ///<summary>Removes all notifications from the **Notifications** panel.</summary>
    public void DismissAll()
    {
        _haContext.CallService("persistent_notification", "dismiss_all", null);
    }
}

public partial record PersistentNotificationCreateParameters
{
    ///<summary>Message body of the notification. eg: Please check your configuration.yaml.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Optional title of the notification. eg: Test notification</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial record PersistentNotificationDismissParameters
{
    ///<summary>ID of the notification to be removed. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial class PersonServices
{
    private readonly IHaContext _haContext;
    public PersonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads persons from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("person", "reload", null);
    }
}

public partial class PlexServices
{
    private readonly IHaContext _haContext;
    public PlexServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Refreshes a Plex library to scan for new and updated media.</summary>
    public void RefreshLibrary(PlexRefreshLibraryParameters data)
    {
        _haContext.CallService("plex", "refresh_library", null, data);
    }

    ///<summary>Refreshes a Plex library to scan for new and updated media.</summary>
    ///<param name="serverName">Name of a Plex server if multiple Plex servers configured. eg: My Plex Server</param>
    ///<param name="libraryName">Name of the Plex library to refresh. eg: TV Shows</param>
    public void RefreshLibrary(string libraryName, string? serverName = null)
    {
        _haContext.CallService("plex", "refresh_library", null, new PlexRefreshLibraryParameters { ServerName = serverName, LibraryName = libraryName });
    }

    ///<summary>Scans for available clients from the Plex server(s), local network, and plex.tv.</summary>
    public void ScanForClients()
    {
        _haContext.CallService("plex", "scan_for_clients", null);
    }
}

public partial record PlexRefreshLibraryParameters
{
    ///<summary>Name of a Plex server if multiple Plex servers configured. eg: My Plex Server</summary>
    [JsonPropertyName("server_name")]
    public string? ServerName { get; init; }

    ///<summary>Name of the Plex library to refresh. eg: TV Shows</summary>
    [JsonPropertyName("library_name")]
    public string? LibraryName { get; init; }
}

public partial class ProfilerServices
{
    private readonly IHaContext _haContext;
    public ProfilerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Dumps the repr of all matching objects to the log.</summary>
    public void DumpLogObjects(ProfilerDumpLogObjectsParameters data)
    {
        _haContext.CallService("profiler", "dump_log_objects", null, data);
    }

    ///<summary>Dumps the repr of all matching objects to the log.</summary>
    ///<param name="type">The type of objects to dump to the log. eg: State</param>
    public void DumpLogObjects(string @type)
    {
        _haContext.CallService("profiler", "dump_log_objects", null, new ProfilerDumpLogObjectsParameters { Type = @type });
    }

    ///<summary>Logs all the current asyncio tasks.</summary>
    public void LogCurrentTasks()
    {
        _haContext.CallService("profiler", "log_current_tasks", null);
    }

    ///<summary>Logs what is scheduled in the event loop.</summary>
    public void LogEventLoopScheduled()
    {
        _haContext.CallService("profiler", "log_event_loop_scheduled", null);
    }

    ///<summary>Logs the current frames for all threads.</summary>
    public void LogThreadFrames()
    {
        _haContext.CallService("profiler", "log_thread_frames", null);
    }

    ///<summary>Logs the stats of all lru caches.</summary>
    public void LruStats()
    {
        _haContext.CallService("profiler", "lru_stats", null);
    }

    ///<summary>Starts the Memory Profiler.</summary>
    public void Memory(ProfilerMemoryParameters data)
    {
        _haContext.CallService("profiler", "memory", null, data);
    }

    ///<summary>Starts the Memory Profiler.</summary>
    ///<param name="seconds">The number of seconds to run the memory profiler.</param>
    public void Memory(long? seconds = null)
    {
        _haContext.CallService("profiler", "memory", null, new ProfilerMemoryParameters { Seconds = seconds });
    }

    ///<summary>Enable or disable asyncio debug.</summary>
    public void SetAsyncioDebug(ProfilerSetAsyncioDebugParameters data)
    {
        _haContext.CallService("profiler", "set_asyncio_debug", null, data);
    }

    ///<summary>Enable or disable asyncio debug.</summary>
    ///<param name="enabled">Whether to enable or disable asyncio debug.</param>
    public void SetAsyncioDebug(bool? enabled = null)
    {
        _haContext.CallService("profiler", "set_asyncio_debug", null, new ProfilerSetAsyncioDebugParameters { Enabled = enabled });
    }

    ///<summary>Starts the Profiler.</summary>
    public void Start(ProfilerStartParameters data)
    {
        _haContext.CallService("profiler", "start", null, data);
    }

    ///<summary>Starts the Profiler.</summary>
    ///<param name="seconds">The number of seconds to run the profiler.</param>
    public void Start(long? seconds = null)
    {
        _haContext.CallService("profiler", "start", null, new ProfilerStartParameters { Seconds = seconds });
    }

    ///<summary>Starts logging sources of new objects in memory.</summary>
    public void StartLogObjectSources(ProfilerStartLogObjectSourcesParameters data)
    {
        _haContext.CallService("profiler", "start_log_object_sources", null, data);
    }

    ///<summary>Starts logging sources of new objects in memory.</summary>
    ///<param name="scanInterval">The number of seconds between logging objects.</param>
    ///<param name="maxObjects">The maximum number of objects to log.</param>
    public void StartLogObjectSources(long? scanInterval = null, long? maxObjects = null)
    {
        _haContext.CallService("profiler", "start_log_object_sources", null, new ProfilerStartLogObjectSourcesParameters { ScanInterval = scanInterval, MaxObjects = maxObjects });
    }

    ///<summary>Starts logging growth of objects in memory.</summary>
    public void StartLogObjects(ProfilerStartLogObjectsParameters data)
    {
        _haContext.CallService("profiler", "start_log_objects", null, data);
    }

    ///<summary>Starts logging growth of objects in memory.</summary>
    ///<param name="scanInterval">The number of seconds between logging objects.</param>
    public void StartLogObjects(long? scanInterval = null)
    {
        _haContext.CallService("profiler", "start_log_objects", null, new ProfilerStartLogObjectsParameters { ScanInterval = scanInterval });
    }

    ///<summary>Stops logging sources of new objects in memory.</summary>
    public void StopLogObjectSources()
    {
        _haContext.CallService("profiler", "stop_log_object_sources", null);
    }

    ///<summary>Stops logging growth of objects in memory.</summary>
    public void StopLogObjects()
    {
        _haContext.CallService("profiler", "stop_log_objects", null);
    }
}

public partial record ProfilerDumpLogObjectsParameters
{
    ///<summary>The type of objects to dump to the log. eg: State</summary>
    [JsonPropertyName("type")]
    public string? Type { get; init; }
}

public partial record ProfilerMemoryParameters
{
    ///<summary>The number of seconds to run the memory profiler.</summary>
    [JsonPropertyName("seconds")]
    public long? Seconds { get; init; }
}

public partial record ProfilerSetAsyncioDebugParameters
{
    ///<summary>Whether to enable or disable asyncio debug.</summary>
    [JsonPropertyName("enabled")]
    public bool? Enabled { get; init; }
}

public partial record ProfilerStartParameters
{
    ///<summary>The number of seconds to run the profiler.</summary>
    [JsonPropertyName("seconds")]
    public long? Seconds { get; init; }
}

public partial record ProfilerStartLogObjectSourcesParameters
{
    ///<summary>The number of seconds between logging objects.</summary>
    [JsonPropertyName("scan_interval")]
    public long? ScanInterval { get; init; }

    ///<summary>The maximum number of objects to log.</summary>
    [JsonPropertyName("max_objects")]
    public long? MaxObjects { get; init; }
}

public partial record ProfilerStartLogObjectsParameters
{
    ///<summary>The number of seconds between logging objects.</summary>
    [JsonPropertyName("scan_interval")]
    public long? ScanInterval { get; init; }
}

public partial class RecorderServices
{
    private readonly IHaContext _haContext;
    public RecorderServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Stops the recording of events and state changes.</summary>
    public void Disable()
    {
        _haContext.CallService("recorder", "disable", null);
    }

    ///<summary>Starts the recording of events and state changes.</summary>
    public void Enable()
    {
        _haContext.CallService("recorder", "enable", null);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    public void Purge(RecorderPurgeParameters data)
    {
        _haContext.CallService("recorder", "purge", null, data);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    ///<param name="keepDays">Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</param>
    ///<param name="repack">Attempt to save disk space by rewriting the entire database file.</param>
    ///<param name="applyFilter">Apply `entity_id` and `event_type` filters in addition to time-based purge.</param>
    public void Purge(long? keepDays = null, bool? repack = null, bool? applyFilter = null)
    {
        _haContext.CallService("recorder", "purge", null, new RecorderPurgeParameters { KeepDays = keepDays, Repack = repack, ApplyFilter = applyFilter });
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    public void PurgeEntities(RecorderPurgeEntitiesParameters data)
    {
        _haContext.CallService("recorder", "purge_entities", null, data);
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    ///<param name="entityId">List of entities for which the data is to be removed from the recorder database.</param>
    ///<param name="domains">List of domains for which the data needs to be removed from the recorder database. eg: sun</param>
    ///<param name="entityGlobs">List of glob patterns used to select the entities for which the data is to be removed from the recorder database. eg: domain*.object_id*</param>
    ///<param name="keepDays">Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</param>
    public void PurgeEntities(string? entityId = null, object? domains = null, object? entityGlobs = null, long? keepDays = null)
    {
        _haContext.CallService("recorder", "purge_entities", null, new RecorderPurgeEntitiesParameters { EntityId = entityId, Domains = domains, EntityGlobs = entityGlobs, KeepDays = keepDays });
    }
}

public partial record RecorderPurgeParameters
{
    ///<summary>Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</summary>
    [JsonPropertyName("keep_days")]
    public long? KeepDays { get; init; }

    ///<summary>Attempt to save disk space by rewriting the entire database file.</summary>
    [JsonPropertyName("repack")]
    public bool? Repack { get; init; }

    ///<summary>Apply `entity_id` and `event_type` filters in addition to time-based purge.</summary>
    [JsonPropertyName("apply_filter")]
    public bool? ApplyFilter { get; init; }
}

public partial record RecorderPurgeEntitiesParameters
{
    ///<summary>List of entities for which the data is to be removed from the recorder database.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>List of domains for which the data needs to be removed from the recorder database. eg: sun</summary>
    [JsonPropertyName("domains")]
    public object? Domains { get; init; }

    ///<summary>List of glob patterns used to select the entities for which the data is to be removed from the recorder database. eg: domain*.object_id*</summary>
    [JsonPropertyName("entity_globs")]
    public object? EntityGlobs { get; init; }

    ///<summary>Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</summary>
    [JsonPropertyName("keep_days")]
    public long? KeepDays { get; init; }
}

public partial class RemoteServices
{
    private readonly IHaContext _haContext;
    public RemoteServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The target for this service call</param>
    public void DeleteCommand(ServiceTarget target, RemoteDeleteCommandParameters data)
    {
        _haContext.CallService("remote", "delete_command", target, data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public void DeleteCommand(ServiceTarget target, object command, string? device = null)
    {
        _haContext.CallService("remote", "delete_command", target, new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void LearnCommand(ServiceTarget target, RemoteLearnCommandParameters data)
    {
        _haContext.CallService("remote", "learn_command", target, data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public void LearnCommand(ServiceTarget target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        _haContext.CallService("remote", "learn_command", target, new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, RemoteSendCommandParameters data)
    {
        _haContext.CallService("remote", "send_command", target, data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public void SendCommand(ServiceTarget target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        _haContext.CallService("remote", "send_command", target, new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Toggles a device on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("remote", "toggle", target);
    }

    ///<summary>Turns the device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("remote", "turn_off", target);
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, RemoteTurnOnParameters data)
    {
        _haContext.CallService("remote", "turn_on", target, data);
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public void TurnOn(ServiceTarget target, string? activity = null)
    {
        _haContext.CallService("remote", "turn_on", target, new RemoteTurnOnParameters { Activity = activity });
    }
}

public partial record RemoteDeleteCommandParameters
{
    ///<summary>Device from which commands will be deleted. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>The single command or the list of commands to be deleted. eg: Mute</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }
}

public partial record RemoteLearnCommandParameters
{
    ///<summary>Device ID to learn command from. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to learn. eg: Turn on</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The type of command to be learned.</summary>
    [JsonPropertyName("command_type")]
    public object? CommandType { get; init; }

    ///<summary>If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</summary>
    [JsonPropertyName("alternative")]
    public bool? Alternative { get; init; }

    ///<summary>Timeout for the command to be learned.</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }
}

public partial record RemoteSendCommandParameters
{
    ///<summary>Device ID to send command to. eg: 32756745</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to send. eg: Play</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The number of times you want to repeat the commands.</summary>
    [JsonPropertyName("num_repeats")]
    public long? NumRepeats { get; init; }

    ///<summary>The time you want to wait in between repeated commands.</summary>
    [JsonPropertyName("delay_secs")]
    public double? DelaySecs { get; init; }

    ///<summary>The time you want to have it held before the release is send.</summary>
    [JsonPropertyName("hold_secs")]
    public double? HoldSecs { get; init; }
}

public partial record RemoteTurnOnParameters
{
    ///<summary>Activity ID or activity name to be started. eg: BedroomTV</summary>
    [JsonPropertyName("activity")]
    public string? Activity { get; init; }
}

public partial class RenaultServices
{
    private readonly IHaContext _haContext;
    public RenaultServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Canceles A/C on vehicle.</summary>
    public void AcCancel(RenaultAcCancelParameters data)
    {
        _haContext.CallService("renault", "ac_cancel", null, data);
    }

    ///<summary>Canceles A/C on vehicle.</summary>
    ///<param name="vehicle">The vehicle to send the command to.</param>
    public void AcCancel(string vehicle)
    {
        _haContext.CallService("renault", "ac_cancel", null, new RenaultAcCancelParameters { Vehicle = vehicle });
    }

    ///<summary>Starts A/C on vehicle.</summary>
    public void AcStart(RenaultAcStartParameters data)
    {
        _haContext.CallService("renault", "ac_start", null, data);
    }

    ///<summary>Starts A/C on vehicle.</summary>
    ///<param name="vehicle">The vehicle to send the command to.</param>
    ///<param name="temperature">Target A/C temperature in °C. eg: 21</param>
    ///<param name="when">Timestamp for the start of the A/C (optional - defaults to now). eg: 2020-05-01T17:45:00</param>
    public void AcStart(string vehicle, double temperature, string? @when = null)
    {
        _haContext.CallService("renault", "ac_start", null, new RenaultAcStartParameters { Vehicle = vehicle, Temperature = temperature, When = @when });
    }

    ///<summary>Updates charge schedule on vehicle.</summary>
    public void ChargeSetSchedules(RenaultChargeSetSchedulesParameters data)
    {
        _haContext.CallService("renault", "charge_set_schedules", null, data);
    }

    ///<summary>Updates charge schedule on vehicle.</summary>
    ///<param name="vehicle">The vehicle to send the command to.</param>
    ///<param name="schedules">Schedule details. eg: [   {     &apos;id&apos;:1,     &apos;activated&apos;:true,     &apos;monday&apos;:{&apos;startTime&apos;:&apos;T12:00Z&apos;,&apos;duration&apos;:15},     &apos;tuesday&apos;:{&apos;startTime&apos;:&apos;T12:00Z&apos;,&apos;duration&apos;:15},     &apos;wednesday&apos;:{&apos;startTime&apos;:&apos;T12:00Z&apos;,&apos;duration&apos;:15},     &apos;thursday&apos;:{&apos;startTime&apos;:&apos;T12:00Z&apos;,&apos;duration&apos;:15},     &apos;friday&apos;:{&apos;startTime&apos;:&apos;T12:00Z&apos;,&apos;duration&apos;:15},     &apos;saturday&apos;:{&apos;startTime&apos;:&apos;T12:00Z&apos;,&apos;duration&apos;:15},     &apos;sunday&apos;:{&apos;startTime&apos;:&apos;T12:00Z&apos;,&apos;duration&apos;:15}   },   {     &apos;id&apos;:2,     &apos;activated&apos;:false,     &apos;monday&apos;:{&apos;startTime&apos;:&apos;T12:00Z&apos;,&apos;duration&apos;:240},     &apos;tuesday&apos;:{&apos;startTime&apos;:&apos;T12:00Z&apos;,&apos;duration&apos;:240},     &apos;wednesday&apos;:{&apos;startTime&apos;:&apos;T12:00Z&apos;,&apos;duration&apos;:240},     &apos;thursday&apos;:{&apos;startTime&apos;:&apos;T12:00Z&apos;,&apos;duration&apos;:240},     &apos;friday&apos;:{&apos;startTime&apos;:&apos;T12:00Z&apos;,&apos;duration&apos;:240},     &apos;saturday&apos;:{&apos;startTime&apos;:&apos;T12:00Z&apos;,&apos;duration&apos;:240},     &apos;sunday&apos;:{&apos;startTime&apos;:&apos;T12:00Z&apos;,&apos;duration&apos;:240}   }, ]</param>
    public void ChargeSetSchedules(string vehicle, object schedules)
    {
        _haContext.CallService("renault", "charge_set_schedules", null, new RenaultChargeSetSchedulesParameters { Vehicle = vehicle, Schedules = schedules });
    }
}

public partial record RenaultAcCancelParameters
{
    ///<summary>The vehicle to send the command to.</summary>
    [JsonPropertyName("vehicle")]
    public string? Vehicle { get; init; }
}

public partial record RenaultAcStartParameters
{
    ///<summary>The vehicle to send the command to.</summary>
    [JsonPropertyName("vehicle")]
    public string? Vehicle { get; init; }

    ///<summary>Target A/C temperature in °C. eg: 21</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>Timestamp for the start of the A/C (optional - defaults to now). eg: 2020-05-01T17:45:00</summary>
    [JsonPropertyName("when")]
    public string? When { get; init; }
}

public partial record RenaultChargeSetSchedulesParameters
{
    ///<summary>The vehicle to send the command to.</summary>
    [JsonPropertyName("vehicle")]
    public string? Vehicle { get; init; }

    ///<summary>Schedule details. eg: [   {     &apos;id&apos;:1,     &apos;activated&apos;:true,     &apos;monday&apos;:{&apos;startTime&apos;:&apos;T12:00Z&apos;,&apos;duration&apos;:15},     &apos;tuesday&apos;:{&apos;startTime&apos;:&apos;T12:00Z&apos;,&apos;duration&apos;:15},     &apos;wednesday&apos;:{&apos;startTime&apos;:&apos;T12:00Z&apos;,&apos;duration&apos;:15},     &apos;thursday&apos;:{&apos;startTime&apos;:&apos;T12:00Z&apos;,&apos;duration&apos;:15},     &apos;friday&apos;:{&apos;startTime&apos;:&apos;T12:00Z&apos;,&apos;duration&apos;:15},     &apos;saturday&apos;:{&apos;startTime&apos;:&apos;T12:00Z&apos;,&apos;duration&apos;:15},     &apos;sunday&apos;:{&apos;startTime&apos;:&apos;T12:00Z&apos;,&apos;duration&apos;:15}   },   {     &apos;id&apos;:2,     &apos;activated&apos;:false,     &apos;monday&apos;:{&apos;startTime&apos;:&apos;T12:00Z&apos;,&apos;duration&apos;:240},     &apos;tuesday&apos;:{&apos;startTime&apos;:&apos;T12:00Z&apos;,&apos;duration&apos;:240},     &apos;wednesday&apos;:{&apos;startTime&apos;:&apos;T12:00Z&apos;,&apos;duration&apos;:240},     &apos;thursday&apos;:{&apos;startTime&apos;:&apos;T12:00Z&apos;,&apos;duration&apos;:240},     &apos;friday&apos;:{&apos;startTime&apos;:&apos;T12:00Z&apos;,&apos;duration&apos;:240},     &apos;saturday&apos;:{&apos;startTime&apos;:&apos;T12:00Z&apos;,&apos;duration&apos;:240},     &apos;sunday&apos;:{&apos;startTime&apos;:&apos;T12:00Z&apos;,&apos;duration&apos;:240}   }, ]</summary>
    [JsonPropertyName("schedules")]
    public object? Schedules { get; init; }
}

public partial class RestServices
{
    private readonly IHaContext _haContext;
    public RestServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads REST entities from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("rest", "reload", null);
    }
}

public partial class RestCommandServices
{
    private readonly IHaContext _haContext;
    public RestCommandServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public void LectioLogin()
    {
        _haContext.CallService("rest_command", "lectio_login", null);
    }

    ///<summary>Reloads RESTful commands from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("rest_command", "reload", null);
    }
}

public partial class SceneServices
{
    private readonly IHaContext _haContext;
    public SceneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activates a scene with configuration.</summary>
    public void Apply(SceneApplyParameters data)
    {
        _haContext.CallService("scene", "apply", null, data);
    }

    ///<summary>Activates a scene with configuration.</summary>
    ///<param name="entities">List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void Apply(object entities, long? transition = null)
    {
        _haContext.CallService("scene", "apply", null, new SceneApplyParameters { Entities = entities, Transition = transition });
    }

    ///<summary>Creates a new scene.</summary>
    public void Create(SceneCreateParameters data)
    {
        _haContext.CallService("scene", "create", null, data);
    }

    ///<summary>Creates a new scene.</summary>
    ///<param name="sceneId">The entity ID of the new scene. eg: all_lights</param>
    ///<param name="entities">List of entities and their target state. If your entities are already in the target state right now, use `snapshot_entities` instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </param>
    ///<param name="snapshotEntities">List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the `snapshot_entities` with `entities`. eg: - light.ceiling - light.kitchen </param>
    public void Create(string sceneId, object? entities = null, string? snapshotEntities = null)
    {
        _haContext.CallService("scene", "create", null, new SceneCreateParameters { SceneId = sceneId, Entities = entities, SnapshotEntities = snapshotEntities });
    }

    ///<summary>Deletes a dynamically created scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void Delete(ServiceTarget target)
    {
        _haContext.CallService("scene", "delete", target);
    }

    ///<summary>Reloads the scenes from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("scene", "reload", null);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SceneTurnOnParameters data)
    {
        _haContext.CallService("scene", "turn_on", target, data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void TurnOn(ServiceTarget target, long? transition = null)
    {
        _haContext.CallService("scene", "turn_on", target, new SceneTurnOnParameters { Transition = transition });
    }
}

public partial record SceneApplyParameters
{
    ///<summary>List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }
}

public partial record SceneCreateParameters
{
    ///<summary>The entity ID of the new scene. eg: all_lights</summary>
    [JsonPropertyName("scene_id")]
    public string? SceneId { get; init; }

    ///<summary>List of entities and their target state. If your entities are already in the target state right now, use `snapshot_entities` instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the `snapshot_entities` with `entities`. eg: - light.ceiling - light.kitchen </summary>
    [JsonPropertyName("snapshot_entities")]
    public string? SnapshotEntities { get; init; }
}

public partial record SceneTurnOnParameters
{
    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }
}

public partial class ScheduleServices
{
    private readonly IHaContext _haContext;
    public ScheduleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads schedules from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("schedule", "reload", null);
    }
}

public partial class ScriptServices
{
    private readonly IHaContext _haContext;
    public ScriptServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public void FindTelefon(ScriptFindTelefonParameters data)
    {
        _haContext.CallService("script", "find_telefon", null, data);
    }

    ///<param name="notifyId">The ID of the Notify service eg: notify.mobile_app_kristoffers_galaxy_s20_ultra</param>
    public void FindTelefon(object? notifyId = null)
    {
        _haContext.CallService("script", "find_telefon", null, new ScriptFindTelefonParameters { NotifyId = notifyId });
    }

    public void GarageLukPortMedPladsTilLedning()
    {
        _haContext.CallService("script", "garage_luk_port_med_plads_til_ledning", null);
    }

    public void GarageTemp()
    {
        _haContext.CallService("script", "garage_temp", null);
    }

    public void Halloween()
    {
        _haContext.CallService("script", "halloween", null);
    }

    public void HjemGodnat()
    {
        _haContext.CallService("script", "hjem_godnat", null);
    }

    public void KokkenStovsugerPitstop()
    {
        _haContext.CallService("script", "kokken_stovsuger_pitstop", null);
    }

    public void Lightning()
    {
        _haContext.CallService("script", "lightning", null);
    }

    ///<summary>Reloads all the available scripts.</summary>
    public void Reload()
    {
        _haContext.CallService("script", "reload", null);
    }

    public void RoarDaempLoftlysHvisTaendt()
    {
        _haContext.CallService("script", "roar_daemp_loftlys_hvis_taendt", null);
    }

    public void RoarDaempLysHvisTaendt()
    {
        _haContext.CallService("script", "roar_daemp_lys_hvis_taendt", null);
    }

    public void RoarToiletbesogErSlut()
    {
        _haContext.CallService("script", "roar_toiletbesog_er_slut", null);
    }

    public void SceneSlukAlleIndendorsLys()
    {
        _haContext.CallService("script", "scene_sluk_alle_indendors_lys", null);
    }

    public void StovsugerEbbesMad()
    {
        _haContext.CallService("script", "stovsuger_ebbes_mad", null);
    }

    public void StovsugerHojesteSugestyrke()
    {
        _haContext.CallService("script", "stovsuger_hojeste_sugestyrke", null);
    }

    public void StovsugerKokken()
    {
        _haContext.CallService("script", "stovsuger_kokken", null);
    }

    public void StovsugerKokkenX1()
    {
        _haContext.CallService("script", "stovsuger_kokken_x_1", null);
    }

    public void StovsugerKokkenX2()
    {
        _haContext.CallService("script", "stovsuger_kokken_x_2", null);
    }

    public void StovsugerLavesteSugestyrke()
    {
        _haContext.CallService("script", "stovsuger_laveste_sugestyrke", null);
    }

    public void StovsugerSkiftSugestyrke()
    {
        _haContext.CallService("script", "stovsuger_skift_sugestyrke", null);
    }

    public void StovsugerStartPause()
    {
        _haContext.CallService("script", "stovsuger_start_pause", null);
    }

    public void StovsugerVentTilFardig()
    {
        _haContext.CallService("script", "stovsuger_vent_til_fardig", null);
    }

    ///<summary>Toggle a script. Starts it, if isn&apos;t running, stops it otherwise.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("script", "toggle", target);
    }

    ///<summary>Stops a running script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("script", "turn_off", target);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("script", "turn_on", target);
    }

    public void Zigbee2mqttRepairBinding()
    {
        _haContext.CallService("script", "zigbee2mqtt_repair_binding", null);
    }

    public void Zigbee2mqttReparerBinding()
    {
        _haContext.CallService("script", "zigbee2mqtt_reparer_binding", null);
    }
}

public partial record ScriptFindTelefonParameters
{
    ///<summary>The ID of the Notify service eg: notify.mobile_app_kristoffers_galaxy_s20_ultra</summary>
    [JsonPropertyName("notifyId")]
    public object? NotifyId { get; init; }
}

public partial class SelectServices
{
    private readonly IHaContext _haContext;
    public SelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target)
    {
        _haContext.CallService("select", "select_first", target);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target)
    {
        _haContext.CallService("select", "select_last", target);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, SelectSelectNextParameters data)
    {
        _haContext.CallService("select", "select_next", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_next", target, new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, SelectSelectOptionParameters data)
    {
        _haContext.CallService("select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("select", "select_option", target, new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, SelectSelectPreviousParameters data)
    {
        _haContext.CallService("select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_previous", target, new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public partial record SelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record SelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record SelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial class ShoppingListServices
{
    private readonly IHaContext _haContext;
    public ShoppingListServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds an item to the shopping list.</summary>
    public void AddItem(ShoppingListAddItemParameters data)
    {
        _haContext.CallService("shopping_list", "add_item", null, data);
    }

    ///<summary>Adds an item to the shopping list.</summary>
    ///<param name="name">The name of the item to add. eg: Beer</param>
    public void AddItem(string name)
    {
        _haContext.CallService("shopping_list", "add_item", null, new ShoppingListAddItemParameters { Name = name });
    }

    ///<summary>Clears completed items from the shopping list.</summary>
    public void ClearCompletedItems()
    {
        _haContext.CallService("shopping_list", "clear_completed_items", null);
    }

    ///<summary>Marks all items as completed in the shopping list (without removing them from the list).</summary>
    public void CompleteAll()
    {
        _haContext.CallService("shopping_list", "complete_all", null);
    }

    ///<summary>Marks the first item with matching name as completed in the shopping list.</summary>
    public void CompleteItem(ShoppingListCompleteItemParameters data)
    {
        _haContext.CallService("shopping_list", "complete_item", null, data);
    }

    ///<summary>Marks the first item with matching name as completed in the shopping list.</summary>
    ///<param name="name">The name of the item to mark as completed (without removing). eg: Beer</param>
    public void CompleteItem(string name)
    {
        _haContext.CallService("shopping_list", "complete_item", null, new ShoppingListCompleteItemParameters { Name = name });
    }

    ///<summary>Marks all items as incomplete in the shopping list.</summary>
    public void IncompleteAll()
    {
        _haContext.CallService("shopping_list", "incomplete_all", null);
    }

    ///<summary>Marks the first item with matching name as incomplete in the shopping list.</summary>
    public void IncompleteItem(ShoppingListIncompleteItemParameters data)
    {
        _haContext.CallService("shopping_list", "incomplete_item", null, data);
    }

    ///<summary>Marks the first item with matching name as incomplete in the shopping list.</summary>
    ///<param name="name">The name of the item to mark as incomplete. eg: Beer</param>
    public void IncompleteItem(string name)
    {
        _haContext.CallService("shopping_list", "incomplete_item", null, new ShoppingListIncompleteItemParameters { Name = name });
    }

    ///<summary>Removes the first item with matching name from the shopping list.</summary>
    public void RemoveItem(ShoppingListRemoveItemParameters data)
    {
        _haContext.CallService("shopping_list", "remove_item", null, data);
    }

    ///<summary>Removes the first item with matching name from the shopping list.</summary>
    ///<param name="name">The name of the item to remove. eg: Beer</param>
    public void RemoveItem(string name)
    {
        _haContext.CallService("shopping_list", "remove_item", null, new ShoppingListRemoveItemParameters { Name = name });
    }

    ///<summary>Sorts all items by name in the shopping list.</summary>
    public void Sort(ShoppingListSortParameters data)
    {
        _haContext.CallService("shopping_list", "sort", null, data);
    }

    ///<summary>Sorts all items by name in the shopping list.</summary>
    ///<param name="reverse">Whether to sort in reverse (descending) order.</param>
    public void Sort(bool? reverse = null)
    {
        _haContext.CallService("shopping_list", "sort", null, new ShoppingListSortParameters { Reverse = reverse });
    }
}

public partial record ShoppingListAddItemParameters
{
    ///<summary>The name of the item to add. eg: Beer</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record ShoppingListCompleteItemParameters
{
    ///<summary>The name of the item to mark as completed (without removing). eg: Beer</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record ShoppingListIncompleteItemParameters
{
    ///<summary>The name of the item to mark as incomplete. eg: Beer</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record ShoppingListRemoveItemParameters
{
    ///<summary>The name of the item to remove. eg: Beer</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record ShoppingListSortParameters
{
    ///<summary>Whether to sort in reverse (descending) order.</summary>
    [JsonPropertyName("reverse")]
    public bool? Reverse { get; init; }
}

public partial class SonoffServices
{
    private readonly IHaContext _haContext;
    public SonoffServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a command to a device.</summary>
    public void SendCommand(SonoffSendCommandParameters data)
    {
        _haContext.CallService("sonoff", "send_command", null, data);
    }

    ///<summary>Sends a command to a device.</summary>
    ///<param name="device">Device ID to send command to. eg: 1000123456</param>
    ///<param name="cmd">A single command to send. eg: switch</param>
    public void SendCommand(object? device = null, object? cmd = null)
    {
        _haContext.CallService("sonoff", "send_command", null, new SonoffSendCommandParameters { Device = device, Cmd = cmd });
    }
}

public partial record SonoffSendCommandParameters
{
    ///<summary>Device ID to send command to. eg: 1000123456</summary>
    [JsonPropertyName("device")]
    public object? Device { get; init; }

    ///<summary>A single command to send. eg: switch</summary>
    [JsonPropertyName("cmd")]
    public object? Cmd { get; init; }
}

public partial class SonosServices
{
    private readonly IHaContext _haContext;
    public SonosServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears a Sonos timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearSleepTimer(ServiceTarget target)
    {
        _haContext.CallService("sonos", "clear_sleep_timer", target);
    }

    ///<summary>Start playing the queue from the first item.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayQueue(ServiceTarget target, SonosPlayQueueParameters data)
    {
        _haContext.CallService("sonos", "play_queue", target, data);
    }

    ///<summary>Start playing the queue from the first item.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="queuePosition">Position of the song in the queue to start playing from.</param>
    public void PlayQueue(ServiceTarget target, long? queuePosition = null)
    {
        _haContext.CallService("sonos", "play_queue", target, new SonosPlayQueueParameters { QueuePosition = queuePosition });
    }

    ///<summary>Removes an item from the queue.</summary>
    ///<param name="target">The target for this service call</param>
    public void RemoveFromQueue(ServiceTarget target, SonosRemoveFromQueueParameters data)
    {
        _haContext.CallService("sonos", "remove_from_queue", target, data);
    }

    ///<summary>Removes an item from the queue.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="queuePosition">Position in the queue to remove.</param>
    public void RemoveFromQueue(ServiceTarget target, long? queuePosition = null)
    {
        _haContext.CallService("sonos", "remove_from_queue", target, new SonosRemoveFromQueueParameters { QueuePosition = queuePosition });
    }

    ///<summary>Restores a snapshot of the media player.</summary>
    public void Restore(SonosRestoreParameters data)
    {
        _haContext.CallService("sonos", "restore", null, data);
    }

    ///<summary>Restores a snapshot of the media player.</summary>
    ///<param name="entityId">Name of entity that will be restored.</param>
    ///<param name="withGroup">True or False. Also restore the group layout.</param>
    public void Restore(string? entityId = null, bool? withGroup = null)
    {
        _haContext.CallService("sonos", "restore", null, new SonosRestoreParameters { EntityId = entityId, WithGroup = withGroup });
    }

    ///<summary>Sets a Sonos timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSleepTimer(ServiceTarget target, SonosSetSleepTimerParameters data)
    {
        _haContext.CallService("sonos", "set_sleep_timer", target, data);
    }

    ///<summary>Sets a Sonos timer.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="sleepTime">Number of seconds to set the timer.</param>
    public void SetSleepTimer(ServiceTarget target, long? sleepTime = null)
    {
        _haContext.CallService("sonos", "set_sleep_timer", target, new SonosSetSleepTimerParameters { SleepTime = sleepTime });
    }

    ///<summary>Takes a snapshot of the media player.</summary>
    public void Snapshot(SonosSnapshotParameters data)
    {
        _haContext.CallService("sonos", "snapshot", null, data);
    }

    ///<summary>Takes a snapshot of the media player.</summary>
    ///<param name="entityId">Name of entity that will be snapshot.</param>
    ///<param name="withGroup">True or False. Also snapshot the group layout.</param>
    public void Snapshot(string? entityId = null, bool? withGroup = null)
    {
        _haContext.CallService("sonos", "snapshot", null, new SonosSnapshotParameters { EntityId = entityId, WithGroup = withGroup });
    }

    ///<summary>Updates an alarm with new time and volume settings.</summary>
    ///<param name="target">The target for this service call</param>
    public void UpdateAlarm(ServiceTarget target, SonosUpdateAlarmParameters data)
    {
        _haContext.CallService("sonos", "update_alarm", target, data);
    }

    ///<summary>Updates an alarm with new time and volume settings.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="alarmId">ID for the alarm to be updated.</param>
    ///<param name="time">Set time for the alarm. eg: 07:00</param>
    ///<param name="volume">Set alarm volume level.</param>
    ///<param name="enabled">Enable or disable the alarm.</param>
    ///<param name="includeLinkedZones">Enable or disable including grouped rooms.</param>
    public void UpdateAlarm(ServiceTarget target, long alarmId, DateTime? time = null, double? volume = null, bool? enabled = null, bool? includeLinkedZones = null)
    {
        _haContext.CallService("sonos", "update_alarm", target, new SonosUpdateAlarmParameters { AlarmId = alarmId, Time = time, Volume = volume, Enabled = enabled, IncludeLinkedZones = includeLinkedZones });
    }
}

public partial record SonosPlayQueueParameters
{
    ///<summary>Position of the song in the queue to start playing from.</summary>
    [JsonPropertyName("queue_position")]
    public long? QueuePosition { get; init; }
}

public partial record SonosRemoveFromQueueParameters
{
    ///<summary>Position in the queue to remove.</summary>
    [JsonPropertyName("queue_position")]
    public long? QueuePosition { get; init; }
}

public partial record SonosRestoreParameters
{
    ///<summary>Name of entity that will be restored.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>True or False. Also restore the group layout.</summary>
    [JsonPropertyName("with_group")]
    public bool? WithGroup { get; init; }
}

public partial record SonosSetSleepTimerParameters
{
    ///<summary>Number of seconds to set the timer.</summary>
    [JsonPropertyName("sleep_time")]
    public long? SleepTime { get; init; }
}

public partial record SonosSnapshotParameters
{
    ///<summary>Name of entity that will be snapshot.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>True or False. Also snapshot the group layout.</summary>
    [JsonPropertyName("with_group")]
    public bool? WithGroup { get; init; }
}

public partial record SonosUpdateAlarmParameters
{
    ///<summary>ID for the alarm to be updated.</summary>
    [JsonPropertyName("alarm_id")]
    public long? AlarmId { get; init; }

    ///<summary>Set time for the alarm. eg: 07:00</summary>
    [JsonPropertyName("time")]
    public DateTime? Time { get; init; }

    ///<summary>Set alarm volume level.</summary>
    [JsonPropertyName("volume")]
    public double? Volume { get; init; }

    ///<summary>Enable or disable the alarm.</summary>
    [JsonPropertyName("enabled")]
    public bool? Enabled { get; init; }

    ///<summary>Enable or disable including grouped rooms.</summary>
    [JsonPropertyName("include_linked_zones")]
    public bool? IncludeLinkedZones { get; init; }
}

public partial class SwitchServices
{
    private readonly IHaContext _haContext;
    public SwitchServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles a switch on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("switch", "toggle", target);
    }

    ///<summary>Turns a switch off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("switch", "turn_off", target);
    }

    ///<summary>Turns a switch on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("switch", "turn_on", target);
    }
}

public partial class SystemLogServices
{
    private readonly IHaContext _haContext;
    public SystemLogServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears all log entries.</summary>
    public void Clear()
    {
        _haContext.CallService("system_log", "clear", null);
    }

    ///<summary>Write log entry.</summary>
    public void Write(SystemLogWriteParameters data)
    {
        _haContext.CallService("system_log", "write", null, data);
    }

    ///<summary>Write log entry.</summary>
    ///<param name="message">Message to log. eg: Something went wrong</param>
    ///<param name="level">Log level.</param>
    ///<param name="logger">Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</param>
    public void Write(string message, object? level = null, string? logger = null)
    {
        _haContext.CallService("system_log", "write", null, new SystemLogWriteParameters { Message = message, Level = level, Logger = logger });
    }
}

public partial record SystemLogWriteParameters
{
    ///<summary>Message to log. eg: Something went wrong</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Log level.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }

    ///<summary>Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</summary>
    [JsonPropertyName("logger")]
    public string? Logger { get; init; }
}

public partial class TadoServices
{
    private readonly IHaContext _haContext;
    public TadoServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Add meter readings to Tado Energy IQ.</summary>
    public void AddMeterReading(TadoAddMeterReadingParameters data)
    {
        _haContext.CallService("tado", "add_meter_reading", null, data);
    }

    ///<summary>Add meter readings to Tado Energy IQ.</summary>
    ///<param name="configEntry">Config entry to add meter readings to.</param>
    ///<param name="reading">Reading in m³ or kWh without decimals.</param>
    public void AddMeterReading(object configEntry, long reading)
    {
        _haContext.CallService("tado", "add_meter_reading", null, new TadoAddMeterReadingParameters { ConfigEntry = configEntry, Reading = reading });
    }

    ///<summary>Sets the temperature offset of climate entities.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetClimateTemperatureOffset(ServiceTarget target, TadoSetClimateTemperatureOffsetParameters data)
    {
        _haContext.CallService("tado", "set_climate_temperature_offset", target, data);
    }

    ///<summary>Sets the temperature offset of climate entities.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="offset">Offset you would like (depending on your device).</param>
    public void SetClimateTemperatureOffset(ServiceTarget target, double? offset = null)
    {
        _haContext.CallService("tado", "set_climate_temperature_offset", target, new TadoSetClimateTemperatureOffsetParameters { Offset = offset });
    }

    ///<summary>Turns on climate entities for a set time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetClimateTimer(ServiceTarget target, TadoSetClimateTimerParameters data)
    {
        _haContext.CallService("tado", "set_climate_timer", target, data);
    }

    ///<summary>Turns on climate entities for a set time.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="temperature">Temperature to set climate entity to.</param>
    ///<param name="timePeriod">Choose this or Overlay. Set the time period for the change if you want to be specific. Alternatively use Overlay. eg: 01:30:00</param>
    ///<param name="requestedOverlay">Choose this or Time Period. Allows you to choose an overlay. MANUAL:=Overlay until user removes; NEXT_TIME_BLOCK:=Overlay until next timeblock; TADO_DEFAULT:=Overlay based on tado app setting. eg: MANUAL</param>
    public void SetClimateTimer(ServiceTarget target, double temperature, string? timePeriod = null, object? requestedOverlay = null)
    {
        _haContext.CallService("tado", "set_climate_timer", target, new TadoSetClimateTimerParameters { Temperature = temperature, TimePeriod = timePeriod, RequestedOverlay = requestedOverlay });
    }

    ///<summary>Turns on water heater for a set time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetWaterHeaterTimer(ServiceTarget target, TadoSetWaterHeaterTimerParameters data)
    {
        _haContext.CallService("tado", "set_water_heater_timer", target, data);
    }

    ///<summary>Turns on water heater for a set time.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="timePeriod">Set the time period for the boost. eg: 01:30:00</param>
    ///<param name="temperature">Temperature to set heater to.</param>
    public void SetWaterHeaterTimer(ServiceTarget target, string timePeriod, double? temperature = null)
    {
        _haContext.CallService("tado", "set_water_heater_timer", target, new TadoSetWaterHeaterTimerParameters { TimePeriod = timePeriod, Temperature = temperature });
    }
}

public partial record TadoAddMeterReadingParameters
{
    ///<summary>Config entry to add meter readings to.</summary>
    [JsonPropertyName("config_entry")]
    public object? ConfigEntry { get; init; }

    ///<summary>Reading in m³ or kWh without decimals.</summary>
    [JsonPropertyName("reading")]
    public long? Reading { get; init; }
}

public partial record TadoSetClimateTemperatureOffsetParameters
{
    ///<summary>Offset you would like (depending on your device).</summary>
    [JsonPropertyName("offset")]
    public double? Offset { get; init; }
}

public partial record TadoSetClimateTimerParameters
{
    ///<summary>Temperature to set climate entity to.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>Choose this or Overlay. Set the time period for the change if you want to be specific. Alternatively use Overlay. eg: 01:30:00</summary>
    [JsonPropertyName("time_period")]
    public string? TimePeriod { get; init; }

    ///<summary>Choose this or Time Period. Allows you to choose an overlay. MANUAL:=Overlay until user removes; NEXT_TIME_BLOCK:=Overlay until next timeblock; TADO_DEFAULT:=Overlay based on tado app setting. eg: MANUAL</summary>
    [JsonPropertyName("requested_overlay")]
    public object? RequestedOverlay { get; init; }
}

public partial record TadoSetWaterHeaterTimerParameters
{
    ///<summary>Set the time period for the boost. eg: 01:30:00</summary>
    [JsonPropertyName("time_period")]
    public string? TimePeriod { get; init; }

    ///<summary>Temperature to set heater to.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }
}

public partial class TemplateServices
{
    private readonly IHaContext _haContext;
    public TemplateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads template entities from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("template", "reload", null);
    }
}

public partial class TimerServices
{
    private readonly IHaContext _haContext;
    public TimerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Cancels a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Cancel(ServiceTarget target)
    {
        _haContext.CallService("timer", "cancel", target);
    }

    ///<summary>Changes a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Change(ServiceTarget target, TimerChangeParameters data)
    {
        _haContext.CallService("timer", "change", target, data);
    }

    ///<summary>Changes a timer.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="duration">Duration to add or subtract to the running timer. eg: 00:01:00, 60 or -60</param>
    public void Change(ServiceTarget target, string duration)
    {
        _haContext.CallService("timer", "change", target, new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Finishes a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Finish(ServiceTarget target)
    {
        _haContext.CallService("timer", "finish", target);
    }

    ///<summary>Pauses a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target)
    {
        _haContext.CallService("timer", "pause", target);
    }

    ///<summary>Reloads timers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("timer", "reload", null);
    }

    ///<summary>Starts a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target, TimerStartParameters data)
    {
        _haContext.CallService("timer", "start", target, data);
    }

    ///<summary>Starts a timer.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="duration">Duration the timer requires to finish. [optional]. eg: 00:01:00 or 60</param>
    public void Start(ServiceTarget target, string? duration = null)
    {
        _haContext.CallService("timer", "start", target, new TimerStartParameters { Duration = duration });
    }
}

public partial record TimerChangeParameters
{
    ///<summary>Duration to add or subtract to the running timer. eg: 00:01:00, 60 or -60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial record TimerStartParameters
{
    ///<summary>Duration the timer requires to finish. [optional]. eg: 00:01:00 or 60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class TodoServices
{
    private readonly IHaContext _haContext;
    public TodoServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Add a new to-do list item.</summary>
    ///<param name="target">The target for this service call</param>
    public void AddItem(ServiceTarget target, TodoAddItemParameters data)
    {
        _haContext.CallService("todo", "add_item", target, data);
    }

    ///<summary>Add a new to-do list item.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="item">The name that represents the to-do item. eg: Submit income tax return</param>
    ///<param name="dueDate">The date the to-do item is expected to be completed. eg: 2023-11-17</param>
    ///<param name="dueDatetime">The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</param>
    ///<param name="description">A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</param>
    public void AddItem(ServiceTarget target, string item, object? dueDate = null, object? dueDatetime = null, string? description = null)
    {
        _haContext.CallService("todo", "add_item", target, new TodoAddItemParameters { Item = item, DueDate = dueDate, DueDatetime = dueDatetime, Description = description });
    }

    ///<summary>Get items on a to-do list.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetItems(ServiceTarget target, TodoGetItemsParameters data)
    {
        _haContext.CallService("todo", "get_items", target, data);
    }

    ///<summary>Get items on a to-do list.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="status">Only return to-do items with the specified statuses. Returns not completed actions by default. eg: needs_action</param>
    public void GetItems(ServiceTarget target, object? status = null)
    {
        _haContext.CallService("todo", "get_items", target, new TodoGetItemsParameters { Status = status });
    }

    ///<summary>Remove all to-do list items that have been completed.</summary>
    ///<param name="target">The target for this service call</param>
    public void RemoveCompletedItems(ServiceTarget target)
    {
        _haContext.CallService("todo", "remove_completed_items", target);
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    ///<param name="target">The target for this service call</param>
    public void RemoveItem(ServiceTarget target, TodoRemoveItemParameters data)
    {
        _haContext.CallService("todo", "remove_item", target, data);
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="item">The name for the to-do list items.</param>
    public void RemoveItem(ServiceTarget target, string item)
    {
        _haContext.CallService("todo", "remove_item", target, new TodoRemoveItemParameters { Item = item });
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    ///<param name="target">The target for this service call</param>
    public void UpdateItem(ServiceTarget target, TodoUpdateItemParameters data)
    {
        _haContext.CallService("todo", "update_item", target, data);
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="item">The name for the to-do list item. eg: Submit income tax return</param>
    ///<param name="rename">The new name of the to-do item eg: Something else</param>
    ///<param name="status">A status or confirmation of the to-do item. eg: needs_action</param>
    ///<param name="dueDate">The date the to-do item is expected to be completed. eg: 2023-11-17</param>
    ///<param name="dueDatetime">The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</param>
    ///<param name="description">A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</param>
    public void UpdateItem(ServiceTarget target, string item, string? rename = null, object? status = null, object? dueDate = null, object? dueDatetime = null, string? description = null)
    {
        _haContext.CallService("todo", "update_item", target, new TodoUpdateItemParameters { Item = item, Rename = rename, Status = status, DueDate = dueDate, DueDatetime = dueDatetime, Description = description });
    }
}

public partial record TodoAddItemParameters
{
    ///<summary>The name that represents the to-do item. eg: Submit income tax return</summary>
    [JsonPropertyName("item")]
    public string? Item { get; init; }

    ///<summary>The date the to-do item is expected to be completed. eg: 2023-11-17</summary>
    [JsonPropertyName("due_date")]
    public object? DueDate { get; init; }

    ///<summary>The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</summary>
    [JsonPropertyName("due_datetime")]
    public object? DueDatetime { get; init; }

    ///<summary>A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }
}

public partial record TodoGetItemsParameters
{
    ///<summary>Only return to-do items with the specified statuses. Returns not completed actions by default. eg: needs_action</summary>
    [JsonPropertyName("status")]
    public object? Status { get; init; }
}

public partial record TodoRemoveItemParameters
{
    ///<summary>The name for the to-do list items.</summary>
    [JsonPropertyName("item")]
    public string? Item { get; init; }
}

public partial record TodoUpdateItemParameters
{
    ///<summary>The name for the to-do list item. eg: Submit income tax return</summary>
    [JsonPropertyName("item")]
    public string? Item { get; init; }

    ///<summary>The new name of the to-do item eg: Something else</summary>
    [JsonPropertyName("rename")]
    public string? Rename { get; init; }

    ///<summary>A status or confirmation of the to-do item. eg: needs_action</summary>
    [JsonPropertyName("status")]
    public object? Status { get; init; }

    ///<summary>The date the to-do item is expected to be completed. eg: 2023-11-17</summary>
    [JsonPropertyName("due_date")]
    public object? DueDate { get; init; }

    ///<summary>The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</summary>
    [JsonPropertyName("due_datetime")]
    public object? DueDatetime { get; init; }

    ///<summary>A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }
}

public partial class TtsServices
{
    private readonly IHaContext _haContext;
    public TtsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes all cached text-to-speech files and purges the memory.</summary>
    public void ClearCache()
    {
        _haContext.CallService("tts", "clear_cache", null);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    public void CloudSay(TtsCloudSayParameters data)
    {
        _haContext.CallService("tts", "cloud_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    ///<param name="entityId"></param>
    ///<param name="message"> eg: My name is hanna</param>
    ///<param name="cache"></param>
    ///<param name="language"> eg: ru</param>
    ///<param name="options"> eg: platform specific</param>
    public void CloudSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "cloud_say", null, new TtsCloudSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void Speak(ServiceTarget target, TtsSpeakParameters data)
    {
        _haContext.CallService("tts", "speak", target, data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public void Speak(ServiceTarget target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "speak", target, new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public partial record TtsCloudSayParameters
{
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary> eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsSpeakParameters
{
    ///<summary>Media players to play the message.</summary>
    [JsonPropertyName("media_player_entity_id")]
    public string? MediaPlayerEntityId { get; init; }

    ///<summary>The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Stores this message locally so that when the text is requested again, the output can be produced more quickly.</summary>
    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary>Language to use for speech generation. eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>A dictionary containing integration-specific options. eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class UpdateServices
{
    private readonly IHaContext _haContext;
    public UpdateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearSkipped(ServiceTarget target)
    {
        _haContext.CallService("update", "clear_skipped", target);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The target for this service call</param>
    public void Install(ServiceTarget target, UpdateInstallParameters data)
    {
        _haContext.CallService("update", "install", target, data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update .</param>
    public void Install(ServiceTarget target, string? version = null, bool? backup = null)
    {
        _haContext.CallService("update", "install", target, new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    ///<param name="target">The target for this service call</param>
    public void Skip(ServiceTarget target)
    {
        _haContext.CallService("update", "skip", target);
    }
}

public partial record UpdateInstallParameters
{
    ///<summary>The version to install. If omitted, the latest version will be installed. eg: 1.0.0</summary>
    [JsonPropertyName("version")]
    public string? Version { get; init; }

    ///<summary>If supported by the integration, this creates a backup before starting the update .</summary>
    [JsonPropertyName("backup")]
    public bool? Backup { get; init; }
}

public partial class VarServices
{
    private readonly IHaContext _haContext;
    public VarServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public void Reload()
    {
        _haContext.CallService("var", "reload", null);
    }

    ///<summary>Set an attribute or value of the variable.</summary>
    public void Set(VarSetParameters data)
    {
        _haContext.CallService("var", "set", null, data);
    }

    ///<summary>Set an attribute or value of the variable.</summary>
    ///<param name="entityId">The entity ID of the var entity to update. eg: var.x</param>
    ///<param name="value">The value to set on the variable. eg: 13</param>
    ///<param name="valueTemplate">The template to set, specifying the value of the variable. eg: {{ input_boolean.foo }}</param>
    ///<param name="attributes">A dict of attributes for the variable. eg: attr1: 42 attr2: &quot;{{ now() }}&quot; </param>
    ///<param name="trackedEntityId">A list of IDs of entities to track. When these entities update, the var will update. eg: input_boolean.bar</param>
    ///<param name="trackedEventType">A list of event types to track. When these events fire, the var will update. eg: sunset</param>
    ///<param name="query">A query for the Home Assistant database. The result of the query is used as the value of the variable. eg: SELECT COUNT(*) AS todays_diaper_count FROM events WHERE event_type = &apos;diaper_event&apos; AND time_fired BETWEEN DATETIME(&apos;now&apos;, &apos;start of day&apos;) and DATETIME(&apos;now&apos;);</param>
    ///<param name="column">The column to select from the Query results. eg: todays_diaper_count</param>
    ///<param name="restore">Flag specifying if the value of the variable should be restored on Home Assistant startup. eg: False</param>
    ///<param name="forceUpdate">Flag specifying if variable should be updated even when value is unchanged. eg: True</param>
    ///<param name="unitOfMeasurement">Unit of the value of the variable. Used in some UI components. eg: ounces</param>
    ///<param name="icon">Icon of the variable eg: mdi:baby-bottle-outline</param>
    ///<param name="iconTemplate">Template to use for the icon of the variable. eg: {{ input_text.foo }}</param>
    ///<param name="entityPicture">Picture to use for the var entity. eg: local/pic.png</param>
    ///<param name="entityPictureTemplate">Template to use for picture of the variable. eg: {{ input_text.foo }}</param>
    public void Set(object? entityId = null, object? value = null, object? valueTemplate = null, object? attributes = null, object? trackedEntityId = null, object? trackedEventType = null, object? query = null, object? column = null, object? restore = null, object? forceUpdate = null, object? unitOfMeasurement = null, object? icon = null, object? iconTemplate = null, object? entityPicture = null, object? entityPictureTemplate = null)
    {
        _haContext.CallService("var", "set", null, new VarSetParameters { EntityId = entityId, Value = value, ValueTemplate = valueTemplate, Attributes = attributes, TrackedEntityId = trackedEntityId, TrackedEventType = trackedEventType, Query = query, Column = column, Restore = restore, ForceUpdate = forceUpdate, UnitOfMeasurement = unitOfMeasurement, Icon = icon, IconTemplate = iconTemplate, EntityPicture = entityPicture, EntityPictureTemplate = entityPictureTemplate });
    }

    ///<summary>Force a variable to update using its current template.</summary>
    public void Update(VarUpdateParameters data)
    {
        _haContext.CallService("var", "update", null, data);
    }

    ///<summary>Force a variable to update using its current template.</summary>
    ///<param name="entityId">The entity ID of the var entity to update. eg: var.x</param>
    public void Update(object? entityId = null)
    {
        _haContext.CallService("var", "update", null, new VarUpdateParameters { EntityId = entityId });
    }
}

public partial record VarSetParameters
{
    ///<summary>The entity ID of the var entity to update. eg: var.x</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    ///<summary>The value to set on the variable. eg: 13</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }

    ///<summary>The template to set, specifying the value of the variable. eg: {{ input_boolean.foo }}</summary>
    [JsonPropertyName("value_template")]
    public object? ValueTemplate { get; init; }

    ///<summary>A dict of attributes for the variable. eg: attr1: 42 attr2: &quot;{{ now() }}&quot; </summary>
    [JsonPropertyName("attributes")]
    public object? Attributes { get; init; }

    ///<summary>A list of IDs of entities to track. When these entities update, the var will update. eg: input_boolean.bar</summary>
    [JsonPropertyName("tracked_entity_id")]
    public object? TrackedEntityId { get; init; }

    ///<summary>A list of event types to track. When these events fire, the var will update. eg: sunset</summary>
    [JsonPropertyName("tracked_event_type")]
    public object? TrackedEventType { get; init; }

    ///<summary>A query for the Home Assistant database. The result of the query is used as the value of the variable. eg: SELECT COUNT(*) AS todays_diaper_count FROM events WHERE event_type = &apos;diaper_event&apos; AND time_fired BETWEEN DATETIME(&apos;now&apos;, &apos;start of day&apos;) and DATETIME(&apos;now&apos;);</summary>
    [JsonPropertyName("query")]
    public object? Query { get; init; }

    ///<summary>The column to select from the Query results. eg: todays_diaper_count</summary>
    [JsonPropertyName("column")]
    public object? Column { get; init; }

    ///<summary>Flag specifying if the value of the variable should be restored on Home Assistant startup. eg: False</summary>
    [JsonPropertyName("restore")]
    public object? Restore { get; init; }

    ///<summary>Flag specifying if variable should be updated even when value is unchanged. eg: True</summary>
    [JsonPropertyName("force_update")]
    public object? ForceUpdate { get; init; }

    ///<summary>Unit of the value of the variable. Used in some UI components. eg: ounces</summary>
    [JsonPropertyName("unit_of_measurement")]
    public object? UnitOfMeasurement { get; init; }

    ///<summary>Icon of the variable eg: mdi:baby-bottle-outline</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>Template to use for the icon of the variable. eg: {{ input_text.foo }}</summary>
    [JsonPropertyName("icon_template")]
    public object? IconTemplate { get; init; }

    ///<summary>Picture to use for the var entity. eg: local/pic.png</summary>
    [JsonPropertyName("entity_picture")]
    public object? EntityPicture { get; init; }

    ///<summary>Template to use for picture of the variable. eg: {{ input_text.foo }}</summary>
    [JsonPropertyName("entity_picture_template")]
    public object? EntityPictureTemplate { get; init; }
}

public partial record VarUpdateParameters
{
    ///<summary>The entity ID of the var entity to update. eg: var.x</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }
}

public partial class WaterHeaterServices
{
    private readonly IHaContext _haContext;
    public WaterHeaterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAwayMode(ServiceTarget target, WaterHeaterSetAwayModeParameters data)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, data);
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="awayMode">New value of away mode.</param>
    public void SetAwayMode(ServiceTarget target, bool awayMode)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, new WaterHeaterSetAwayModeParameters { AwayMode = awayMode });
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOperationMode(ServiceTarget target, WaterHeaterSetOperationModeParameters data)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, data);
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public void SetOperationMode(ServiceTarget target, string operationMode)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, new WaterHeaterSetOperationModeParameters { OperationMode = operationMode });
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, WaterHeaterSetTemperatureParameters data)
    {
        _haContext.CallService("water_heater", "set_temperature", target, data);
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="temperature">New target temperature for the water heater.</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public void SetTemperature(ServiceTarget target, double temperature, string? operationMode = null)
    {
        _haContext.CallService("water_heater", "set_temperature", target, new WaterHeaterSetTemperatureParameters { Temperature = temperature, OperationMode = operationMode });
    }

    ///<summary>Turns water heater off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("water_heater", "turn_off", target);
    }

    ///<summary>Turns water heater on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("water_heater", "turn_on", target);
    }
}

public partial record WaterHeaterSetAwayModeParameters
{
    ///<summary>New value of away mode.</summary>
    [JsonPropertyName("away_mode")]
    public bool? AwayMode { get; init; }
}

public partial record WaterHeaterSetOperationModeParameters
{
    ///<summary>New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial record WaterHeaterSetTemperatureParameters
{
    ///<summary>New target temperature for the water heater.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial class WeatherServices
{
    private readonly IHaContext _haContext;
    public WeatherServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetForecasts(ServiceTarget target, WeatherGetForecastsParameters data)
    {
        _haContext.CallService("weather", "get_forecasts", target, data);
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public void GetForecasts(ServiceTarget target, object @type)
    {
        _haContext.CallService("weather", "get_forecasts", target, new WeatherGetForecastsParameters { Type = @type });
    }
}

public partial record WeatherGetForecastsParameters
{
    ///<summary>Forecast type: daily, hourly or twice daily.</summary>
    [JsonPropertyName("type")]
    public object? Type { get; init; }
}

public partial class XiaomiCloudMapExtractorServices
{
    private readonly IHaContext _haContext;
    public XiaomiCloudMapExtractorServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload all entities of Xiaomi Cloud Map Extractor platform</summary>
    public void Reload()
    {
        _haContext.CallService("xiaomi_cloud_map_extractor", "reload", null);
    }
}

public partial class ZoneServices
{
    private readonly IHaContext _haContext;
    public ZoneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads zones from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("zone", "reload", null);
    }
}

public static class AutomationEntityExtensionMethods
{
    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this AutomationEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IEnumerable<AutomationEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this AutomationEntity target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IEnumerable<AutomationEntity> target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The AutomationEntity to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this AutomationEntity target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IEnumerable&lt;AutomationEntity&gt; to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IEnumerable<AutomationEntity> target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this AutomationEntity target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IEnumerable<AutomationEntity> target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The AutomationEntity to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this AutomationEntity target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IEnumerable&lt;AutomationEntity&gt; to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IEnumerable<AutomationEntity> target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this AutomationEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IEnumerable<AutomationEntity> target)
    {
        target.CallService("turn_on");
    }
}

public static class ButtonEntityExtensionMethods
{
    ///<summary>Press the button entity.</summary>
    public static void Press(this ButtonEntity target)
    {
        target.CallService("press");
    }

    ///<summary>Press the button entity.</summary>
    public static void Press(this IEnumerable<ButtonEntity> target)
    {
        target.CallService("press");
    }
}

public static class CalendarEntityExtensionMethods
{
    ///<summary>Adds a new calendar event.</summary>
    public static void CreateEvent(this CalendarEntity target, CalendarCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Adds a new calendar event.</summary>
    public static void CreateEvent(this IEnumerable<CalendarEntity> target, CalendarCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The CalendarEntity to call this service for</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this CalendarEntity target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The IEnumerable&lt;CalendarEntity&gt; to call this service for</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this IEnumerable<CalendarEntity> target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    public static void GetEvents(this CalendarEntity target, CalendarGetEventsParameters data)
    {
        target.CallService("get_events", data);
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    public static void GetEvents(this IEnumerable<CalendarEntity> target, CalendarGetEventsParameters data)
    {
        target.CallService("get_events", data);
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The CalendarEntity to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public static void GetEvents(this CalendarEntity target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        target.CallService("get_events", new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The IEnumerable&lt;CalendarEntity&gt; to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public static void GetEvents(this IEnumerable<CalendarEntity> target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        target.CallService("get_events", new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }
}

public static class CameraEntityExtensionMethods
{
    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this CameraEntity target)
    {
        target.CallService("disable_motion_detection");
    }

    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this IEnumerable<CameraEntity> target)
    {
        target.CallService("disable_motion_detection");
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this CameraEntity target)
    {
        target.CallService("enable_motion_detection");
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this IEnumerable<CameraEntity> target)
    {
        target.CallService("enable_motion_detection");
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this CameraEntity target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this IEnumerable<CameraEntity> target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The CameraEntity to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this CameraEntity target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The IEnumerable&lt;CameraEntity&gt; to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this IEnumerable<CameraEntity> target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this CameraEntity target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this IEnumerable<CameraEntity> target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The CameraEntity to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this CameraEntity target, string filename, long? duration = null, long? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The IEnumerable&lt;CameraEntity&gt; to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this IEnumerable<CameraEntity> target, string filename, long? duration = null, long? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this CameraEntity target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this IEnumerable<CameraEntity> target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The CameraEntity to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this CameraEntity target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The IEnumerable&lt;CameraEntity&gt; to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this IEnumerable<CameraEntity> target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this CameraEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this IEnumerable<CameraEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this CameraEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this IEnumerable<CameraEntity> target)
    {
        target.CallService("turn_on");
    }
}

public static class ClimateEntityExtensionMethods
{
    ///<summary>Turns auxiliary heater on/off.</summary>
    public static void SetAuxHeat(this ClimateEntity target, ClimateSetAuxHeatParameters data)
    {
        target.CallService("set_aux_heat", data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    public static void SetAuxHeat(this IEnumerable<ClimateEntity> target, ClimateSetAuxHeatParameters data)
    {
        target.CallService("set_aux_heat", data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The ClimateEntity to call this service for</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public static void SetAuxHeat(this ClimateEntity target, bool auxHeat)
    {
        target.CallService("set_aux_heat", new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The IEnumerable&lt;ClimateEntity&gt; to call this service for</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public static void SetAuxHeat(this IEnumerable<ClimateEntity> target, bool auxHeat)
    {
        target.CallService("set_aux_heat", new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this ClimateEntity target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IEnumerable<ClimateEntity> target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The ClimateEntity to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this ClimateEntity target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;ClimateEntity&gt; to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IEnumerable<ClimateEntity> target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this ClimateEntity target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IEnumerable<ClimateEntity> target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The ClimateEntity to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this ClimateEntity target, long humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IEnumerable&lt;ClimateEntity&gt; to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IEnumerable<ClimateEntity> target, long humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this ClimateEntity target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IEnumerable<ClimateEntity> target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The ClimateEntity to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this ClimateEntity target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;ClimateEntity&gt; to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IEnumerable<ClimateEntity> target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this ClimateEntity target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IEnumerable<ClimateEntity> target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The ClimateEntity to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this ClimateEntity target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IEnumerable&lt;ClimateEntity&gt; to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IEnumerable<ClimateEntity> target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this ClimateEntity target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IEnumerable<ClimateEntity> target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The ClimateEntity to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: horizontal</param>
    public static void SetSwingMode(this ClimateEntity target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;ClimateEntity&gt; to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: horizontal</param>
    public static void SetSwingMode(this IEnumerable<ClimateEntity> target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets target temperature.</summary>
    public static void SetTemperature(this ClimateEntity target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets target temperature.</summary>
    public static void SetTemperature(this IEnumerable<ClimateEntity> target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The ClimateEntity to call this service for</param>
    ///<param name="temperature">Target temperature.</param>
    ///<param name="targetTempHigh">High target temperature.</param>
    ///<param name="targetTempLow">Low target temperature.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this ClimateEntity target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The IEnumerable&lt;ClimateEntity&gt; to call this service for</param>
    ///<param name="temperature">Target temperature.</param>
    ///<param name="targetTempHigh">High target temperature.</param>
    ///<param name="targetTempLow">Low target temperature.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IEnumerable<ClimateEntity> target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    public static void Toggle(this ClimateEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    public static void Toggle(this IEnumerable<ClimateEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this ClimateEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IEnumerable<ClimateEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this ClimateEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IEnumerable<ClimateEntity> target)
    {
        target.CallService("turn_on");
    }
}

public static class CoverEntityExtensionMethods
{
    ///<summary>Closes a cover.</summary>
    public static void CloseCover(this CoverEntity target)
    {
        target.CallService("close_cover");
    }

    ///<summary>Closes a cover.</summary>
    public static void CloseCover(this IEnumerable<CoverEntity> target)
    {
        target.CallService("close_cover");
    }

    ///<summary>Tilts a cover to close.</summary>
    public static void CloseCoverTilt(this CoverEntity target)
    {
        target.CallService("close_cover_tilt");
    }

    ///<summary>Tilts a cover to close.</summary>
    public static void CloseCoverTilt(this IEnumerable<CoverEntity> target)
    {
        target.CallService("close_cover_tilt");
    }

    ///<summary>Opens a cover.</summary>
    public static void OpenCover(this CoverEntity target)
    {
        target.CallService("open_cover");
    }

    ///<summary>Opens a cover.</summary>
    public static void OpenCover(this IEnumerable<CoverEntity> target)
    {
        target.CallService("open_cover");
    }

    ///<summary>Tilts a cover open.</summary>
    public static void OpenCoverTilt(this CoverEntity target)
    {
        target.CallService("open_cover_tilt");
    }

    ///<summary>Tilts a cover open.</summary>
    public static void OpenCoverTilt(this IEnumerable<CoverEntity> target)
    {
        target.CallService("open_cover_tilt");
    }

    ///<summary>Moves a cover to a specific position.</summary>
    public static void SetCoverPosition(this CoverEntity target, CoverSetCoverPositionParameters data)
    {
        target.CallService("set_cover_position", data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    public static void SetCoverPosition(this IEnumerable<CoverEntity> target, CoverSetCoverPositionParameters data)
    {
        target.CallService("set_cover_position", data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The CoverEntity to call this service for</param>
    ///<param name="position">Target position.</param>
    public static void SetCoverPosition(this CoverEntity target, long position)
    {
        target.CallService("set_cover_position", new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The IEnumerable&lt;CoverEntity&gt; to call this service for</param>
    ///<param name="position">Target position.</param>
    public static void SetCoverPosition(this IEnumerable<CoverEntity> target, long position)
    {
        target.CallService("set_cover_position", new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    public static void SetCoverTiltPosition(this CoverEntity target, CoverSetCoverTiltPositionParameters data)
    {
        target.CallService("set_cover_tilt_position", data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    public static void SetCoverTiltPosition(this IEnumerable<CoverEntity> target, CoverSetCoverTiltPositionParameters data)
    {
        target.CallService("set_cover_tilt_position", data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The CoverEntity to call this service for</param>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public static void SetCoverTiltPosition(this CoverEntity target, long tiltPosition)
    {
        target.CallService("set_cover_tilt_position", new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The IEnumerable&lt;CoverEntity&gt; to call this service for</param>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public static void SetCoverTiltPosition(this IEnumerable<CoverEntity> target, long tiltPosition)
    {
        target.CallService("set_cover_tilt_position", new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Stops the cover movement.</summary>
    public static void StopCover(this CoverEntity target)
    {
        target.CallService("stop_cover");
    }

    ///<summary>Stops the cover movement.</summary>
    public static void StopCover(this IEnumerable<CoverEntity> target)
    {
        target.CallService("stop_cover");
    }

    ///<summary>Stops a tilting cover movement.</summary>
    public static void StopCoverTilt(this CoverEntity target)
    {
        target.CallService("stop_cover_tilt");
    }

    ///<summary>Stops a tilting cover movement.</summary>
    public static void StopCoverTilt(this IEnumerable<CoverEntity> target)
    {
        target.CallService("stop_cover_tilt");
    }

    ///<summary>Toggles a cover open/closed.</summary>
    public static void Toggle(this CoverEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a cover open/closed.</summary>
    public static void Toggle(this IEnumerable<CoverEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    public static void ToggleCoverTilt(this CoverEntity target)
    {
        target.CallService("toggle_cover_tilt");
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    public static void ToggleCoverTilt(this IEnumerable<CoverEntity> target)
    {
        target.CallService("toggle_cover_tilt");
    }
}

public static class InputBooleanEntityExtensionMethods
{
    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this InputBooleanEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IEnumerable<InputBooleanEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this InputBooleanEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IEnumerable<InputBooleanEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this InputBooleanEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IEnumerable<InputBooleanEntity> target)
    {
        target.CallService("turn_on");
    }
}

public static class InputDatetimeEntityExtensionMethods
{
    ///<summary>Sets the date and/or time.</summary>
    public static void SetDatetime(this InputDatetimeEntity target, InputDatetimeSetDatetimeParameters data)
    {
        target.CallService("set_datetime", data);
    }

    ///<summary>Sets the date and/or time.</summary>
    public static void SetDatetime(this IEnumerable<InputDatetimeEntity> target, InputDatetimeSetDatetimeParameters data)
    {
        target.CallService("set_datetime", data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The InputDatetimeEntity to call this service for</param>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public static void SetDatetime(this InputDatetimeEntity target, string? date = null, DateTime? time = null, string? datetime = null, long? timestamp = null)
    {
        target.CallService("set_datetime", new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The IEnumerable&lt;InputDatetimeEntity&gt; to call this service for</param>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public static void SetDatetime(this IEnumerable<InputDatetimeEntity> target, string? date = null, DateTime? time = null, string? datetime = null, long? timestamp = null)
    {
        target.CallService("set_datetime", new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public static class InputNumberEntityExtensionMethods
{
    ///<summary>Decrements the current value by 1 step.</summary>
    public static void Decrement(this InputNumberEntity target)
    {
        target.CallService("decrement");
    }

    ///<summary>Decrements the current value by 1 step.</summary>
    public static void Decrement(this IEnumerable<InputNumberEntity> target)
    {
        target.CallService("decrement");
    }

    ///<summary>Increments the value by 1 step.</summary>
    public static void Increment(this InputNumberEntity target)
    {
        target.CallService("increment");
    }

    ///<summary>Increments the value by 1 step.</summary>
    public static void Increment(this IEnumerable<InputNumberEntity> target)
    {
        target.CallService("increment");
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this InputNumberEntity target, InputNumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IEnumerable<InputNumberEntity> target, InputNumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The InputNumberEntity to call this service for</param>
    ///<param name="value">The target value.</param>
    public static void SetValue(this InputNumberEntity target, double value)
    {
        target.CallService("set_value", new InputNumberSetValueParameters { Value = value });
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IEnumerable&lt;InputNumberEntity&gt; to call this service for</param>
    ///<param name="value">The target value.</param>
    public static void SetValue(this IEnumerable<InputNumberEntity> target, double value)
    {
        target.CallService("set_value", new InputNumberSetValueParameters { Value = value });
    }
}

public static class InputTextEntityExtensionMethods
{
    ///<summary>Sets the value.</summary>
    public static void SetValue(this InputTextEntity target, InputTextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IEnumerable<InputTextEntity> target, InputTextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The InputTextEntity to call this service for</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public static void SetValue(this InputTextEntity target, string value)
    {
        target.CallService("set_value", new InputTextSetValueParameters { Value = value });
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IEnumerable&lt;InputTextEntity&gt; to call this service for</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public static void SetValue(this IEnumerable<InputTextEntity> target, string value)
    {
        target.CallService("set_value", new InputTextSetValueParameters { Value = value });
    }
}

public static class KodiEntityExtensionMethods
{
    ///<summary>Adds music to the default playlist (i.e. playlistid=0).</summary>
    public static void AddToPlaylist(this MediaPlayerEntity target, KodiAddToPlaylistParameters data)
    {
        target.CallService("add_to_playlist", data);
    }

    ///<summary>Adds music to the default playlist (i.e. playlistid=0).</summary>
    public static void AddToPlaylist(this IEnumerable<MediaPlayerEntity> target, KodiAddToPlaylistParameters data)
    {
        target.CallService("add_to_playlist", data);
    }

    ///<summary>Adds music to the default playlist (i.e. playlistid=0).</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="mediaType">Media type identifier. It must be one of SONG or ALBUM. eg: ALBUM</param>
    ///<param name="mediaId">Unique Id of the media entry to add (`songid` or albumid`). If not defined, `media_name` and `artist_name` are needed to search the Kodi music library. eg: 123456</param>
    ///<param name="mediaName">Optional media name for filtering media. Can be &apos;ALL&apos; when `media_type` is &apos;ALBUM&apos; and `artist_name` is specified, to add all songs from one artist. eg: Highway to Hell</param>
    ///<param name="artistName">Optional artist name for filtering media. eg: AC/DC</param>
    public static void AddToPlaylist(this MediaPlayerEntity target, string mediaType, string? mediaId = null, string? mediaName = null, string? artistName = null)
    {
        target.CallService("add_to_playlist", new KodiAddToPlaylistParameters { MediaType = mediaType, MediaId = mediaId, MediaName = mediaName, ArtistName = artistName });
    }

    ///<summary>Adds music to the default playlist (i.e. playlistid=0).</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="mediaType">Media type identifier. It must be one of SONG or ALBUM. eg: ALBUM</param>
    ///<param name="mediaId">Unique Id of the media entry to add (`songid` or albumid`). If not defined, `media_name` and `artist_name` are needed to search the Kodi music library. eg: 123456</param>
    ///<param name="mediaName">Optional media name for filtering media. Can be &apos;ALL&apos; when `media_type` is &apos;ALBUM&apos; and `artist_name` is specified, to add all songs from one artist. eg: Highway to Hell</param>
    ///<param name="artistName">Optional artist name for filtering media. eg: AC/DC</param>
    public static void AddToPlaylist(this IEnumerable<MediaPlayerEntity> target, string mediaType, string? mediaId = null, string? mediaName = null, string? artistName = null)
    {
        target.CallService("add_to_playlist", new KodiAddToPlaylistParameters { MediaType = mediaType, MediaId = mediaId, MediaName = mediaName, ArtistName = artistName });
    }

    ///<summary>Calls a Kodi JSONRPC API method with optional parameters. Results of the Kodi API call will be redirected in a Home Assistant event: `kodi_call_method_result`.</summary>
    public static void CallMethod(this MediaPlayerEntity target, KodiCallMethodParameters data)
    {
        target.CallService("call_method", data);
    }

    ///<summary>Calls a Kodi JSONRPC API method with optional parameters. Results of the Kodi API call will be redirected in a Home Assistant event: `kodi_call_method_result`.</summary>
    public static void CallMethod(this IEnumerable<MediaPlayerEntity> target, KodiCallMethodParameters data)
    {
        target.CallService("call_method", data);
    }

    ///<summary>Calls a Kodi JSONRPC API method with optional parameters. Results of the Kodi API call will be redirected in a Home Assistant event: `kodi_call_method_result`.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="method">Name of the Kodi JSONRPC API method to be called. eg: VideoLibrary.GetRecentlyAddedEpisodes</param>
    public static void CallMethod(this MediaPlayerEntity target, string @method)
    {
        target.CallService("call_method", new KodiCallMethodParameters { Method = @method });
    }

    ///<summary>Calls a Kodi JSONRPC API method with optional parameters. Results of the Kodi API call will be redirected in a Home Assistant event: `kodi_call_method_result`.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="method">Name of the Kodi JSONRPC API method to be called. eg: VideoLibrary.GetRecentlyAddedEpisodes</param>
    public static void CallMethod(this IEnumerable<MediaPlayerEntity> target, string @method)
    {
        target.CallService("call_method", new KodiCallMethodParameters { Method = @method });
    }
}

public static class LandroidCloudEntityExtensionMethods
{
    ///<summary>Set device config parameters</summary>
    public static void Config(this LawnMowerEntity target, LandroidCloudConfigParameters data)
    {
        target.CallService("config", data);
    }

    ///<summary>Set device config parameters</summary>
    public static void Config(this IEnumerable<LawnMowerEntity> target, LandroidCloudConfigParameters data)
    {
        target.CallService("config", data);
    }

    ///<summary>Set device config parameters</summary>
    ///<param name="target">The LawnMowerEntity to call this service for</param>
    ///<param name="multizoneDistances">Set multizone distance array in meters. 0 = Disabled. Format: 15, 80, 120, 155 eg: 15, 80, 120, 155</param>
    ///<param name="multizoneProbabilities">Set multizone probabilities array. Format: 50, 10, 20, 20 eg: 50, 10, 20, 20</param>
    public static void Config(this LawnMowerEntity target, string? multizoneDistances = null, string? multizoneProbabilities = null)
    {
        target.CallService("config", new LandroidCloudConfigParameters { MultizoneDistances = multizoneDistances, MultizoneProbabilities = multizoneProbabilities });
    }

    ///<summary>Set device config parameters</summary>
    ///<param name="target">The IEnumerable&lt;LawnMowerEntity&gt; to call this service for</param>
    ///<param name="multizoneDistances">Set multizone distance array in meters. 0 = Disabled. Format: 15, 80, 120, 155 eg: 15, 80, 120, 155</param>
    ///<param name="multizoneProbabilities">Set multizone probabilities array. Format: 50, 10, 20, 20 eg: 50, 10, 20, 20</param>
    public static void Config(this IEnumerable<LawnMowerEntity> target, string? multizoneDistances = null, string? multizoneProbabilities = null)
    {
        target.CallService("config", new LandroidCloudConfigParameters { MultizoneDistances = multizoneDistances, MultizoneProbabilities = multizoneProbabilities });
    }

    ///<summary>Start One-Time-Schedule (if supported)</summary>
    public static void Ots(this LawnMowerEntity target, LandroidCloudOtsParameters data)
    {
        target.CallService("ots", data);
    }

    ///<summary>Start One-Time-Schedule (if supported)</summary>
    public static void Ots(this IEnumerable<LawnMowerEntity> target, LandroidCloudOtsParameters data)
    {
        target.CallService("ots", data);
    }

    ///<summary>Start One-Time-Schedule (if supported)</summary>
    ///<param name="target">The LawnMowerEntity to call this service for</param>
    ///<param name="boundary">Do boundary (Edge/Border cut) eg: True</param>
    ///<param name="runtime">Run time in minutes before returning to charging station eg: 60</param>
    public static void Ots(this LawnMowerEntity target, bool boundary, long runtime)
    {
        target.CallService("ots", new LandroidCloudOtsParameters { Boundary = boundary, Runtime = runtime });
    }

    ///<summary>Start One-Time-Schedule (if supported)</summary>
    ///<param name="target">The IEnumerable&lt;LawnMowerEntity&gt; to call this service for</param>
    ///<param name="boundary">Do boundary (Edge/Border cut) eg: True</param>
    ///<param name="runtime">Run time in minutes before returning to charging station eg: 60</param>
    public static void Ots(this IEnumerable<LawnMowerEntity> target, bool boundary, long runtime)
    {
        target.CallService("ots", new LandroidCloudOtsParameters { Boundary = boundary, Runtime = runtime });
    }

    ///<summary>Set or change the schedule of the mower</summary>
    public static void Schedule(this LawnMowerEntity target, LandroidCloudScheduleParameters data)
    {
        target.CallService("schedule", data);
    }

    ///<summary>Set or change the schedule of the mower</summary>
    public static void Schedule(this IEnumerable<LawnMowerEntity> target, LandroidCloudScheduleParameters data)
    {
        target.CallService("schedule", data);
    }

    ///<summary>Set or change the schedule of the mower</summary>
    ///<param name="target">The LawnMowerEntity to call this service for</param>
    ///<param name="type">Change primary or secondary schedule? eg: primary</param>
    ///<param name="mondayStart">Starting time for mondays eg: 11:00</param>
    ///<param name="mondayEnd">When should the schedule stop on mondays? eg: 16:00</param>
    ///<param name="mondayBoundary">Should we start this schedule by cutting the boundary (edge/border cut)? eg: False</param>
    ///<param name="tuesdayStart">Starting time for tuesdays eg: 11:00</param>
    ///<param name="tuesdayEnd">When should the schedule stop on tuesdays? eg: 16:00</param>
    ///<param name="tuesdayBoundary">Should we start this schedule by cutting the boundary (edge/border cut)? eg: False</param>
    ///<param name="wednesdayStart">Starting time for wednesdays eg: 11:00</param>
    ///<param name="wednesdayEnd">When should the schedule stop on wednesdays? eg: 16:00</param>
    ///<param name="wednesdayBoundary">Should we start this schedule by cutting the boundary (edge/border cut)? eg: False</param>
    ///<param name="thursdayStart">Starting time for thursdays eg: 11:00</param>
    ///<param name="thursdayEnd">When should the schedule stop on thursdays? eg: 16:00</param>
    ///<param name="thursdayBoundary">Should we start this schedule by cutting the boundary (edge/border cut)? eg: False</param>
    ///<param name="fridayStart">Starting time for fridays eg: 11:00</param>
    ///<param name="fridayEnd">When should the schedule stop on fridays? eg: 16:00</param>
    ///<param name="fridayBoundary">Should we start this schedule by cutting the boundary (edge/border cut)? eg: False</param>
    ///<param name="saturdayStart">Starting time for saturdays eg: 11:00</param>
    ///<param name="saturdayEnd">When should the schedule stop on saturdays? eg: 16:00</param>
    ///<param name="saturdayBoundary">Should we start this schedule by cutting the boundary (edge/border cut)? eg: False</param>
    ///<param name="sundayStart">Starting time for sundays eg: 11:00</param>
    ///<param name="sundayEnd">When should the schedule stop on sundays? eg: 16:00</param>
    ///<param name="sundayBoundary">Should we start this schedule by cutting the boundary (edge/border cut)? eg: False</param>
    public static void Schedule(this LawnMowerEntity target, object @type, DateTime? mondayStart = null, DateTime? mondayEnd = null, bool? mondayBoundary = null, DateTime? tuesdayStart = null, DateTime? tuesdayEnd = null, bool? tuesdayBoundary = null, DateTime? wednesdayStart = null, DateTime? wednesdayEnd = null, bool? wednesdayBoundary = null, DateTime? thursdayStart = null, DateTime? thursdayEnd = null, bool? thursdayBoundary = null, DateTime? fridayStart = null, DateTime? fridayEnd = null, bool? fridayBoundary = null, DateTime? saturdayStart = null, DateTime? saturdayEnd = null, bool? saturdayBoundary = null, DateTime? sundayStart = null, DateTime? sundayEnd = null, bool? sundayBoundary = null)
    {
        target.CallService("schedule", new LandroidCloudScheduleParameters { Type = @type, MondayStart = mondayStart, MondayEnd = mondayEnd, MondayBoundary = mondayBoundary, TuesdayStart = tuesdayStart, TuesdayEnd = tuesdayEnd, TuesdayBoundary = tuesdayBoundary, WednesdayStart = wednesdayStart, WednesdayEnd = wednesdayEnd, WednesdayBoundary = wednesdayBoundary, ThursdayStart = thursdayStart, ThursdayEnd = thursdayEnd, ThursdayBoundary = thursdayBoundary, FridayStart = fridayStart, FridayEnd = fridayEnd, FridayBoundary = fridayBoundary, SaturdayStart = saturdayStart, SaturdayEnd = saturdayEnd, SaturdayBoundary = saturdayBoundary, SundayStart = sundayStart, SundayEnd = sundayEnd, SundayBoundary = sundayBoundary });
    }

    ///<summary>Set or change the schedule of the mower</summary>
    ///<param name="target">The IEnumerable&lt;LawnMowerEntity&gt; to call this service for</param>
    ///<param name="type">Change primary or secondary schedule? eg: primary</param>
    ///<param name="mondayStart">Starting time for mondays eg: 11:00</param>
    ///<param name="mondayEnd">When should the schedule stop on mondays? eg: 16:00</param>
    ///<param name="mondayBoundary">Should we start this schedule by cutting the boundary (edge/border cut)? eg: False</param>
    ///<param name="tuesdayStart">Starting time for tuesdays eg: 11:00</param>
    ///<param name="tuesdayEnd">When should the schedule stop on tuesdays? eg: 16:00</param>
    ///<param name="tuesdayBoundary">Should we start this schedule by cutting the boundary (edge/border cut)? eg: False</param>
    ///<param name="wednesdayStart">Starting time for wednesdays eg: 11:00</param>
    ///<param name="wednesdayEnd">When should the schedule stop on wednesdays? eg: 16:00</param>
    ///<param name="wednesdayBoundary">Should we start this schedule by cutting the boundary (edge/border cut)? eg: False</param>
    ///<param name="thursdayStart">Starting time for thursdays eg: 11:00</param>
    ///<param name="thursdayEnd">When should the schedule stop on thursdays? eg: 16:00</param>
    ///<param name="thursdayBoundary">Should we start this schedule by cutting the boundary (edge/border cut)? eg: False</param>
    ///<param name="fridayStart">Starting time for fridays eg: 11:00</param>
    ///<param name="fridayEnd">When should the schedule stop on fridays? eg: 16:00</param>
    ///<param name="fridayBoundary">Should we start this schedule by cutting the boundary (edge/border cut)? eg: False</param>
    ///<param name="saturdayStart">Starting time for saturdays eg: 11:00</param>
    ///<param name="saturdayEnd">When should the schedule stop on saturdays? eg: 16:00</param>
    ///<param name="saturdayBoundary">Should we start this schedule by cutting the boundary (edge/border cut)? eg: False</param>
    ///<param name="sundayStart">Starting time for sundays eg: 11:00</param>
    ///<param name="sundayEnd">When should the schedule stop on sundays? eg: 16:00</param>
    ///<param name="sundayBoundary">Should we start this schedule by cutting the boundary (edge/border cut)? eg: False</param>
    public static void Schedule(this IEnumerable<LawnMowerEntity> target, object @type, DateTime? mondayStart = null, DateTime? mondayEnd = null, bool? mondayBoundary = null, DateTime? tuesdayStart = null, DateTime? tuesdayEnd = null, bool? tuesdayBoundary = null, DateTime? wednesdayStart = null, DateTime? wednesdayEnd = null, bool? wednesdayBoundary = null, DateTime? thursdayStart = null, DateTime? thursdayEnd = null, bool? thursdayBoundary = null, DateTime? fridayStart = null, DateTime? fridayEnd = null, bool? fridayBoundary = null, DateTime? saturdayStart = null, DateTime? saturdayEnd = null, bool? saturdayBoundary = null, DateTime? sundayStart = null, DateTime? sundayEnd = null, bool? sundayBoundary = null)
    {
        target.CallService("schedule", new LandroidCloudScheduleParameters { Type = @type, MondayStart = mondayStart, MondayEnd = mondayEnd, MondayBoundary = mondayBoundary, TuesdayStart = tuesdayStart, TuesdayEnd = tuesdayEnd, TuesdayBoundary = tuesdayBoundary, WednesdayStart = wednesdayStart, WednesdayEnd = wednesdayEnd, WednesdayBoundary = wednesdayBoundary, ThursdayStart = thursdayStart, ThursdayEnd = thursdayEnd, ThursdayBoundary = thursdayBoundary, FridayStart = fridayStart, FridayEnd = fridayEnd, FridayBoundary = fridayBoundary, SaturdayStart = saturdayStart, SaturdayEnd = saturdayEnd, SaturdayBoundary = saturdayBoundary, SundayStart = sundayStart, SundayEnd = sundayEnd, SundayBoundary = sundayBoundary });
    }

    ///<summary> Send a raw JSON command to the device</summary>
    public static void SendRaw(this LawnMowerEntity target, LandroidCloudSendRawParameters data)
    {
        target.CallService("send_raw", data);
    }

    ///<summary> Send a raw JSON command to the device</summary>
    public static void SendRaw(this IEnumerable<LawnMowerEntity> target, LandroidCloudSendRawParameters data)
    {
        target.CallService("send_raw", data);
    }

    ///<summary> Send a raw JSON command to the device</summary>
    ///<param name="target">The LawnMowerEntity to call this service for</param>
    ///<param name="json">Data to send, formatted as valid JSON eg: {&apos;cmd&apos;: 1}</param>
    public static void SendRaw(this LawnMowerEntity target, string json)
    {
        target.CallService("send_raw", new LandroidCloudSendRawParameters { Json = json });
    }

    ///<summary> Send a raw JSON command to the device</summary>
    ///<param name="target">The IEnumerable&lt;LawnMowerEntity&gt; to call this service for</param>
    ///<param name="json">Data to send, formatted as valid JSON eg: {&apos;cmd&apos;: 1}</param>
    public static void SendRaw(this IEnumerable<LawnMowerEntity> target, string json)
    {
        target.CallService("send_raw", new LandroidCloudSendRawParameters { Json = json });
    }
}

public static class LawnMowerEntityExtensionMethods
{
    ///<summary>Stops the mowing task and returns to the dock.</summary>
    public static void Dock(this LawnMowerEntity target)
    {
        target.CallService("dock");
    }

    ///<summary>Stops the mowing task and returns to the dock.</summary>
    public static void Dock(this IEnumerable<LawnMowerEntity> target)
    {
        target.CallService("dock");
    }

    ///<summary>Pauses the mowing task.</summary>
    public static void Pause(this LawnMowerEntity target)
    {
        target.CallService("pause");
    }

    ///<summary>Pauses the mowing task.</summary>
    public static void Pause(this IEnumerable<LawnMowerEntity> target)
    {
        target.CallService("pause");
    }

    ///<summary>Starts the mowing task.</summary>
    public static void StartMowing(this LawnMowerEntity target)
    {
        target.CallService("start_mowing");
    }

    ///<summary>Starts the mowing task.</summary>
    public static void StartMowing(this IEnumerable<LawnMowerEntity> target)
    {
        target.CallService("start_mowing");
    }
}

public static class LightEntityExtensionMethods
{
    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    public static void Toggle(this LightEntity target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    public static void Toggle(this IEnumerable<LightEntity> target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The LightEntity to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="advancedFields"></param>
    public static void Toggle(this LightEntity target, long? transition = null, object? rgbColor = null, object? kelvin = null, long? brightnessPct = null, string? effect = null, object? advancedFields = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, Effect = effect, AdvancedFields = advancedFields });
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The IEnumerable&lt;LightEntity&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="advancedFields"></param>
    public static void Toggle(this IEnumerable<LightEntity> target, long? transition = null, object? rgbColor = null, object? kelvin = null, long? brightnessPct = null, string? effect = null, object? advancedFields = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, Effect = effect, AdvancedFields = advancedFields });
    }

    ///<summary>Turn off one or more lights.</summary>
    public static void TurnOff(this LightEntity target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turn off one or more lights.</summary>
    public static void TurnOff(this IEnumerable<LightEntity> target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The LightEntity to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="advancedFields"></param>
    public static void TurnOff(this LightEntity target, long? transition = null, object? advancedFields = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, AdvancedFields = advancedFields });
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The IEnumerable&lt;LightEntity&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="advancedFields"></param>
    public static void TurnOff(this IEnumerable<LightEntity> target, long? transition = null, object? advancedFields = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, AdvancedFields = advancedFields });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    public static void TurnOn(this LightEntity target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    public static void TurnOn(this IEnumerable<LightEntity> target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The LightEntity to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="advancedFields"></param>
    public static void TurnOn(this LightEntity target, long? transition = null, object? rgbColor = null, object? kelvin = null, long? brightnessPct = null, long? brightnessStepPct = null, string? effect = null, object? advancedFields = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, AdvancedFields = advancedFields });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The IEnumerable&lt;LightEntity&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="advancedFields"></param>
    public static void TurnOn(this IEnumerable<LightEntity> target, long? transition = null, object? rgbColor = null, object? kelvin = null, long? brightnessPct = null, long? brightnessStepPct = null, string? effect = null, object? advancedFields = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, AdvancedFields = advancedFields });
    }
}

public static class LockEntityExtensionMethods
{
    ///<summary>Locks a lock.</summary>
    public static void Lock(this LockEntity target, LockLockParameters data)
    {
        target.CallService("lock", data);
    }

    ///<summary>Locks a lock.</summary>
    public static void Lock(this IEnumerable<LockEntity> target, LockLockParameters data)
    {
        target.CallService("lock", data);
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The LockEntity to call this service for</param>
    ///<param name="code">Code used to lock the lock. eg: 1234</param>
    public static void Lock(this LockEntity target, string? code = null)
    {
        target.CallService("lock", new LockLockParameters { Code = code });
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The IEnumerable&lt;LockEntity&gt; to call this service for</param>
    ///<param name="code">Code used to lock the lock. eg: 1234</param>
    public static void Lock(this IEnumerable<LockEntity> target, string? code = null)
    {
        target.CallService("lock", new LockLockParameters { Code = code });
    }

    ///<summary>Opens a lock.</summary>
    public static void Open(this LockEntity target, LockOpenParameters data)
    {
        target.CallService("open", data);
    }

    ///<summary>Opens a lock.</summary>
    public static void Open(this IEnumerable<LockEntity> target, LockOpenParameters data)
    {
        target.CallService("open", data);
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The LockEntity to call this service for</param>
    ///<param name="code">Code used to open the lock. eg: 1234</param>
    public static void Open(this LockEntity target, string? code = null)
    {
        target.CallService("open", new LockOpenParameters { Code = code });
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The IEnumerable&lt;LockEntity&gt; to call this service for</param>
    ///<param name="code">Code used to open the lock. eg: 1234</param>
    public static void Open(this IEnumerable<LockEntity> target, string? code = null)
    {
        target.CallService("open", new LockOpenParameters { Code = code });
    }

    ///<summary>Unlocks a lock.</summary>
    public static void Unlock(this LockEntity target, LockUnlockParameters data)
    {
        target.CallService("unlock", data);
    }

    ///<summary>Unlocks a lock.</summary>
    public static void Unlock(this IEnumerable<LockEntity> target, LockUnlockParameters data)
    {
        target.CallService("unlock", data);
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The LockEntity to call this service for</param>
    ///<param name="code">Code used to unlock the lock. eg: 1234</param>
    public static void Unlock(this LockEntity target, string? code = null)
    {
        target.CallService("unlock", new LockUnlockParameters { Code = code });
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The IEnumerable&lt;LockEntity&gt; to call this service for</param>
    ///<param name="code">Code used to unlock the lock. eg: 1234</param>
    public static void Unlock(this IEnumerable<LockEntity> target, string? code = null)
    {
        target.CallService("unlock", new LockUnlockParameters { Code = code });
    }
}

public static class MediaPlayerEntityExtensionMethods
{
    ///<summary>Clears the playlist.</summary>
    public static void ClearPlaylist(this MediaPlayerEntity target)
    {
        target.CallService("clear_playlist");
    }

    ///<summary>Clears the playlist.</summary>
    public static void ClearPlaylist(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("clear_playlist");
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this MediaPlayerEntity target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IEnumerable<MediaPlayerEntity> target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this MediaPlayerEntity target, string groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IEnumerable<MediaPlayerEntity> target, string groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this MediaPlayerEntity target)
    {
        target.CallService("media_next_track");
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_next_track");
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this MediaPlayerEntity target)
    {
        target.CallService("media_pause");
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_pause");
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this MediaPlayerEntity target)
    {
        target.CallService("media_play");
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_play");
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this MediaPlayerEntity target)
    {
        target.CallService("media_play_pause");
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_play_pause");
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this MediaPlayerEntity target)
    {
        target.CallService("media_previous_track");
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_previous_track");
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this MediaPlayerEntity target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IEnumerable<MediaPlayerEntity> target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this MediaPlayerEntity target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IEnumerable<MediaPlayerEntity> target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this MediaPlayerEntity target)
    {
        target.CallService("media_stop");
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_stop");
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this MediaPlayerEntity target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IEnumerable<MediaPlayerEntity> target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this MediaPlayerEntity target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IEnumerable<MediaPlayerEntity> target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    public static void RepeatSet(this MediaPlayerEntity target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    public static void RepeatSet(this IEnumerable<MediaPlayerEntity> target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this MediaPlayerEntity target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this IEnumerable<MediaPlayerEntity> target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this MediaPlayerEntity target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IEnumerable<MediaPlayerEntity> target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this MediaPlayerEntity target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IEnumerable<MediaPlayerEntity> target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this MediaPlayerEntity target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IEnumerable<MediaPlayerEntity> target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this MediaPlayerEntity target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IEnumerable<MediaPlayerEntity> target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    public static void ShuffleSet(this MediaPlayerEntity target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    public static void ShuffleSet(this IEnumerable<MediaPlayerEntity> target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public static void ShuffleSet(this MediaPlayerEntity target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public static void ShuffleSet(this IEnumerable<MediaPlayerEntity> target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this MediaPlayerEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this MediaPlayerEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this MediaPlayerEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this MediaPlayerEntity target)
    {
        target.CallService("unjoin");
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("unjoin");
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this MediaPlayerEntity target)
    {
        target.CallService("volume_down");
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("volume_down");
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this MediaPlayerEntity target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IEnumerable<MediaPlayerEntity> target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this MediaPlayerEntity target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IEnumerable<MediaPlayerEntity> target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this MediaPlayerEntity target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IEnumerable<MediaPlayerEntity> target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this MediaPlayerEntity target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IEnumerable<MediaPlayerEntity> target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this MediaPlayerEntity target)
    {
        target.CallService("volume_up");
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("volume_up");
    }
}

public static class NumberEntityExtensionMethods
{
    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this NumberEntity target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this IEnumerable<NumberEntity> target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The NumberEntity to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this NumberEntity target, string? value = null)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The IEnumerable&lt;NumberEntity&gt; to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this IEnumerable<NumberEntity> target, string? value = null)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }
}

public static class RemoteEntityExtensionMethods
{
    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this RemoteEntity target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this IEnumerable<RemoteEntity> target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The RemoteEntity to call this service for</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public static void DeleteCommand(this RemoteEntity target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The IEnumerable&lt;RemoteEntity&gt; to call this service for</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public static void DeleteCommand(this IEnumerable<RemoteEntity> target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this RemoteEntity target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this IEnumerable<RemoteEntity> target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The RemoteEntity to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this RemoteEntity target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The IEnumerable&lt;RemoteEntity&gt; to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this IEnumerable<RemoteEntity> target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this RemoteEntity target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this IEnumerable<RemoteEntity> target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The RemoteEntity to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this RemoteEntity target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The IEnumerable&lt;RemoteEntity&gt; to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this IEnumerable<RemoteEntity> target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Toggles a device on/off.</summary>
    public static void Toggle(this RemoteEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a device on/off.</summary>
    public static void Toggle(this IEnumerable<RemoteEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns the device off.</summary>
    public static void TurnOff(this RemoteEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns the device off.</summary>
    public static void TurnOff(this IEnumerable<RemoteEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Sends the power on command.</summary>
    public static void TurnOn(this RemoteEntity target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the power on command.</summary>
    public static void TurnOn(this IEnumerable<RemoteEntity> target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The RemoteEntity to call this service for</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public static void TurnOn(this RemoteEntity target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The IEnumerable&lt;RemoteEntity&gt; to call this service for</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public static void TurnOn(this IEnumerable<RemoteEntity> target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }
}

public static class SceneEntityExtensionMethods
{
    ///<summary>Deletes a dynamically created scene.</summary>
    public static void Delete(this SceneEntity target)
    {
        target.CallService("delete");
    }

    ///<summary>Deletes a dynamically created scene.</summary>
    public static void Delete(this IEnumerable<SceneEntity> target)
    {
        target.CallService("delete");
    }

    ///<summary>Activates a scene.</summary>
    public static void TurnOn(this SceneEntity target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activates a scene.</summary>
    public static void TurnOn(this IEnumerable<SceneEntity> target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The SceneEntity to call this service for</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public static void TurnOn(this SceneEntity target, long? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The IEnumerable&lt;SceneEntity&gt; to call this service for</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public static void TurnOn(this IEnumerable<SceneEntity> target, long? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }
}

public static class ScriptEntityExtensionMethods
{
    ///<summary>Toggle a script. Starts it, if isn&apos;t running, stops it otherwise.</summary>
    public static void Toggle(this ScriptEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggle a script. Starts it, if isn&apos;t running, stops it otherwise.</summary>
    public static void Toggle(this IEnumerable<ScriptEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Stops a running script.</summary>
    public static void TurnOff(this ScriptEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Stops a running script.</summary>
    public static void TurnOff(this IEnumerable<ScriptEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    public static void TurnOn(this ScriptEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    public static void TurnOn(this IEnumerable<ScriptEntity> target)
    {
        target.CallService("turn_on");
    }
}

public static class SelectEntityExtensionMethods
{
    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this SelectEntity target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IEnumerable<SelectEntity> target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this SelectEntity target)
    {
        target.CallService("select_last");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IEnumerable<SelectEntity> target)
    {
        target.CallService("select_last");
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this SelectEntity target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this IEnumerable<SelectEntity> target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The SelectEntity to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this SelectEntity target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The IEnumerable&lt;SelectEntity&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this IEnumerable<SelectEntity> target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this SelectEntity target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IEnumerable<SelectEntity> target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The SelectEntity to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this SelectEntity target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IEnumerable&lt;SelectEntity&gt; to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IEnumerable<SelectEntity> target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this SelectEntity target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IEnumerable<SelectEntity> target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The SelectEntity to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this SelectEntity target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IEnumerable&lt;SelectEntity&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this IEnumerable<SelectEntity> target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public static class SwitchEntityExtensionMethods
{
    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this SwitchEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this IEnumerable<SwitchEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this SwitchEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this IEnumerable<SwitchEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this SwitchEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this IEnumerable<SwitchEntity> target)
    {
        target.CallService("turn_on");
    }
}

public static class TadoEntityExtensionMethods
{
    ///<summary>Sets the temperature offset of climate entities.</summary>
    public static void SetClimateTemperatureOffset(this ClimateEntity target, TadoSetClimateTemperatureOffsetParameters data)
    {
        target.CallService("set_climate_temperature_offset", data);
    }

    ///<summary>Sets the temperature offset of climate entities.</summary>
    public static void SetClimateTemperatureOffset(this IEnumerable<ClimateEntity> target, TadoSetClimateTemperatureOffsetParameters data)
    {
        target.CallService("set_climate_temperature_offset", data);
    }

    ///<summary>Sets the temperature offset of climate entities.</summary>
    ///<param name="target">The ClimateEntity to call this service for</param>
    ///<param name="offset">Offset you would like (depending on your device).</param>
    public static void SetClimateTemperatureOffset(this ClimateEntity target, double? offset = null)
    {
        target.CallService("set_climate_temperature_offset", new TadoSetClimateTemperatureOffsetParameters { Offset = offset });
    }

    ///<summary>Sets the temperature offset of climate entities.</summary>
    ///<param name="target">The IEnumerable&lt;ClimateEntity&gt; to call this service for</param>
    ///<param name="offset">Offset you would like (depending on your device).</param>
    public static void SetClimateTemperatureOffset(this IEnumerable<ClimateEntity> target, double? offset = null)
    {
        target.CallService("set_climate_temperature_offset", new TadoSetClimateTemperatureOffsetParameters { Offset = offset });
    }

    ///<summary>Turns on climate entities for a set time.</summary>
    public static void SetClimateTimer(this ClimateEntity target, TadoSetClimateTimerParameters data)
    {
        target.CallService("set_climate_timer", data);
    }

    ///<summary>Turns on climate entities for a set time.</summary>
    public static void SetClimateTimer(this IEnumerable<ClimateEntity> target, TadoSetClimateTimerParameters data)
    {
        target.CallService("set_climate_timer", data);
    }

    ///<summary>Turns on climate entities for a set time.</summary>
    ///<param name="target">The ClimateEntity to call this service for</param>
    ///<param name="temperature">Temperature to set climate entity to.</param>
    ///<param name="timePeriod">Choose this or Overlay. Set the time period for the change if you want to be specific. Alternatively use Overlay. eg: 01:30:00</param>
    ///<param name="requestedOverlay">Choose this or Time Period. Allows you to choose an overlay. MANUAL:=Overlay until user removes; NEXT_TIME_BLOCK:=Overlay until next timeblock; TADO_DEFAULT:=Overlay based on tado app setting. eg: MANUAL</param>
    public static void SetClimateTimer(this ClimateEntity target, double temperature, string? timePeriod = null, object? requestedOverlay = null)
    {
        target.CallService("set_climate_timer", new TadoSetClimateTimerParameters { Temperature = temperature, TimePeriod = timePeriod, RequestedOverlay = requestedOverlay });
    }

    ///<summary>Turns on climate entities for a set time.</summary>
    ///<param name="target">The IEnumerable&lt;ClimateEntity&gt; to call this service for</param>
    ///<param name="temperature">Temperature to set climate entity to.</param>
    ///<param name="timePeriod">Choose this or Overlay. Set the time period for the change if you want to be specific. Alternatively use Overlay. eg: 01:30:00</param>
    ///<param name="requestedOverlay">Choose this or Time Period. Allows you to choose an overlay. MANUAL:=Overlay until user removes; NEXT_TIME_BLOCK:=Overlay until next timeblock; TADO_DEFAULT:=Overlay based on tado app setting. eg: MANUAL</param>
    public static void SetClimateTimer(this IEnumerable<ClimateEntity> target, double temperature, string? timePeriod = null, object? requestedOverlay = null)
    {
        target.CallService("set_climate_timer", new TadoSetClimateTimerParameters { Temperature = temperature, TimePeriod = timePeriod, RequestedOverlay = requestedOverlay });
    }
}

public static class TodoEntityExtensionMethods
{
    ///<summary>Add a new to-do list item.</summary>
    public static void AddItem(this TodoEntity target, TodoAddItemParameters data)
    {
        target.CallService("add_item", data);
    }

    ///<summary>Add a new to-do list item.</summary>
    public static void AddItem(this IEnumerable<TodoEntity> target, TodoAddItemParameters data)
    {
        target.CallService("add_item", data);
    }

    ///<summary>Add a new to-do list item.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="item">The name that represents the to-do item. eg: Submit income tax return</param>
    ///<param name="dueDate">The date the to-do item is expected to be completed. eg: 2023-11-17</param>
    ///<param name="dueDatetime">The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</param>
    ///<param name="description">A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</param>
    public static void AddItem(this TodoEntity target, string item, object? dueDate = null, object? dueDatetime = null, string? description = null)
    {
        target.CallService("add_item", new TodoAddItemParameters { Item = item, DueDate = dueDate, DueDatetime = dueDatetime, Description = description });
    }

    ///<summary>Add a new to-do list item.</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="item">The name that represents the to-do item. eg: Submit income tax return</param>
    ///<param name="dueDate">The date the to-do item is expected to be completed. eg: 2023-11-17</param>
    ///<param name="dueDatetime">The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</param>
    ///<param name="description">A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</param>
    public static void AddItem(this IEnumerable<TodoEntity> target, string item, object? dueDate = null, object? dueDatetime = null, string? description = null)
    {
        target.CallService("add_item", new TodoAddItemParameters { Item = item, DueDate = dueDate, DueDatetime = dueDatetime, Description = description });
    }

    ///<summary>Get items on a to-do list.</summary>
    public static void GetItems(this TodoEntity target, TodoGetItemsParameters data)
    {
        target.CallService("get_items", data);
    }

    ///<summary>Get items on a to-do list.</summary>
    public static void GetItems(this IEnumerable<TodoEntity> target, TodoGetItemsParameters data)
    {
        target.CallService("get_items", data);
    }

    ///<summary>Get items on a to-do list.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="status">Only return to-do items with the specified statuses. Returns not completed actions by default. eg: needs_action</param>
    public static void GetItems(this TodoEntity target, object? status = null)
    {
        target.CallService("get_items", new TodoGetItemsParameters { Status = status });
    }

    ///<summary>Get items on a to-do list.</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="status">Only return to-do items with the specified statuses. Returns not completed actions by default. eg: needs_action</param>
    public static void GetItems(this IEnumerable<TodoEntity> target, object? status = null)
    {
        target.CallService("get_items", new TodoGetItemsParameters { Status = status });
    }

    ///<summary>Remove all to-do list items that have been completed.</summary>
    public static void RemoveCompletedItems(this TodoEntity target)
    {
        target.CallService("remove_completed_items");
    }

    ///<summary>Remove all to-do list items that have been completed.</summary>
    public static void RemoveCompletedItems(this IEnumerable<TodoEntity> target)
    {
        target.CallService("remove_completed_items");
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    public static void RemoveItem(this TodoEntity target, TodoRemoveItemParameters data)
    {
        target.CallService("remove_item", data);
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    public static void RemoveItem(this IEnumerable<TodoEntity> target, TodoRemoveItemParameters data)
    {
        target.CallService("remove_item", data);
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="item">The name for the to-do list items.</param>
    public static void RemoveItem(this TodoEntity target, string item)
    {
        target.CallService("remove_item", new TodoRemoveItemParameters { Item = item });
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="item">The name for the to-do list items.</param>
    public static void RemoveItem(this IEnumerable<TodoEntity> target, string item)
    {
        target.CallService("remove_item", new TodoRemoveItemParameters { Item = item });
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    public static void UpdateItem(this TodoEntity target, TodoUpdateItemParameters data)
    {
        target.CallService("update_item", data);
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    public static void UpdateItem(this IEnumerable<TodoEntity> target, TodoUpdateItemParameters data)
    {
        target.CallService("update_item", data);
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="item">The name for the to-do list item. eg: Submit income tax return</param>
    ///<param name="rename">The new name of the to-do item eg: Something else</param>
    ///<param name="status">A status or confirmation of the to-do item. eg: needs_action</param>
    ///<param name="dueDate">The date the to-do item is expected to be completed. eg: 2023-11-17</param>
    ///<param name="dueDatetime">The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</param>
    ///<param name="description">A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</param>
    public static void UpdateItem(this TodoEntity target, string item, string? rename = null, object? status = null, object? dueDate = null, object? dueDatetime = null, string? description = null)
    {
        target.CallService("update_item", new TodoUpdateItemParameters { Item = item, Rename = rename, Status = status, DueDate = dueDate, DueDatetime = dueDatetime, Description = description });
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="item">The name for the to-do list item. eg: Submit income tax return</param>
    ///<param name="rename">The new name of the to-do item eg: Something else</param>
    ///<param name="status">A status or confirmation of the to-do item. eg: needs_action</param>
    ///<param name="dueDate">The date the to-do item is expected to be completed. eg: 2023-11-17</param>
    ///<param name="dueDatetime">The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</param>
    ///<param name="description">A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</param>
    public static void UpdateItem(this IEnumerable<TodoEntity> target, string item, string? rename = null, object? status = null, object? dueDate = null, object? dueDatetime = null, string? description = null)
    {
        target.CallService("update_item", new TodoUpdateItemParameters { Item = item, Rename = rename, Status = status, DueDate = dueDate, DueDatetime = dueDatetime, Description = description });
    }
}

public static class TtsEntityExtensionMethods
{
    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    public static void Speak(this TtsEntity target, TtsSpeakParameters data)
    {
        target.CallService("speak", data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    public static void Speak(this IEnumerable<TtsEntity> target, TtsSpeakParameters data)
    {
        target.CallService("speak", data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The TtsEntity to call this service for</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public static void Speak(this TtsEntity target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        target.CallService("speak", new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The IEnumerable&lt;TtsEntity&gt; to call this service for</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public static void Speak(this IEnumerable<TtsEntity> target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        target.CallService("speak", new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public static class UpdateEntityExtensionMethods
{
    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this UpdateEntity target)
    {
        target.CallService("clear_skipped");
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IEnumerable<UpdateEntity> target)
    {
        target.CallService("clear_skipped");
    }

    ///<summary>Installs an update for this device or service.</summary>
    public static void Install(this UpdateEntity target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    public static void Install(this IEnumerable<UpdateEntity> target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The UpdateEntity to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update .</param>
    public static void Install(this UpdateEntity target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The IEnumerable&lt;UpdateEntity&gt; to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update .</param>
    public static void Install(this IEnumerable<UpdateEntity> target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this UpdateEntity target)
    {
        target.CallService("skip");
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IEnumerable<UpdateEntity> target)
    {
        target.CallService("skip");
    }
}

public static class WeatherEntityExtensionMethods
{
    ///<summary>Get weather forecasts.</summary>
    public static void GetForecasts(this WeatherEntity target, WeatherGetForecastsParameters data)
    {
        target.CallService("get_forecasts", data);
    }

    ///<summary>Get weather forecasts.</summary>
    public static void GetForecasts(this IEnumerable<WeatherEntity> target, WeatherGetForecastsParameters data)
    {
        target.CallService("get_forecasts", data);
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The WeatherEntity to call this service for</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public static void GetForecasts(this WeatherEntity target, object @type)
    {
        target.CallService("get_forecasts", new WeatherGetForecastsParameters { Type = @type });
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The IEnumerable&lt;WeatherEntity&gt; to call this service for</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public static void GetForecasts(this IEnumerable<WeatherEntity> target, object @type)
    {
        target.CallService("get_forecasts", new WeatherGetForecastsParameters { Type = @type });
    }
}